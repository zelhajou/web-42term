{
  "files": [
    {
      "path": ".env.local",
      "content": "# .env.local\n\n# 42 API credentials\nNEXT_PUBLIC_42_API_URL=https://api.intra.42.fr/v2\nFT_CLIENT_ID=u-s4t2ud-3ea24e9ed293f8655a8d8da5a1baec9b372b9dd1c795a79e246436c7335c5dfe\nFT_CLIENT_SECRET=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\n\n# App configuration\nNEXT_PUBLIC_APP_URL=http://localhost:3000"
    },
    {
      "path": ".gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# environment variables\n.env*\n!.env.example\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\nproject_code.json\n"
    },
    {
      "path": "app/api/student/[username]/route.js",
      "content": "import { NextResponse } from 'next/server';\nimport { fetchStudentData } from '@/lib/api';\n\n/**\n * API handler for fetching student data\n */\nexport async function GET(request, { params }) {\n  try {\n    const resolvedParams = await Promise.resolve(params);\n    const { username } = resolvedParams;\n    \n    // Debug info - log environment variables availability\n    console.log('Environment check:', {\n      apiUrlExists: !!process.env.NEXT_PUBLIC_42_API_URL,\n      clientIdExists: !!process.env.FT_CLIENT_ID,\n      clientSecretExists: !!process.env.FT_CLIENT_SECRET\n    });\n    \n    // Get student data from API\n    const studentData = await fetchStudentData(username);\n    \n    // Return the full student data\n    return NextResponse.json(studentData);\n  } catch (error) {\n    console.error('API Error:', error);\n    return NextResponse.json(\n      { error: error.message || 'Failed to fetch student data' },\n      { status: 500 }\n    );\n  }\n}"
    },
    {
      "path": "app/api/widget/[type]/[username]/route.js",
      "content": "// app/api/widget/with-level/[type]/[username]/route.js\n\nimport { NextResponse } from 'next/server';\nimport axios from 'axios';\nimport { fetchStudentData } from '@/lib/api';\nimport { generateTerminalSkills, generateErrorSVG as generateSkillsErrorSVG } from '@/lib/generators/terminalSkillsGenerator';\nimport { generateTerminalProjects, generateErrorSVG as generateProjectsErrorSVG } from '@/lib/generators/terminalProjectsGenerator';\nimport { generateTerminalStudent, generateErrorSVG as generateStudentErrorSVG } from '@/lib/generators/terminalStudentGenerator';\n\n// Constants\nconst API_URL = \"https://api.intra.42.fr/v2\";\nconst TOKEN_URL = \"https://api.intra.42.fr/oauth/token\";\nconst CLIENT_ID = \"u-s4t2ud-3ea24e9ed293f8655a8d8da5a1baec9b372b9dd1c795a79e246436c7335c5dfe\";\nconst CLIENT_SECRET = \"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\";\n\n// Cache control constants\nconst CACHE_MAX_AGE = 60 * 60; // 1 hour\nconst STALE_WHILE_REVALIDATE = 60 * 60 * 24; // 1 day\n\n// Token caching\nlet cachedToken = null;\nlet tokenExpiry = null;\n\n/**\n * Get an authentication token from the 42 API\n */\nasync function getToken() {\n  // Check if we have a valid cached token\n  if (cachedToken && tokenExpiry && Date.now() < tokenExpiry) {\n    return cachedToken;\n  }\n\n  try {\n    console.log('Requesting token from 42 API...');\n    const response = await axios.post(TOKEN_URL, {\n      grant_type: \"client_credentials\",\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n    });\n\n    // Cache the token and set expiry (subtract 5 minutes as safety margin)\n    cachedToken = response.data.access_token;\n    tokenExpiry = Date.now() + (response.data.expires_in * 1000) - 300000;\n    console.log('Token obtained successfully');\n\n    return cachedToken;\n  } catch (error) {\n    console.error('Error getting 42 API token:', error);\n    throw new Error(`Failed to get 42 API token: ${error.message}`);\n  }\n}\n\n/**\n * Make an authenticated request to the 42 API\n */\nasync function fetchDirectFromApi(endpoint) {\n  try {\n    const token = await getToken();\n    \n    const response = await axios({\n      url: `${API_URL}${endpoint}`,\n      headers: { \n        Authorization: `Bearer ${token}`\n      }\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error(`Error in API request ${endpoint}:`, error);\n    throw new Error(`Failed API request: ${error.message}`);\n  }\n}\n\n/**\n * Get user level directly from the API\n */\nasync function getCursusLevel(username) {\n  try {\n    console.log(`Fetching cursus level for ${username}...`);\n    \n    // Fetch cursus data directly\n    const endpoint = `/users/${username}/cursus_users`;\n    const cursusData = await fetchDirectFromApi(endpoint);\n    \n    console.log(`Found ${cursusData.length} cursus entries`);\n    \n    // Look for 42cursus specifically\n    let mainLevel = 0;\n    for (const cursus of cursusData) {\n      console.log(`Cursus: ${cursus.cursus?.name}, Level: ${cursus.level}`);\n      \n      // Check for 42cursus by name\n      if (cursus.cursus?.name === '42cursus') {\n        console.log(`Found 42cursus level: ${cursus.level}`);\n        mainLevel = cursus.level;\n        break;\n      }\n      \n      // Also check for '42 Cursus' variant\n      if (cursus.cursus?.name === '42 Cursus') {\n        console.log(`Found 42 Cursus level: ${cursus.level}`);\n        mainLevel = cursus.level;\n        break;\n      }\n      \n      // Check by cursus ID (21 = 42 main curriculum)\n      if (cursus.cursus?.id === 21) {\n        console.log(`Found cursus ID 21 level: ${cursus.level}`);\n        mainLevel = cursus.level;\n        if (!mainLevel) {\n          break;\n        }\n      }\n    }\n    \n    return mainLevel;\n  } catch (error) {\n    console.error(`Error fetching level for ${username}:`, error);\n    return 0;\n  }\n}\n\n/**\n * API handler for the terminal-style widgets with direct level injection\n */\nexport async function GET(request, { params }) {\n  try {\n    const resolvedParams = await Promise.resolve(params);\n    const { username, type } = resolvedParams;\n    const searchParams = request.nextUrl.searchParams;\n    \n    // Extract customization options with sensible defaults\n    const theme = searchParams.get('theme') || 'dark';\n    const width = parseInt(searchParams.get('width'), 10) || 800;\n    \n    // Configure max items to display\n    const maxSkills = parseInt(searchParams.get('maxSkills'), 10) || 100;\n    const maxProjects = parseInt(searchParams.get('maxProjects'), 10) || 50;\n    \n    // Option to include or exclude piscine projects\n    const includePiscine = searchParams.get('includePiscine') === 'true';\n    \n    // Common headers for SVG response\n    const headers = {\n      'Content-Type': 'image/svg+xml; charset=utf-8',\n      'Cache-Control': `public, max-age=${CACHE_MAX_AGE}, stale-while-revalidate=${STALE_WHILE_REVALIDATE}`,\n      'Access-Control-Allow-Origin': '*',\n      'X-Content-Type-Options': 'nosniff',\n    };\n    \n    // Fetch student data\n    const decodedUsername = decodeURIComponent(username);\n    const studentData = await fetchStudentData(decodedUsername);\n    \n    // Check if student data was fetched successfully\n    if (!studentData || !studentData.login) {\n      throw new Error(`User '${decodedUsername}' not found or API error`);\n    }\n    \n    // For any widget, fetch the level directly for more reliable results\n    const level = await getCursusLevel(decodedUsername);\n    console.log(`Direct API level result for ${decodedUsername}: ${level}`);\n    \n    // Add level directly to the student data - guarantees it will be used\n    if (level > 0) {\n      studentData.directLevelValue = level;\n    }\n    \n    // Generate appropriate SVG based on widget type\n    let svgContent;\n    \n    if (type === 'projects') {\n      // Generate terminal-style projects visualization with proper options\n      svgContent = generateTerminalProjects(studentData, theme, {\n        width,\n        maxProjects,\n        includePiscine\n      });\n    } else if (type === 'student') {\n      // Generate terminal-style student info visualization\n      svgContent = generateTerminalStudent(studentData, theme, {\n        width\n      });\n    } else {\n      // Default to skills visualization\n      svgContent = generateTerminalSkills(studentData, theme, {\n        width,\n        maxSkills\n      });\n    }\n    \n    return new NextResponse(svgContent, { headers });\n  } catch (error) {\n    console.error('Widget generation error:', error);\n    \n    // Return an error SVG based on widget type\n    let errorSvg;\n    if (type === 'projects') {\n      errorSvg = generateProjectsErrorSVG(error.message || 'Failed to generate projects widget');\n    } else if (type === 'student') {\n      errorSvg = generateStudentErrorSVG(error.message || 'Failed to generate student widget');\n    } else {\n      errorSvg = generateSkillsErrorSVG(error.message || 'Failed to generate skills widget');\n    }\n    \n    return new NextResponse(errorSvg, {\n      headers: { 'Content-Type': 'image/svg+xml; charset=utf-8' },\n      status: 500\n    });\n  }\n}"
    },
    {
      "path": "app/globals.css",
      "content": "/* app/globals.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 255, 255, 255;\n  --background-rgb: 15, 23, 42;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: rgb(var(--background-rgb));\n}\n\n/* Add smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}"
    },
    {
      "path": "app/layout.js",
      "content": "// app/layout.js\nimport './globals.css';\nimport { Inter } from 'next/font/google';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata = {\n  title: '42widgets | Beautiful Widgets for 42 School Students',\n  description: 'Generate beautiful widgets to showcase your 42 school achievements on GitHub and other platforms.',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head />\n      <body className={`${inter.className} bg-gray-900 text-white min-h-screen flex flex-col`} suppressHydrationWarning>\n        {children}\n      </body>\n    </html>\n  );\n}"
    },
    {
      "path": "app/page.js",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport TerminalSkillsDisplay from '@/components/student/TerminalSkillsDisplay';\nimport ShareLinks from '@/components/student/ShareLinks';\nimport { generateTerminalSkills, generateErrorSVG } from '@/lib/generators/terminalSkillsGenerator';\n\nexport default function HomePage() {\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [svgWidget, setSvgWidget] = useState('');\n  const [currentUsername, setCurrentUsername] = useState('');\n  const [widgetType, setWidgetType] = useState('skills'); // 'skills' or 'projects'\n  const [selectedTheme, setSelectedTheme] = useState('dark');\n  const [showShareOptions, setShowShareOptions] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!username.trim()) {\n      setError('Please enter a valid username');\n      return;\n    }\n    \n    // Validate username format\n    if (!/^[a-z0-9-]+$/i.test(username)) {\n      setError('Please enter a valid 42 intra username (letters, numbers, and hyphens only)');\n      return;\n    }\n    \n    setIsLoading(true);\n    setError('');\n    \n    try {\n      // Fetch student data from our API with properly encoded username\n      const encodedUsername = encodeURIComponent(username.trim());\n      const response = await axios.get(`/api/student/${encodedUsername}`);\n      const data = response.data;\n      \n      // Generate the SVG widget URL with proper type, theme and parameters\n      const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n      \n      // Add maxProjects parameter to ensure we show all validated projects\n      // For projects widget, never include Piscine projects by default \n      const widgetUrl = `${baseUrl}/api/widget/${widgetType}/${encodedUsername}?theme=${selectedTheme}&maxProjects=50`;\n      \n      // Fetch the SVG directly from the widget endpoint\n      const svgResponse = await axios.get(widgetUrl);\n      const svg = svgResponse.data;\n      \n      setSvgWidget(svg);\n      setCurrentUsername(username);\n      // Reset share options panel when generating new widget\n      setShowShareOptions(false);\n      \n    } catch (err) {\n      console.error('Error:', err);\n      \n      // Handle specific error types\n      let errorMessage = 'Error generating widget';\n      \n      if (err.response) {\n        if (err.response.status === 429) {\n          errorMessage = 'Rate limit exceeded. Please try again in a minute.';\n        } else if (err.response.status === 404) {\n          errorMessage = `Username '${username}' not found. Please check the spelling.`;\n        } else if (err.response.data?.error) {\n          errorMessage = err.response.data.error;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setSvgWidget(generateErrorSVG(errorMessage, selectedTheme));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleThemeChange = (theme) => {\n    setSelectedTheme(theme);\n    if (currentUsername) {\n      try {\n        // Generate the widget URL with the selected type and new theme\n        const encodedUsername = encodeURIComponent(currentUsername.trim());\n        const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n        \n        // Keep the maxProjects parameter\n        const widgetUrl = `${baseUrl}/api/widget/${widgetType}/${encodedUsername}?theme=${theme}&maxProjects=50`;\n        \n        // Fetch the updated SVG\n        axios.get(widgetUrl)\n          .then(response => {\n            setSvgWidget(response.data);\n          })\n          .catch(err => {\n            console.error('Error updating theme:', err);\n          });\n      } catch (err) {\n        console.error('Error updating theme:', err);\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#121212] text-white flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-[#2a2a2a] py-3 px-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <h1 className=\"text-lg font-mono font-bold\">\n            <span className=\"text-green-400\">$</span> \n            <span className=\"text-white\">42</span>\n            <span className=\"text-purple-400\">term</span>\n          </h1>\n          <a \n            href=\"https://github.com/42widgets/terminal\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            className=\"text-gray-500 hover:text-white transition-colors duration-200\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n              <path fillRule=\"evenodd\" d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\" clipRule=\"evenodd\" />\n            </svg>\n          </a>\n        </div>\n      </header>\n\n      {/* Main content */}\n      <div className=\"flex-grow flex max-w-7xl mx-auto w-full\">\n        {/* Left sidebar */}\n        <div className=\"w-[320px] flex-shrink-0 border-r border-[#2a2a2a] p-4\">\n          {/* Widget Type Toggle */}\n          <div className=\"mb-4 bg-[#1a1a1a] border border-[#333] rounded-md overflow-hidden flex\">\n            <button\n              onClick={() => setWidgetType('skills')}\n              className={`py-2 px-4 text-sm flex-1 ${widgetType === 'skills' ? 'bg-blue-600 text-white' : 'bg-[#1a1a1a] text-gray-400 hover:bg-[#252525]'}`}\n            >\n              Skills Terminal\n            </button>\n            <button\n              onClick={() => setWidgetType('projects')}\n              className={`py-2 px-4 text-sm flex-1 ${widgetType === 'projects' ? 'bg-blue-600 text-white' : 'bg-[#1a1a1a] text-gray-400 hover:bg-[#252525]'}`}\n            >\n              Projects Terminal\n            </button>\n            <button\n              onClick={() => setWidgetType('student')}\n              className={`py-2 px-4 text-sm flex-1 ${widgetType === 'student' ? 'bg-purple-600 text-white' : 'bg-[#1a1a1a] text-gray-400 hover:bg-[#252525]'}`}\n            >\n              Student Profile\n            </button>\n          </div>\n          \n          {/* Username Input */}\n          <div className=\"mb-5\">\n            <form onSubmit={handleSubmit} className=\"bg-[#1a1a1a] border border-[#333] p-3 rounded-md\">\n              <div className=\"relative mb-3\">\n                <div className=\"flex items-center absolute inset-y-0 left-0 pl-3 pointer-events-none\">\n                  <span className=\"text-gray-500\">@</span>\n                </div>\n                <input\n                  type=\"text\"\n                  id=\"username\"\n                  className=\"w-full pl-8 py-2 bg-[#242424] text-white border border-[#444] rounded-md focus:outline-none focus:border-blue-500 text-sm\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  placeholder=\"Enter 42 username\"\n                  required\n                />\n              </div>\n              \n              <button\n                type=\"submit\"\n                className={`w-full py-2 rounded-md text-white font-medium text-sm transition-colors ${\n                  isLoading ? 'bg-gray-700 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'\n                }`}\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <span className=\"flex items-center justify-center\">\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    Generating...\n                  </span>\n                ) : 'Generate Widget'}\n              </button>\n              \n              {error && (\n                <div className=\"mt-3 p-2 bg-red-900/30 border border-red-500/50 rounded text-red-300 text-xs\">\n                  <div className=\"flex items-start\">\n                    <svg className=\"h-4 w-4 text-red-400 mr-1.5 mt-0.5 flex-shrink-0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z\" clipRule=\"evenodd\" />\n                    </svg>\n                    {error}\n                  </div>\n                </div>\n              )}\n            </form>\n          </div>\n          \n          {/* Features Section */}\n          <div className=\"mb-5 bg-[#1a1a1a] border border-[#333] rounded-md p-3\">\n            <h3 className=\"uppercase text-xs text-gray-500 font-semibold mb-2 tracking-wider\">Features</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li className=\"flex items-center text-gray-300\">\n                <span className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center text-blue-400 mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                    <path fillRule=\"evenodd\" d=\"M3.25 3A2.25 2.25 0 001 5.25v9.5A2.25 2.25 0 003.25 17h13.5A2.25 2.25 0 0019 14.75v-9.5A2.25 2.25 0 0016.75 3H3.25zm.943 1.5h11.614a.75.75 0 01.75.75v10.5a.75.75 0 01-.75.75H4.193a.75.75 0 01-.75-.75V5.25a.75.75 0 01.75-.75z\" clipRule=\"evenodd\" />\n                  </svg>\n                </span>\n                Terminal-style visualization\n              </li>\n              <li className=\"flex items-center text-gray-300\">\n                <span className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center text-green-400 mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                    <path d=\"M15.98 1.804a1 1 0 00-1.96 0l-.24 1.192a1 1 0 01-.784.785l-1.192.238a1 1 0 000 1.962l1.192.238a1 1 0 01.785.785l.238 1.192a1 1 0 001.962 0l.238-1.192a1 1 0 01.785-.785l1.192-.238a1 1 0 000-1.962l-1.192-.238a1 1 0 01-.785-.785l-.238-1.192zM6.949 5.684a1 1 0 00-1.898 0l-.683 2.051a1 1 0 01-.633.633l-2.051.683a1 1 0 000 1.898l2.051.684a1 1 0 01.633.632l.683 2.051a1 1 0 001.898 0l.683-2.051a1 1 0 01.633-.633l2.051-.683a1 1 0 000-1.898l-2.051-.683a1 1 0 01-.633-.633L6.95 5.684z\" />\n                  </svg>\n                </span>\n                Color-coded by proficiency level\n              </li>\n              <li className=\"flex items-center text-gray-300\">\n                <span className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center text-purple-400 mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-5.5-2.5a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zM10 12a5.99 5.99 0 00-4.793 2.39A6.483 6.483 0 0010 16.5a6.483 6.483 0 004.793-2.11A5.99 5.99 0 0010 12z\" clipRule=\"evenodd\" />\n                  </svg>\n                </span>\n                Student profile statistics\n              </li>\n              <li className=\"flex items-center text-gray-300\">\n                <span className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center text-yellow-400 mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                    <path fillRule=\"evenodd\" d=\"M6.28 5.22a.75.75 0 010 1.06L2.56 10l3.72 3.72a.75.75 0 01-1.06 1.06L.97 10.53a.75.75 0 010-1.06l4.25-4.25a.75.75 0 011.06 0zm7.44 0a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L17.44 10l-3.72-3.72a.75.75 0 010-1.06z\" clipRule=\"evenodd\" />\n                  </svg>\n                </span>\n                GitHub profile ready\n              </li>\n            </ul>\n          </div>\n          \n          {/* How to use */}\n          <div className=\"bg-[#1a1a1a] border border-[#333] rounded-md p-3\">\n            <h3 className=\"uppercase text-xs text-gray-500 font-semibold mb-2 tracking-wider\">How to use</h3>\n            <ol className=\"list-decimal ml-5 text-sm space-y-1 text-gray-300\">\n              <li>Enter your 42 intra username</li>\n              <li>Select widget type (Skills/Projects)</li>\n              <li>Copy the markdown to your GitHub README</li>\n            </ol>\n          </div>\n        </div>\n        \n        {/* Main content area - Terminal Display */}\n        <div className=\"flex-grow p-6 flex items-center justify-center overflow-auto\">\n          {svgWidget ? (\n            <div className=\"flex flex-col max-w-full\">\n              <div className=\"bg-[#1a1a1a] border border-[#333] rounded-md p-4 mb-4 overflow-hidden\">\n                <div \n                  dangerouslySetInnerHTML={{ __html: svgWidget }} \n                  className=\"transform hover:scale-[1.02] transition-transform duration-300 flex justify-center\"\n                />\n              </div>\n              \n              <div className=\"flex gap-4 justify-between items-center bg-[#1a1a1a] border border-[#333] rounded-md p-3 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"text-xs text-gray-500\">THEME:</div>\n                  <div className=\"flex gap-1\">\n                    <button \n                      className={`px-3 py-1 text-xs rounded ${selectedTheme === 'dark' ? 'bg-blue-600 text-white' : 'bg-[#242424] text-gray-300 hover:bg-[#303030]'}`}\n                      onClick={() => handleThemeChange('dark')}\n                    >\n                      Dark\n                    </button>\n                    <button \n                      className={`px-3 py-1 text-xs rounded ${selectedTheme === 'light' ? 'bg-blue-600 text-white' : 'bg-[#242424] text-gray-300 hover:bg-[#303030]'}`}\n                      onClick={() => handleThemeChange('light')}\n                    >\n                      Light\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <button \n                    className=\"px-3 py-1 text-xs rounded bg-purple-600 text-white hover:bg-purple-700 flex items-center gap-1\"\n                    onClick={() => setShowShareOptions(!showShareOptions)}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path d=\"M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z\" />\n                    </svg>\n                    {showShareOptions ? 'Hide Options' : 'Share Options'}\n                  </button>\n                  \n                  <button \n                    className=\"px-3 py-1 text-xs rounded bg-blue-600 text-white hover:bg-blue-700\"\n                    onClick={() => {\n                      const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n                      const widgetUrl = `${baseUrl}/api/widget/${widgetType}/${encodeURIComponent(currentUsername)}?theme=${selectedTheme}`;\n                      const markdown = `![${currentUsername}'s 42 ${widgetType}](${widgetUrl})`;\n                      navigator.clipboard.writeText(markdown);\n                    }}\n                  >\n                    Copy Markdown\n                  </button>\n                </div>\n              </div>\n              \n              {/* Share Options Panel */}\n              {showShareOptions && (\n                <div className=\"mt-4\">\n                  <ShareLinks \n                    username={currentUsername} \n                    widgetType={widgetType} \n                    theme={selectedTheme} \n                  />\n                </div>\n              )}\n              \n              <div className=\"text-xs text-gray-500 mt-2 text-center\">\n                Tip: After adding to GitHub README, you may need to refresh your profile page to see changes.\n              </div>\n            </div>\n          ) : (\n            <div className=\"w-[800px] h-[500px] bg-[#1a1a1a] border border-[#333] rounded-md flex items-center justify-center\">\n              <div className=\"text-center max-w-md\">\n                <div className=\"text-gray-600 mb-6\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-300 mb-3\">Your Skills Terminal</h3>\n                <p className=\"text-gray-500 text-sm mb-4\">\n                  Get a beautiful terminal visualization of your 42 School skills to showcase on your GitHub profile.\n                </p>\n                <div className=\"inline-block bg-[#242424] px-4 py-2 rounded-md text-xs text-gray-400 font-mono\">\n                  @username:~$ ls -la skills --by-cursus\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-[#2a2a2a] py-3 text-center\">\n        <p className=\"text-gray-600 text-xs\">\n          Created with ❤️ • Not affiliated with 42 School • © {new Date().getFullYear()} 42widgets\n        </p>\n      </footer>\n    </div>\n  );\n}"
    },
    {
      "path": "components/student/ShareLinks.js",
      "content": "import React, { useState } from 'react';\n\n/**\n * Simple share links component that always shows all skills\n */\nconst ShareLinks = ({ username, widgetType = 'skills', theme = 'dark' }) => {\n  const [copiedFormat, setCopiedFormat] = useState(null);\n  \n  // Get base URL\n  const getBaseUrl = () => {\n    return typeof window !== 'undefined' \n      ? window.location.origin \n      : 'https://42widgets.vercel.app';\n  };\n  \n  // Generate widget URL - always showing all skills\n  const getWidgetUrl = () => {\n    const baseUrl = getBaseUrl();\n    return `${baseUrl}/api/widget/${widgetType}/${encodeURIComponent(username)}?theme=${theme}`;\n  };\n  \n  // Generate different sharing formats\n  const sharingFormats = {\n    markdown: {\n      label: 'Markdown (GitHub, GitLab)',\n      icon: (\n        <svg className=\"w-4 h-4\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n          <path d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\" />\n        </svg>\n      ),\n      format: `![${username}'s 42 ${widgetType}](${getWidgetUrl()})`\n    },\n    html: {\n      label: 'HTML',\n      icon: (\n        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n          <path d=\"M1.5 0h21l-1.91 21.563L11.977 24l-8.564-2.438L1.5 0zm7.031 9.75l-.232-2.718 10.059.003.23-2.622L5.412 4.41l.698 8.01h9.126l-.326 3.426-2.91.804-2.955-.81-.188-2.11H6.248l.33 4.171L12 19.351l5.379-1.443.744-8.157H8.531z\" />\n        </svg>\n      ),\n      format: `<img src=\"${getWidgetUrl()}\" alt=\"${username}'s 42 ${widgetType}\" />`\n    },\n    markdown_linked: {\n      label: 'Markdown (With Profile Link)',\n      icon: (\n        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n          <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\" />\n        </svg>\n      ),\n      format: `[![${username}'s 42 ${widgetType}](${getWidgetUrl()})](https://profile.intra.42.fr/users/${username})`\n    },\n    url: {\n      label: 'Direct URL',\n      icon: (\n        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n          <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\" />\n        </svg>\n      ),\n      format: getWidgetUrl()\n    },\n    bbcode: {\n      label: 'BBCode (Forums)',\n      icon: (\n        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n          <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1z\" />\n        </svg>\n      ),\n      format: `[img]${getWidgetUrl()}[/img]`\n    }\n  };\n  \n  // Copy format to clipboard\n  const copyToClipboard = (format) => {\n    navigator.clipboard.writeText(sharingFormats[format].format);\n    setCopiedFormat(format);\n    setTimeout(() => setCopiedFormat(null), 2000);\n  };\n\n  return (\n    <div className=\"bg-[#1a1a1a] border border-[#333] rounded-md p-3 w-full space-y-3\">\n      <h3 className=\"uppercase text-xs text-gray-500 font-semibold mb-2 tracking-wider\">Share Your Terminal</h3>\n      \n      {/* Format options */}\n      {Object.keys(sharingFormats).map((formatKey) => {\n        const format = sharingFormats[formatKey];\n        return (\n          <div key={formatKey} className=\"group hover:bg-[#242424] rounded-md transition-colors\">\n            <div className=\"flex items-center justify-between gap-2 p-2\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-400\">{format.icon}</span>\n                <span className=\"text-sm text-gray-300\">{format.label}</span>\n              </div>\n              <button\n                onClick={() => copyToClipboard(formatKey)}\n                className={`px-2 py-1 text-xs rounded-md transition-colors ${\n                  copiedFormat === formatKey\n                    ? 'bg-green-600 text-white'\n                    : 'bg-[#323232] text-gray-300 hover:bg-[#383838]'\n                }`}\n              >\n                {copiedFormat === formatKey ? (\n                  <span className=\"flex items-center gap-1\">\n                    <svg className=\"w-3 h-3\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                      <path d=\"M20 6L9 17l-5-5\"></path>\n                    </svg>\n                    Copied\n                  </span>\n                ) : (\n                  'Copy'\n                )}\n              </button>\n            </div>\n            <div className=\"bg-[#121212] mx-2 mb-2 p-2 rounded overflow-x-auto hidden group-hover:block\">\n              <code className=\"text-xs text-gray-400 font-mono whitespace-nowrap\">{format.format}</code>\n            </div>\n          </div>\n        );\n      })}\n      \n      {/* Preview */}\n      <div className=\"mt-4 pt-4 border-t border-[#333]\">\n        <h4 className=\"text-xs text-gray-500 uppercase mb-2\">Preview</h4>\n        <div className=\"bg-[#121212] border border-[#222] rounded overflow-hidden\">\n          <div className=\"flex items-center justify-center p-3\">\n            <img \n              src={getWidgetUrl()} \n              alt={`${username}'s 42 ${widgetType}`} \n              className=\"max-w-full h-auto transform hover:scale-[1.01] transition-transform duration-300\"\n              style={{ maxHeight: '180px' }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShareLinks;"
    },
    {
      "path": "components/student/TerminalSkillsDisplay.js",
      "content": "'use client';\n\nimport { useState } from 'react';\n\nexport default function TerminalSkillsDisplay({ svgWidget, username, widgetType = 'skills' }) {\n  const [copied, setCopied] = useState(false);\n  const [selectedTheme, setSelectedTheme] = useState('dark');\n  \n  // Generate GitHub embed code\n  const generateGithubCode = () => {\n    if (!username) return '';\n    \n    const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n    const widgetUrl = `${baseUrl}/api/widget/${widgetType}/${encodeURIComponent(username)}?theme=${selectedTheme}`;\n    \n    return `![${username}'s 42 ${widgetType}](${widgetUrl})`;\n  };\n  \n  // Copy to clipboard\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(generateGithubCode())\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => console.error('Failed to copy:', err));\n  };\n  \n  if (!svgWidget) return null;\n  \n  return (\n    <div className=\"w-full bg-[#1a1a1a] border border-[#333] rounded-md p-4 h-full flex flex-col\">\n      {/* Widget Preview */}\n      <div className=\"border border-[#333] rounded-md p-2 bg-[#121212] mb-4 overflow-auto flex-grow flex items-center justify-center\">\n        <div \n          dangerouslySetInnerHTML={{ __html: svgWidget }} \n          className=\"transform transition hover:scale-[1.01] duration-200\"\n        />\n      </div>\n      \n      <div className=\"space-y-3 flex-shrink-0\">\n        {/* Controls row with theme selector and copy button */}\n        <div className=\"flex gap-3 items-end\">\n          {/* Theme Selector */}\n          <div className=\"flex-grow\">\n            <label className=\"block text-[10px] text-gray-500 mb-1\">THEME</label>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => setSelectedTheme('dark')}\n                className={`px-2 py-1 rounded text-xs transition-colors flex-1 ${\n                  selectedTheme === 'dark' \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-[#242424] text-gray-400 hover:bg-[#2d2d2d]'\n                }`}\n              >\n                Dark\n              </button>\n              <button\n                onClick={() => setSelectedTheme('light')}\n                className={`px-2 py-1 rounded text-xs transition-colors flex-1 ${\n                  selectedTheme === 'light' \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-[#242424] text-gray-400 hover:bg-[#2d2d2d]'\n                }`}\n              >\n                Light\n              </button>\n            </div>\n          </div>\n          \n          {/* Copy button */}\n          <button\n            onClick={copyToClipboard}\n            className={`px-3 py-1 rounded text-white text-xs transition-colors h-[26px] flex items-center ${\n              copied \n                ? 'bg-green-600' \n                : 'bg-blue-600 hover:bg-blue-700'\n            }`}\n          >\n            {copied ? (\n              <span className=\"flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n                Copied\n              </span>\n            ) : 'Copy Markdown'}\n          </button>\n        </div>\n        \n        {/* URL Preview */}\n        <div>\n          <label className=\"block text-[10px] text-gray-500 mb-1\">MARKDOWN CODE</label>\n          <div className=\"bg-[#242424] rounded text-xs text-gray-400 px-2 py-1.5 font-mono overflow-x-auto whitespace-nowrap\">\n            {generateGithubCode()}\n          </div>\n        </div>\n        \n        {/* New Tab Link */}\n        <div className=\"text-center\">\n          <a\n            href={`/api/widget/${widgetType}/${username}?theme=${selectedTheme}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center px-2 py-1 bg-[#242424] text-gray-400 rounded text-xs hover:bg-[#2d2d2d] transition-colors\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n            </svg>\n            Open in new tab\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "get-user-level.js",
      "content": "#!/usr/bin/env node\nconst axios = require('axios');\n\n// Configuration - hardcoded credentials\nconst API_URL = \"https://api.intra.42.fr/v2\";\nconst TOKEN_URL = \"https://api.intra.42.fr/oauth/token\";\nconst CLIENT_ID = \"u-s4t2ud-3ea24e9ed293f8655a8d8da5a1baec9b372b9dd1c795a79e246436c7335c5dfe\";\nconst CLIENT_SECRET = \"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\";\n\n/**\n * Get an authentication token from the 42 API\n */\nasync function getToken() {\n  \n  try {\n    console.log('Requesting token from 42 API...');\n    const response = await axios.post(TOKEN_URL, {\n      grant_type: \"client_credentials\",\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n    });\n\n    console.log('Token obtained successfully');\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error getting 42 API token:', error.message);\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    throw new Error(`Failed to get 42 API token: ${error.message}`);\n  }\n}\n\n/**\n * Make an authenticated request to the 42 API\n */\nasync function api42Request(endpoint, options = {}) {\n  try {\n    const token = await getToken();\n    \n    const response = await axios({\n      url: `${API_URL}${endpoint}`,\n      headers: { \n        Authorization: `Bearer ${token}`,\n        ...options.headers\n      },\n      ...options\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error(`Error in API request ${endpoint}:`, error.message);\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    throw new Error(`Failed API request: ${error.response?.status || ''} ${error.message}`);\n  }\n}\n\n/**\n * Get user level from 42 API\n * @param {string} username - 42 intra username\n * @returns {Promise<Object>} User level information for all cursus\n */\nasync function getUserLevel(username) {\n  try {\n    // Get user data\n    const userData = await api42Request(`/users/${username}`);\n    \n    // Get cursus and level information\n    const cursusData = userData.cursus_users || [];\n    const levelInfo = {};\n    \n    // Process each cursus\n    for (const cursus of cursusData) {\n      const cursusName = cursus.cursus?.name || 'Unknown Cursus';\n      const level = cursus.level;\n      levelInfo[cursusName] = level;\n    }\n    \n    return {\n      username: userData.login,\n      displayName: userData.displayname || userData.login,\n      image: userData.image?.versions?.small,\n      levels: levelInfo\n    };\n  } catch (error) {\n    console.error(`Error getting level for user ${username}:`, error.message);\n    throw error;\n  }\n}\n\n/**\n * Main function to run the script\n */\nasync function main() {\n  try {\n    // Get username from command line arguments\n    const username = process.argv[2];\n    if (!username) {\n      console.error('Please provide a username as an argument');\n      console.log('Usage: node get-user-level.js <username>');\n      console.log('Example: node get-user-level.js jdoe');\n      process.exit(1);\n    }\n    \n    // Get and display user level\n    const userInfo = await getUserLevel(username);\n    \n    console.log('\\n=============================================');\n    console.log(`User: ${userInfo.displayName} (${userInfo.username})`);\n    console.log('=============================================');\n    \n    if (Object.keys(userInfo.levels).length === 0) {\n      console.log('No cursus information found for this user');\n    } else {\n      console.log('LEVELS BY CURSUS:');\n      console.log('---------------------------------------------');\n      \n      for (const [cursus, level] of Object.entries(userInfo.levels)) {\n        console.log(`${cursus}: ${level.toFixed(2)}`);\n      }\n    }\n    \n  } catch (error) {\n    console.error('Error:', error.message);\n    process.exit(1);\n  }\n}\n\n// Run the script if directly executed\nif (require.main === module) {\n  main();\n}\n\n// Export for use as a module\nmodule.exports = {\n  getUserLevel\n};"
    },
    {
      "path": "jsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"@/components/*\": [\"./components/*\"],\n      \"@/lib/*\": [\"./lib/*\"],\n      \"@/api/*\": [\"./lib/api/*\"],\n      \"@/config/*\": [\"./config/*\"],\n      \"@/themes\": [\"./lib/themes\"],\n      \"@/mock-data\": [\"./lib/mock-data\"],\n      \"@/generators/*\": [\"./lib/generators/*\"]\n    },\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"react\",\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": false,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \"**/*.js\",\n    \"**/*.jsx\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}"
    },
    {
      "path": "lib/api/index.js",
      "content": "import axios from 'axios';\n\n// Base API URLs\nconst API_URL = process.env.NEXT_PUBLIC_42_API_URL || \"https://api.intra.42.fr/v2\";\nconst TOKEN_URL = \"https://api.intra.42.fr/oauth/token\";\nconst CLIENT_ID = process.env.FT_CLIENT_ID;\nconst CLIENT_SECRET = process.env.FT_CLIENT_SECRET;\n\n// Cache the token to avoid unnecessary requests\nlet cachedToken = null;\nlet tokenExpiry = null;\n\n/**\n * Get an authentication token from the 42 API\n */\nexport async function getToken() {\n  // Check if we have a valid cached token\n  if (cachedToken && tokenExpiry && Date.now() < tokenExpiry) {\n    return cachedToken;\n  }\n\n  if (!CLIENT_ID || !CLIENT_SECRET) {\n    console.error('Missing 42 API credentials:', { \n      clientIdExists: !!CLIENT_ID, \n      clientSecretExists: !!CLIENT_SECRET \n    });\n    throw new Error('Missing 42 API credentials. Make sure FT_CLIENT_ID and FT_CLIENT_SECRET are set.');\n  }\n  \n  try {\n    console.log('Requesting token from 42 API...');\n    const response = await axios.post(TOKEN_URL, {\n      grant_type: \"client_credentials\",\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n    });\n\n    // Cache the token and set expiry (subtract 5 minutes as safety margin)\n    cachedToken = response.data.access_token;\n    tokenExpiry = Date.now() + (response.data.expires_in * 1000) - 300000;\n    console.log('Token obtained successfully');\n\n    return cachedToken;\n  } catch (error) {\n    console.error('Error getting 42 API token:', error);\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    throw new Error(`Failed to get 42 API token: ${error.message}`);\n  }\n}\n\n/**\n * Make an authenticated request to the 42 API with retry logic\n */\nexport async function api42Request(endpoint, options = {}, retryCount = 0) {\n  try {\n    const token = await getToken();\n    \n    const response = await axios({\n      url: `${API_URL}${endpoint}`,\n      headers: { \n        Authorization: `Bearer ${token}`,\n        ...options.headers\n      },\n      ...options\n    });\n    \n    return response.data;\n  } catch (error) {\n    // Handle rate limiting with exponential backoff\n    if (error.response && error.response.status === 429 && retryCount < 3) {\n      console.warn(`Rate limited on ${endpoint}, retry attempt ${retryCount + 1}...`);\n      \n      // Calculate backoff time: 2^retry * 1000ms + random jitter\n      const backoffTime = (Math.pow(2, retryCount) * 1000) + (Math.random() * 1000);\n      \n      // Wait for backoff time\n      await new Promise(resolve => setTimeout(resolve, backoffTime));\n      \n      // Retry the request\n      return api42Request(endpoint, options, retryCount + 1);\n    }\n    \n    console.error(`Error in API request ${endpoint}:`, error);\n    throw new Error(`Failed API request: ${error.response?.status || ''} ${error.message}`);\n  }\n}\n\n/**\n * Make a paginated request to the 42 API with automatic handling of multiple pages\n * @param {string} endpoint - API endpoint\n * @param {Object} options - Request options\n * @param {number} perPage - Items per page\n * @returns {Promise<Array>} Combined results from all pages\n */\nexport async function api42PaginatedRequest(endpoint, options = {}, perPage = 100) {\n  const allResults = [];\n  let page = 1;\n  let hasMoreData = true;\n  \n  while (hasMoreData) {\n    console.log(`Fetching ${endpoint} page ${page}...`);\n    \n    // Add pagination parameters to the request\n    const paginatedOptions = {\n      ...options,\n      params: {\n        ...(options.params || {}),\n        page,\n        per_page: perPage\n      }\n    };\n    \n    try {\n      // Make the API request for the current page\n      const data = await api42Request(endpoint, paginatedOptions);\n      \n      if (Array.isArray(data) && data.length > 0) {\n        // Add data from this page to the combined results\n        allResults.push(...data);\n        \n        // Check if there might be more pages\n        if (data.length < perPage) {\n          hasMoreData = false;\n        } else {\n          page++;\n        }\n      } else {\n        // No more data or empty response\n        hasMoreData = false;\n      }\n    } catch (error) {\n      console.error(`Error fetching page ${page} of ${endpoint}:`, error);\n      // Stop pagination on error\n      hasMoreData = false;\n      \n      // If we already have some results, return them instead of failing\n      if (allResults.length > 0) {\n        console.warn(`Returning ${allResults.length} items fetched before error occurred`);\n        return allResults;\n      }\n      \n      // If no results yet, rethrow the error\n      throw error;\n    }\n  }\n  \n  console.log(`Completed pagination for ${endpoint}: ${allResults.length} total items`);\n  return allResults;\n}\n\n/**\n * Fetch comprehensive student data in one call\n */\nexport async function fetchStudentData(username) {\n  try {\n    // Fetch student basic profile\n    const userData = await api42Request(`/users/${username}`);\n    const userId = userData.id;\n    \n    // Debug info - log environment variables availability\n    console.log('Environment check:', {\n      apiUrlExists: !!process.env.NEXT_PUBLIC_42_API_URL,\n      clientIdExists: !!process.env.FT_CLIENT_ID,\n      clientSecretExists: !!process.env.FT_CLIENT_SECRET\n    });\n    \n    // Use paginated request for projects data to get ALL projects\n    console.log(`Fetching all projects for user ${username} (ID: ${userId})...`);\n    const projectsData = await api42PaginatedRequest(`/users/${userId}/projects_users`);\n    console.log(`Successfully fetched ${projectsData.length} total projects`);\n    \n    // Make parallel request for coalition data (typically small, no pagination needed)\n    const coalitionsData = await api42Request(`/users/${userId}/coalitions`).catch(() => []);\n    \n    // Process skills data\n    const cursusData = userData.cursus_users || [];\n    const skillsByCursus = {};\n    \n    for (const cursus of cursusData) {\n      const cursusName = cursus.cursus?.name || 'Unknown Cursus';\n      const skills = cursus.skills || [];\n      skillsByCursus[cursusName] = skills;\n    }\n    \n    // Process projects data\n    const projects = {\n      completed: [],\n      inProgress: [],\n      failed: []\n    };\n    \n    for (const project of projectsData) {\n      const projectInfo = {\n        id: project.id,\n        name: project.project?.name || 'Unknown Project',\n        status: project.status,\n        finalMark: project.final_mark,\n        validatedAt: project.validated_at,\n        markedAt: project[\"marked_at\"],\n        cursusName: project.cursus_ids?.length > 0 ? \n          project.cursus_ids[0] : 'Unknown Cursus'\n      };\n      \n      if (project.status === 'finished' && (project.validated === true || project[\"validated?\"] === true)) {\n        projects.completed.push(projectInfo);\n      } else if (project.status === 'in_progress') {\n        projects.inProgress.push(projectInfo);\n      } else {\n        projects.failed.push(projectInfo);\n      }\n    }\n    \n    // Process coalition data\n    let coalition = null;\n    if (coalitionsData && coalitionsData.length > 0) {\n      coalition = {\n        id: coalitionsData[0].id,\n        name: coalitionsData[0].name,\n        slug: coalitionsData[0].slug,\n        color: coalitionsData[0].color,\n        score: coalitionsData[0].score,\n        imageUrl: coalitionsData[0].image_url,\n        coverUrl: coalitionsData[0].cover_url\n      };\n    }\n    \n    // Return compiled student data with ALL projects included in projects_users\n    return {\n      id: userData.id,\n      login: userData.login,\n      displayName: userData.displayname || userData.login,\n      email: userData.email,\n      image: userData.image?.link,\n      location: userData.location,\n      correctionPoints: userData.correction_point,\n      wallet: userData.wallet,\n      createdAt: userData.created_at,\n      updatedAt: userData.updated_at,\n      skills: skillsByCursus,\n      projects,\n      projects_users: projectsData, // Now includes ALL projects from all pages\n      coalition\n    };\n  } catch (error) {\n    console.error('Error fetching student data:', error);\n    throw new Error(`Failed to fetch student data: ${error.message}`);\n  }\n}"
    },
    {
      "path": "lib/generators/terminalProjectsGenerator.js",
      "content": "/**\n * Fixed Terminal Projects Visualization\n * Properly displays completed projects with team info and sorts by completion date\n */\n\n// Helper to escape XML special characters\nconst escapeXml = (unsafe) => unsafe?.replace(/[<>&'\\\"]/g, c => \n  ({\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    \"\\'\": '&apos;',\n    '\\\"': '&quot;'\n  }[c])) || '';\n\n// Terminal theme colors\nconst THEMES = {\n  dark: {\n    bg: '#0D1117',\n    windowBorder: '#000000',\n    headerBg: '#161B22',\n    titleText: '#C9D1D9',\n    promptUser: '#39D353',\n    promptHost: '#58A6FF',\n    promptPath: '#58A6FF',\n    commandText: '#C9D1D9',\n    tableBorder: '#30363D',\n    tableHeader: '#FF7B72',\n    projectName: '#79C0FF',\n    projectMark: {\n      high: '#39D353',     // Green for high marks (≥ 100)\n      passed: '#FFCA28',   // Yellow for passed projects (< 100)\n      failed: '#F85149'    // Red for failed projects\n    },\n    teamBadge: '#D2A8FF',  // Purple for team projects\n    soloBadge: '#79C0FF',  // Blue for solo projects\n    dateText: '#8B949E',   // Subtle color for date\n    skillCursus: '#8B949E',\n    footerText: '#8B949E',\n    errorText: '#F85149'\n  },\n  light: {\n    bg: '#F6F8FA',\n    windowBorder: '#D0D7DE',\n    headerBg: '#F6F8FA',\n    titleText: '#24292F',\n    promptUser: '#0969DA',\n    promptHost: '#8250DF',\n    promptPath: '#0969DA',\n    commandText: '#24292F',\n    tableBorder: '#D0D7DE',\n    tableHeader: '#CF222E',\n    projectName: '#0969DA',\n    projectMark: {\n      high: '#1A7F37',      // Green for high marks (≥ 100)\n      passed: '#9A6700',    // Yellow for passed projects (< 100)\n      failed: '#CF222E'     // Red for failed projects\n    },\n    teamBadge: '#8250DF',   // Purple for team projects\n    soloBadge: '#0969DA',   // Blue for solo projects\n    dateText: '#57606A',    // Subtle color for date\n    skillCursus: '#57606A',\n    footerText: '#57606A',\n    errorText: '#CF222E'\n  }\n};\n\n// SVG definitions for terminal styling\nconst getSvgDefs = (themeName) => {\n  const theme = THEMES[themeName] || THEMES.dark;\n  return `\n  <defs>\n    <!-- Subtle scanlines for CRT effect -->\n    <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"2\" patternTransform=\"rotate(0)\">\n      <rect width=\"100%\" height=\"1\" fill=\"#000\" fill-opacity=\"0.04\" />\n    </pattern>\n    \n    <!-- Very subtle noise texture -->\n    <filter id=\"noise\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.8\" numOctaves=\"1\" stitchTiles=\"stitch\" result=\"noise\"/>\n      <feColorMatrix type=\"matrix\" values=\"0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.05 0\" result=\"coloredNoise\"/>\n      <feComposite operator=\"in\" in2=\"SourceGraphic\" in=\"coloredNoise\" result=\"monoNoise\"/>\n      <feBlend in=\"SourceGraphic\" in2=\"monoNoise\" mode=\"multiply\"/>\n    </filter>\n    \n    <!-- Window shadow -->\n    <filter id=\"window-shadow\">\n      <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"4\" flood-opacity=\"0.3\" flood-color=\"#000000\" />\n    </filter>\n    \n    <!-- Cursor glow -->\n    <filter id=\"cursor-glow\">\n      <feGaussianBlur stdDeviation=\"0.5\" />\n      <feComponentTransfer>\n        <feFuncA type=\"linear\" slope=\"5\" intercept=\"0\" />\n      </feComponentTransfer>\n      <feBlend in=\"SourceGraphic\" mode=\"screen\" />\n    </filter>\n  </defs>\n  \n  <style>\n    .terminal-font { font-family: \"Menlo\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; }\n    .cursor-blink { animation: blink 1.2s infinite steps(1); }\n    @keyframes blink { 0%, 49% { opacity: 1 } 50%, 100% { opacity: 0 } }\n  </style>`;\n};\n\n/**\n * Get appropriate color for a project mark\n */\nconst getMarkColor = (mark, theme) => {\n  if (mark >= 100) {\n    return theme.projectMark.high;\n  } else if (mark > 0) {\n    return theme.projectMark.passed;\n  } else {\n    return theme.projectMark.failed;\n  }\n};\n\n/**\n * Format a date in a readable format\n */\nconst formatDate = (dateString) => {\n  if (!dateString) return 'N/A';\n  \n  const date = new Date(dateString);\n  if (isNaN(date.getTime())) return 'N/A';\n  \n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\n\n/**\n * Generate terminal-style visualization for validated student projects\n */\n/**\n * Generate terminal-style visualization for validated student projects\n */\nexport function generateTerminalProjects(studentData, themeName = 'dark', options = {}) {\n  // Default configuration\n  const config = {\n    width: options.width || 800,\n    lineHeight: options.lineHeight || 26,\n    padding: options.padding || 20,\n    maxProjects: options.maxProjects || 50,\n    includePiscine: options.includePiscine || false\n  };\n\n  // Get username\n  const username = studentData.login || 'user';\n\n  // Get all projects that have a status of 'finished'\n  let projects = [];\n\n  // Define cursus name mapping\n  const CURSUS_NAMES = {\n    9: 'C Piscine',\n    21: '42 Cursus',\n    67: '42 Events'\n  };\n\n  // Check for projects directly in studentData or in projects_users array\n  if (studentData.projects_users && Array.isArray(studentData.projects_users)) {\n    console.log(`Processing ${studentData.projects_users.length} total projects`);\n    \n    // 1. First, extract all project data before filtering\n    const allProjects = studentData.projects_users.map(p => {\n      // Handle different project data structures\n      const projectName = p.project ? p.project.name : (p.project_name || 'Unknown Project');\n      \n      // Handle team information with safety checks\n      const teams = p.teams || [];\n      const firstTeam = teams.length > 0 ? teams[0] : null;\n      const teamUsers = firstTeam && firstTeam.users ? firstTeam.users : [];\n      const isTeam = teamUsers.length > 1;\n      \n      // More accurate cursus name determination\n      let cursusName = 'Other';\n      if (p.cursus_ids && p.cursus_ids.length > 0) {\n        const firstCursusId = p.cursus_ids[0];\n        cursusName = CURSUS_NAMES[firstCursusId] || `Cursus ${firstCursusId}`;\n      }\n      \n      return {\n        // Original project data (preserve for filtering)\n        original: p,\n        // Processed properties\n        name: projectName,\n        finalMark: p.final_mark,\n        status: p.status,\n        validated: p.validated === true || p[\"validated?\"] === true,\n        completionDate: p.marked_at || p.updated_at,\n        isTeam: isTeam,\n        teamSize: teamUsers.length || 1,\n        teamName: firstTeam ? firstTeam.name : null,\n        cursusIds: p.cursus_ids || [],\n        cursusName: cursusName\n      };\n    });\n    \n    console.log(`Mapped ${allProjects.length} projects`);\n    \n    // 2. Now apply filtering for COMPLETED projects only\n    projects = allProjects.filter(p => \n      // Filter for finished status\n      p.original.status === 'finished' && \n      // Check for validation\n      p.validated &&\n      // Include projects with a final mark (not null)\n      p.original.final_mark !== null\n    );\n    \n    console.log(`Found ${projects.length} COMPLETED projects after filtering`);\n    \n    // 3. Sort by completion date (newest first)\n    projects.sort((a, b) => {\n      if (!a.completionDate) return 1;\n      if (!b.completionDate) return -1;\n      return new Date(b.completionDate) - new Date(a.completionDate);\n    });\n    \n    // 4. Filter Piscine projects if not included\n    if (!config.includePiscine) {\n      const beforeCount = projects.length;\n      projects = projects.filter(p => p.cursusName !== 'C Piscine');\n      console.log(`Filtered out ${beforeCount - projects.length} Piscine projects`);\n    }\n    \n    // 5. Limit to max projects for display\n    if (projects.length > config.maxProjects) {\n      console.log(`Limiting display to ${config.maxProjects} projects (from ${projects.length})`);\n      projects = projects.slice(0, config.maxProjects);\n    }\n  }\n\n  // Handle no projects case\n  if (projects.length === 0) {\n    return generateErrorSVG('No completed projects found', themeName);\n  }\n\n  // Group projects by cursus\n  const projectsByCursus = {};\n  \n  projects.forEach(project => {\n    if (!projectsByCursus[project.cursusName]) {\n      projectsByCursus[project.cursusName] = [];\n    }\n    projectsByCursus[project.cursusName].push(project);\n  });\n  \n  // Sort cursus names to ensure consistent order (42 Cursus first, then others)\n  const orderedCursusNames = Object.keys(projectsByCursus).sort((a, b) => {\n    if (a === '42 Cursus') return -1;\n    if (b === '42 Cursus') return 1;\n    return a.localeCompare(b);\n  });\n\n  // Calculate layout dimensions\n  const headerHeight = 36;\n  const topBarHeight = 20;\n  const commandHeight = 32;\n  const tableHeaderHeight = 32;\n  const cursusHeadersHeight = Object.keys(projectsByCursus).length * config.lineHeight;\n  const projectsRowsHeight = projects.length * config.lineHeight;\n  const footerHeight = 50; // Increased footer height\n  \n  const calculatedHeight = headerHeight + topBarHeight + commandHeight + \n                          tableHeaderHeight + cursusHeadersHeight + \n                          projectsRowsHeight + footerHeight + 20;\n\n  // Get theme\n  const theme = THEMES[themeName] || THEMES.dark;\n\n  // Get total projects data\n  const totalProjects = projects.length;\n  const totalTeamProjects = projects.filter(p => p.isTeam).length;\n  const totalSoloProjects = totalProjects - totalTeamProjects;\n  const highestMark = Math.max(...projects.map(p => p.finalMark));\n  \n  // Start building SVG\n  let svg = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${config.width}\" height=\"${calculatedHeight}\" viewBox=\"0 0 ${config.width} ${calculatedHeight}\">\n  ${getSvgDefs(themeName)}\n  \n  <!-- Terminal window -->\n  <rect width=\"${config.width}\" height=\"${calculatedHeight}\" fill=\"${theme.windowBorder}\" rx=\"6\" ry=\"6\" filter=\"url(#window-shadow)\" />\n  <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${calculatedHeight - 2}\" fill=\"${theme.bg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Terminal header -->\n  <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${headerHeight}\" fill=\"${theme.headerBg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Traffic lights -->\n  <g transform=\"translate(20, ${headerHeight/2})\">\n    <circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n    <circle cx=\"20\" cy=\"0\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n    <circle cx=\"40\" cy=\"0\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n  </g>\n  \n  <!-- Title -->\n  <text x=\"${config.width / 2}\" y=\"${headerHeight/2 + 5}\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    ${escapeXml(username)}@42 — projects\n  </text>\n  \n  <!-- Command line -->\n  <g transform=\"translate(${config.padding}, ${headerHeight + topBarHeight + 20})\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">${escapeXml(username)}</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"8\" fill=\"${theme.commandText}\">ls -la ./projects | grep \"Completed\" </tspan>\n      <tspan class=\"cursor-blink\" fill=\"${theme.promptUser}\" filter=\"url(#cursor-glow)\">▋</tspan>\n    </text>\n  </g>`;\n\n  // Table header setup\n  const tableY = headerHeight + topBarHeight + commandHeight;\n  const colPadding = config.padding;\n  const projectColX = colPadding;\n  const typeColX = Math.floor(config.width * 0.45);\n  const dateColX = Math.floor(config.width * 0.60);\n  const markColX = Math.floor(config.width * 0.85);\n  \n  // Add table separator\n  svg += `<line x1=\"0\" y1=\"${tableY}\" x2=\"${config.width}\" y2=\"${tableY}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />`;\n  \n  // Table headers\n  svg += `\n  <g transform=\"translate(0, ${tableY + 22})\">\n    <text font-size=\"13\" font-weight=\"bold\" class=\"terminal-font\">\n      <tspan x=\"${projectColX}\" fill=\"${theme.tableHeader}\">PROJECT</tspan>\n      <tspan x=\"${typeColX}\" fill=\"${theme.tableHeader}\">TYPE</tspan>\n      <tspan x=\"${dateColX}\" fill=\"${theme.tableHeader}\">DATE</tspan>\n      <tspan x=\"${markColX}\" fill=\"${theme.tableHeader}\">MARK</tspan>\n    </text>\n  </g>\n  <line x1=\"0\" y1=\"${tableY + tableHeaderHeight - 5}\" x2=\"${config.width}\" y2=\"${tableY + tableHeaderHeight - 5}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />`;\n\n  // Add projects grouped by cursus\n  let rowY = tableY + tableHeaderHeight;\n\n  // Process each cursus group in order\n  orderedCursusNames.forEach(cursusName => {\n    const cursusProjects = projectsByCursus[cursusName];\n    \n    // Add cursus header with terminal-style comment\n    svg += `\n    <g transform=\"translate(0, ${rowY + config.lineHeight/2 + 4})\">\n      <text font-size=\"14\" class=\"terminal-font\">\n        <tspan x=\"${projectColX}\" fill=\"${theme.skillCursus}\">/* ${escapeXml(cursusName)} */</tspan>\n      </text>\n    </g>\n    <line x1=\"${colPadding}\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width - colPadding}\" y2=\"${rowY + config.lineHeight}\" \n          stroke=\"${theme.tableBorder}\" stroke-width=\"1\" stroke-dasharray=\"2,1\" opacity=\"0.5\" />`;\n    \n    rowY += config.lineHeight;\n    \n    // Add projects for this cursus\n    cursusProjects.forEach(project => {\n      // Get mark color based on score\n      const markColor = getMarkColor(project.finalMark, theme);\n      \n      // Format date\n      const formattedDate = formatDate(project.completionDate);\n      \n      // Team or solo indicator and color\n      const teamTypeText = project.isTeam ? `[TEAM:${project.teamSize}]` : '[SOLO]';\n      const teamColor = project.isTeam ? theme.teamBadge : theme.soloBadge;\n      \n      // Add project row\n      const projectRowY = rowY + config.lineHeight/2 + 4;\n      \n      svg += `\n      <g transform=\"translate(0, ${projectRowY})\">\n        <text font-size=\"13\" class=\"terminal-font\">\n          <tspan x=\"${projectColX}\" fill=\"${theme.projectName}\">${escapeXml(project.name)}</tspan>\n          <tspan x=\"${typeColX}\" fill=\"${teamColor}\">${teamTypeText}</tspan>\n          <tspan x=\"${dateColX}\" fill=\"${theme.dateText}\">${formattedDate}</tspan>\n          <tspan x=\"${markColX}\" fill=\"${markColor}\">${project.finalMark}/100</tspan>\n        </text>\n      </g>`;\n      \n      // Add separator between projects\n      if (cursusProjects.indexOf(project) < cursusProjects.length - 1) {\n        svg += `<line x1=\"0\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width}\" y2=\"${rowY + config.lineHeight}\" \n              stroke=\"${theme.tableBorder}\" stroke-width=\"1\" opacity=\"0.15\" />`;\n      }\n      \n      rowY += config.lineHeight;\n    });\n    \n    // Add stronger line between cursus sections\n    svg += `<line x1=\"0\" y1=\"${rowY}\" x2=\"${config.width}\" y2=\"${rowY}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />`;\n  });\n\n  // Footer with authentic terminal finish - enhanced version\n  svg += `\n  <g transform=\"translate(${colPadding}, ${calculatedHeight - 40})\">\n    <text font-size=\"13\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">${username}</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"5\" fill=\"${theme.commandText}\">echo $?</tspan>\n    </text>\n  </g>\n  \n  <g transform=\"translate(${colPadding}, ${calculatedHeight - 15})\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.commandText}\">0</tspan>\n    </text>\n  </g>\n`;\n  return svg;\n}\n\n/**\n * Generate terminal error message with authentic terminal styling\n */\nexport function generateErrorSVG(message, themeName = 'dark') {\n  const errorWidth = 500;\n  const errorHeight = 200;\n  const theme = THEMES[themeName] || THEMES.dark;\n\n  return `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${errorWidth}\" height=\"${errorHeight}\" viewBox=\"0 0 ${errorWidth} ${errorHeight}\">\n  <defs>\n    <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"2\" patternTransform=\"rotate(0)\">\n      <rect width=\"100%\" height=\"1\" fill=\"#000\" fill-opacity=\"0.04\" />\n    </pattern>\n    \n    <filter id=\"window-shadow\">\n      <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"4\" flood-opacity=\"0.3\" flood-color=\"#000000\" />\n    </filter>\n    \n    <filter id=\"noise\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.8\" numOctaves=\"1\" stitchTiles=\"stitch\" result=\"noise\"/>\n      <feColorMatrix type=\"matrix\" values=\"0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.05 0\" result=\"coloredNoise\"/>\n      <feComposite operator=\"in\" in2=\"SourceGraphic\" in=\"coloredNoise\" result=\"monoNoise\"/>\n      <feBlend in=\"SourceGraphic\" in2=\"monoNoise\" mode=\"multiply\"/>\n    </filter>\n  </defs>\n\n  <style>\n    .terminal-font { font-family: \"Menlo\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; }\n    @keyframes blink { 0%, 100% { opacity: 0; } 50% { opacity: 1; } }\n    .cursor { animation: blink 1.2s infinite; }\n  </style>\n  \n  <!-- Terminal window -->\n  <rect width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"${theme.windowBorder}\" rx=\"6\" ry=\"6\" filter=\"url(#window-shadow)\" />\n  <rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"${errorHeight - 2}\" fill=\"${theme.bg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Terminal header -->\n  <rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"36\" fill=\"${theme.headerBg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Traffic lights -->\n  <circle cx=\"20\" cy=\"18\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n  <circle cx=\"40\" cy=\"18\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n  <circle cx=\"60\" cy=\"18\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n  \n  <text x=\"${errorWidth / 2}\" y=\"22\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    error — bash\n  </text>\n  \n  <!-- Command prompt -->\n  <text x=\"15\" y=\"60\" font-size=\"14\" class=\"terminal-font\">\n    <tspan fill=\"${theme.promptUser}\">user</tspan>\n    <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n    <tspan fill=\"${theme.promptPath}\">~$</tspan>\n    <tspan dx=\"8\" fill=\"${theme.commandText}\">projects --validated</tspan>\n    <tspan class=\"cursor\" dx=\"4\">|</tspan>\n  </text>\n  \n  <!-- Error message -->\n  <rect x=\"15\" y=\"75\" width=\"${errorWidth - 30}\" height=\"50\" rx=\"0\" ry=\"0\" \n        fill=\"${themeName === 'dark' ? 'rgba(255, 123, 114, 0.1)' : 'rgba(207, 34, 46, 0.1)'}\" \n        stroke=\"${theme.errorText}\" stroke-width=\"1\" stroke-opacity=\"0.3\" />\n  \n  <text x=\"25\" y=\"105\" font-size=\"14\" fill=\"${theme.errorText}\" class=\"terminal-font\">\n    <tspan>error: ${escapeXml(message)}</tspan>\n  </text>\n  \n  <!-- Return code -->\n  <text x=\"15\" y=\"150\" font-size=\"14\" class=\"terminal-font\">\n    <tspan fill=\"${theme.promptUser}\">user</tspan>\n    <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n    <tspan fill=\"${theme.promptPath}\">~$</tspan>\n    <tspan dx=\"8\" fill=\"${theme.commandText}\">echo $?</tspan>\n  </text>\n  \n  <text x=\"15\" y=\"175\" font-size=\"14\" fill=\"${theme.commandText}\" class=\"terminal-font\">\n    <tspan>1</tspan>\n  </text>\n  \n  <!-- Terminal effects -->\n  <rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"${errorHeight - 2}\" rx=\"5\" ry=\"5\" fill=\"url(#scanlines)\" fill-opacity=\"0.5\" />\n  <rect x=\"0\" y=\"0\" width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"transparent\" filter=\"url(#noise)\" rx=\"6\" ry=\"6\" opacity=\"0.2\" />\n</svg>`;\n}\n\nexport default {\n  generateTerminalProjects,\n  generateErrorSVG\n};"
    },
    {
      "path": "lib/generators/terminalSkillsGenerator.js",
      "content": "/**\n * Enhanced and Optimized Terminal Skills Visualization\n */\n\n// Helper to escape XML special characters\nconst escapeXml = (unsafe) => unsafe?.replace(/[<>&'\"]/g, c => \n  ({\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    \"'\": '&apos;',\n    '\"': '&quot;'\n  }[c])) || '';\n\n// Theme configurations - more authentic terminal colors\nconst THEMES = {\n  dark: {\n    bg: '#0D1117',\n    windowBorder: '#000000',\n    headerBg: '#161B22',\n    titleText: '#C9D1D9',\n    topBarBg: '#161B22',\n    promptUser: '#39D353',\n    promptHost: '#58A6FF',\n    promptPath: '#58A6FF',\n    commandText: '#C9D1D9',\n    tableBorder: '#30363D',\n    tableHeader: '#FF7B72',\n    skillName: '#79C0FF',\n    levelHigh: '#39D353',\n    levelMedium: '#FFCA28',\n    levelLow: '#8B949E',\n    skillCursus: '#7D8590',\n    footerText: '#7D8590',\n    errorText: '#FF7B72',\n    gradientStart: '#0D1117',\n    gradientEnd: '#0D1117'\n  },\n  light: {\n    bg: '#F6F8FA',\n    windowBorder: '#D0D7DE',\n    headerBg: '#F6F8FA',\n    titleText: '#24292F',\n    topBarBg: '#F6F8FA',\n    promptUser: '#0969DA',\n    promptHost: '#8250DF',\n    promptPath: '#0969DA',\n    commandText: '#24292F',\n    tableBorder: '#D0D7DE',\n    tableHeader: '#CF222E',\n    skillName: '#0969DA',\n    levelHigh: '#1A7F37',\n    levelMedium: '#9A6700',\n    levelLow: '#57606A',\n    skillCursus: '#57606A',\n    footerText: '#57606A',\n    errorText: '#CF222E',\n    gradientStart: '#F6F8FA',\n    gradientEnd: '#F6F8FA'\n  }\n};\n\n// Reusable SVG definitions for a more authentic terminal look\nconst getSvgDefs = (themeName) => {\n  const theme = THEMES[themeName] || THEMES.dark;\n  return `\n  <defs>\n    <!-- Subtle scanlines for CRT effect -->\n    <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"2\" patternTransform=\"rotate(0)\">\n      <rect width=\"100%\" height=\"1\" fill=\"#000\" fill-opacity=\"0.04\" />\n    </pattern>\n    \n    <!-- Very subtle noise texture -->\n    <filter id=\"noise\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.8\" numOctaves=\"1\" stitchTiles=\"stitch\" result=\"noise\"/>\n      <feColorMatrix type=\"matrix\" values=\"0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.05 0\" result=\"coloredNoise\"/>\n      <feComposite operator=\"in\" in2=\"SourceGraphic\" in=\"coloredNoise\" result=\"monoNoise\"/>\n      <feBlend in=\"SourceGraphic\" in2=\"monoNoise\" mode=\"multiply\"/>\n    </filter>\n    \n    <!-- Sharp shadow for terminal window -->\n    <filter id=\"window-shadow\">\n      <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"4\" flood-opacity=\"0.3\" flood-color=\"#000000\" />\n    </filter>\n    \n    <!-- Glow effect for cursor -->\n    <filter id=\"cursor-glow\">\n      <feGaussianBlur stdDeviation=\"0.5\" />\n      <feComponentTransfer>\n        <feFuncA type=\"linear\" slope=\"5\" intercept=\"0\" />\n      </feComponentTransfer>\n      <feBlend in=\"SourceGraphic\" mode=\"screen\" />\n    </filter>\n  </defs>\n  \n  <style>\n    .terminal-font { font-family: \"Menlo\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; }\n    .cursor-blink { animation: blink 1.2s infinite steps(1); }\n    @keyframes blink { 0%, 49% { opacity: 1 } 50%, 100% { opacity: 0 } }\n  </style>`;\n};\n\n/**\n * Generate terminal-style visualization for student skills\n */\nexport function generateTerminalSkills(studentData, themeName = 'dark', options = {}) {\n  // Default configuration\n  const config = {\n    width: options.width || 800,\n    maxSkills: options.maxSkills || 100,\n    lineHeight: options.lineHeight || 26,\n    padding: options.padding || 20,\n    ...options\n  };\n\n  // Extract and prepare skills data\n  let allSkills = [];\n  Object.entries(studentData.skills || {}).forEach(([cursusName, cursusSkills]) => {\n    allSkills = [...allSkills, ...cursusSkills.map(skill => ({ ...skill, cursus: cursusName }))];\n  });\n\n  // Handle empty data case\n  if (allSkills.length === 0) {\n    return generateErrorSVG('No skills data available', themeName);\n  }\n\n  // Sort and organize skills by cursus\n  const sortedSkills = allSkills.sort((a, b) => b.level - a.level).slice(0, config.maxSkills);\n  \n  // Group skills by cursus\n  const skillsByCursus = {};\n  sortedSkills.forEach(skill => {\n    if (!skillsByCursus[skill.cursus]) skillsByCursus[skill.cursus] = [];\n    skillsByCursus[skill.cursus].push(skill);\n  });\n  \n  // Ensure Piscine comes first, followed by other cursus\n  const orderedCursusNames = Object.keys(skillsByCursus).sort((a, b) => {\n    if (a.toLowerCase().includes('piscine')) return -1;\n    if (b.toLowerCase().includes('piscine')) return 1;\n    return a.localeCompare(b);\n  });\n\n  // Calculate layout\n  const headerHeight = 36;\n  const topBarHeight = 20;\n  const commandHeight = 32;\n  const tableHeaderHeight = 32;\n  const cursusHeadersHeight = orderedCursusNames.length * config.lineHeight;\n  const skillsRowsHeight = sortedSkills.length * config.lineHeight;\n  const footerHeight = 36;\n  \n  const calculatedHeight = headerHeight + topBarHeight + commandHeight + \n                          tableHeaderHeight + cursusHeadersHeight + \n                          skillsRowsHeight + footerHeight;\n\n  // Get theme\n  const theme = THEMES[themeName] || THEMES.dark;\n  \n  // Get username\n  const username = studentData.login || 'user';\n\n  // Start building SVG\n  let svg = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${config.width}\" height=\"${calculatedHeight}\" viewBox=\"0 0 ${config.width} ${calculatedHeight}\">\n  ${getSvgDefs(themeName)}\n  \n  <!-- Terminal window -->\n  <rect width=\"${config.width}\" height=\"${calculatedHeight}\" fill=\"${theme.windowBorder}\" rx=\"6\" ry=\"6\" filter=\"url(#window-shadow)\" />\n  <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${calculatedHeight - 2}\" fill=\"${theme.bg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Terminal header -->\n  <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${headerHeight}\" fill=\"${theme.headerBg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Traffic lights -->\n  <g transform=\"translate(20, ${headerHeight/2})\">\n    <circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n    <circle cx=\"20\" cy=\"0\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n    <circle cx=\"40\" cy=\"0\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n  </g>\n  \n  <!-- Title -->\n  <text x=\"${config.width / 2}\" y=\"${headerHeight/2 + 5}\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    ${escapeXml(username)}@42 — skills\n  </text>\n  \n  <!-- Command line -->\n  <g transform=\"translate(${config.padding}, ${headerHeight + topBarHeight + 20})\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">${escapeXml(username)}</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"8\" fill=\"${theme.commandText}\">ls -la ./skills </tspan>\n      <tspan class=\"cursor-blink\" fill=\"${theme.promptUser}\" filter=\"url(#cursor-glow)\">▋</tspan>\n    </text>\n  </g>`;\n\n  // Table header setup\n  const tableY = headerHeight + topBarHeight + commandHeight;\n  const colPadding = config.padding;\n  const skillColX = colPadding;\n  const levelColX = config.width * 0.65;\n  \n  // Add table separator - use sharp straight line for authentic terminal look\n  svg += `<line x1=\"0\" y1=\"${tableY}\" x2=\"${config.width}\" y2=\"${tableY}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />`;\n  \n  // Table headers\n  svg += `\n  <g transform=\"translate(0, ${tableY + 22})\">\n    <text font-size=\"13\" font-weight=\"bold\" class=\"terminal-font\">\n      <tspan x=\"${skillColX}\" fill=\"${theme.tableHeader}\">SKILL</tspan>\n      <tspan x=\"${levelColX}\" fill=\"${theme.tableHeader}\">LEVEL</tspan>\n    </text>\n  </g>\n  <line x1=\"0\" y1=\"${tableY + tableHeaderHeight - 5}\" x2=\"${config.width}\" y2=\"${tableY + tableHeaderHeight - 5}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />`;\n\n  // Add skills grouped by cursus (with Piscine first)\n  let rowY = tableY + tableHeaderHeight;\n\n  // Process each cursus group in the ordered list\n  orderedCursusNames.forEach(cursusName => {\n    const cursusSkills = skillsByCursus[cursusName];\n    \n    // Add cursus header with terminal-style comment\n    svg += `\n    <g transform=\"translate(0, ${rowY + config.lineHeight/2 + 4})\">\n      <text font-size=\"14\" class=\"terminal-font\">\n        <tspan x=\"${skillColX}\" fill=\"${theme.skillCursus}\">/* ${escapeXml(cursusName)} */</tspan>\n      </text>\n    </g>\n    <line x1=\"${colPadding}\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width - colPadding}\" y2=\"${rowY + config.lineHeight}\" \n          stroke=\"${theme.tableBorder}\" stroke-width=\"1\" stroke-dasharray=\"2,1\" opacity=\"0.5\" />`;\n    \n    rowY += config.lineHeight;\n    \n    // Add skills for this cursus\n    cursusSkills.forEach(skill => {\n      // Determine level color based on proficiency\n      let levelColor = theme.levelLow;\n      if (skill.level >= 10) {\n        levelColor = theme.levelHigh;\n      } else if (skill.level >= 6) {\n        levelColor = theme.levelMedium;\n      }\n      \n      // Add skill row\n      const skillRowY = rowY + config.lineHeight/2 + 4;\n      \n      svg += `\n      <g transform=\"translate(0, ${skillRowY})\">\n        <text font-size=\"13\" class=\"terminal-font\">\n          <tspan x=\"${skillColX}\" fill=\"${theme.skillName}\">${escapeXml(skill.name)}</tspan>\n          <tspan x=\"${levelColX}\" fill=\"${levelColor}\">${skill.level.toFixed(2)}</tspan>\n        </text>\n      </g>`;\n      \n      // Only add thin separator between skills (no rounded corners for more terminal-like appearance)\n      if (cursusSkills.indexOf(skill) < cursusSkills.length - 1) {\n        svg += `<line x1=\"0\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width}\" y2=\"${rowY + config.lineHeight}\" \n              stroke=\"${theme.tableBorder}\" stroke-width=\"1\" opacity=\"0.15\" />`;\n      }\n      \n      rowY += config.lineHeight;\n    });\n    \n    // Add stronger line between cursus sections\n    svg += `<line x1=\"0\" y1=\"${rowY}\" x2=\"${config.width}\" y2=\"${rowY}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />`;\n  });\n\n  // Footer with authentic terminal finish\n  svg += `\n  <g transform=\"translate(${colPadding}, ${calculatedHeight - 20})\">\n    <text font-size=\"11\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">${username}</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"5\" fill=\"${theme.commandText}\">echo $?</tspan>\n    </text>\n  </g>\n  \n  <g transform=\"translate(${colPadding}, ${calculatedHeight - 5})\">\n    <text font-size=\"11\" class=\"terminal-font\">\n      <tspan fill=\"${theme.commandText}\">0</tspan>\n    </text>\n  </g>\n  \n  <!-- Subtle terminal effects for realism -->\n  <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${calculatedHeight - 2}\" rx=\"5\" ry=\"5\" fill=\"url(#scanlines)\" fill-opacity=\"0.5\" />\n  <rect x=\"0\" y=\"0\" width=\"${config.width}\" height=\"${calculatedHeight}\" fill=\"transparent\" filter=\"url(#noise)\" rx=\"6\" ry=\"6\" opacity=\"0.2\" />\n</svg>`;\n\n  return svg;\n}\n\n/**\n * Generate terminal error message with authentic terminal styling\n */\nexport function generateErrorSVG(message, themeName = 'dark') {\n  const errorWidth = 500;\n  const errorHeight = 200;\n  const theme = THEMES[themeName] || THEMES.dark;\n\n  return `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${errorWidth}\" height=\"${errorHeight}\" viewBox=\"0 0 ${errorWidth} ${errorHeight}\">\n  <defs>\n    <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"2\" patternTransform=\"rotate(0)\">\n      <rect width=\"100%\" height=\"1\" fill=\"#000\" fill-opacity=\"0.04\" />\n    </pattern>\n    \n    <filter id=\"window-shadow\">\n      <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"4\" flood-opacity=\"0.3\" flood-color=\"#000000\" />\n    </filter>\n    \n    <filter id=\"noise\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.8\" numOctaves=\"1\" stitchTiles=\"stitch\" result=\"noise\"/>\n      <feColorMatrix type=\"matrix\" values=\"0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.05 0\" result=\"coloredNoise\"/>\n      <feComposite operator=\"in\" in2=\"SourceGraphic\" in=\"coloredNoise\" result=\"monoNoise\"/>\n      <feBlend in=\"SourceGraphic\" in2=\"monoNoise\" mode=\"multiply\"/>\n    </filter>\n  </defs>\n\n  <style>\n    .terminal-font { font-family: \"Menlo\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; }\n    @keyframes blink { 0%, 100% { opacity: 0; } 50% { opacity: 1; } }\n    .cursor { animation: blink 1.2s infinite; }\n  </style>\n  \n  <!-- Terminal window -->\n  <rect width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"${theme.windowBorder}\" rx=\"6\" ry=\"6\" filter=\"url(#window-shadow)\" />\n  <rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"${errorHeight - 2}\" fill=\"${theme.bg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Terminal header -->\n  <rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"36\" fill=\"${theme.headerBg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Traffic lights -->\n  <circle cx=\"20\" cy=\"18\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n  <circle cx=\"40\" cy=\"18\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n  <circle cx=\"60\" cy=\"18\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n  \n  <text x=\"${errorWidth / 2}\" y=\"22\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    error — bash\n  </text>\n  \n  <!-- Command prompt -->\n  <text x=\"15\" y=\"60\" font-size=\"14\" class=\"terminal-font\">\n    <tspan fill=\"${theme.promptUser}\">user</tspan>\n    <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n    <tspan fill=\"${theme.promptPath}\">~$</tspan>\n    <tspan dx=\"8\" fill=\"${theme.commandText}\">skills --user</tspan>\n    <tspan class=\"cursor\" dx=\"4\">|</tspan>\n  </text>\n  \n  <!-- Error message -->\n  <rect x=\"15\" y=\"75\" width=\"${errorWidth - 30}\" height=\"50\" rx=\"0\" ry=\"0\" \n        fill=\"${themeName === 'dark' ? 'rgba(255, 123, 114, 0.1)' : 'rgba(207, 34, 46, 0.1)'}\" \n        stroke=\"${theme.errorText}\" stroke-width=\"1\" stroke-opacity=\"0.3\" />\n  \n  <text x=\"25\" y=\"105\" font-size=\"14\" fill=\"${theme.errorText}\" class=\"terminal-font\">\n    <tspan>error: ${escapeXml(message)}</tspan>\n  </text>\n  \n  <!-- Return code -->\n  <text x=\"15\" y=\"150\" font-size=\"14\" class=\"terminal-font\">\n    <tspan fill=\"${theme.promptUser}\">user</tspan>\n    <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n    <tspan fill=\"${theme.promptPath}\">~$</tspan>\n    <tspan dx=\"8\" fill=\"${theme.commandText}\">echo $?</tspan>\n  </text>\n  \n  <text x=\"15\" y=\"175\" font-size=\"14\" fill=\"${theme.commandText}\" class=\"terminal-font\">\n    <tspan>1</tspan>\n  </text>\n  \n  <!-- Terminal effects -->\n  <rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"${errorHeight - 2}\" rx=\"5\" ry=\"5\" fill=\"url(#scanlines)\" fill-opacity=\"0.5\" />\n  <rect x=\"0\" y=\"0\" width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"transparent\" filter=\"url(#noise)\" rx=\"6\" ry=\"6\" opacity=\"0.2\" />\n</svg>`;\n}\n\nexport default {\n  generateTerminalSkills,\n  generateErrorSVG\n};"
    },
    {
      "path": "lib/generators/terminalStudentGenerator.js",
      "content": "/**\n * Terminal Student Generator with Level Display\n * Modified to correctly display the user's 42 level\n */\n\n// Helper to escape XML special characters\nconst escapeXml = (unsafe) =>\n  unsafe?.replace(\n    /[<>&'\\\"]/g,\n    (c) =>\n      ({ \"<\": \"&lt;\", \">\": \"&gt;\", \"&\": \"&amp;\", \"'\": \"&apos;\", '\"': \"&quot;\" }[\n        c\n      ])\n  ) || \"\";\n\n// Terminal theme colors\nconst THEMES = {\n  dark: {\n    bg: \"#0D1117\",\n    windowBorder: \"#000000\",\n    headerBg: \"#161B22\",\n    titleText: \"#C9D1D9\",\n    promptUser: \"#39D353\",\n    promptHost: \"#58A6FF\",\n    promptPath: \"#58A6FF\",\n    commandText: \"#C9D1D9\",\n    tableBorder: \"#30363D\",\n    tableHeader: \"#FF7B72\",\n    labelText: \"#8B949E\",\n    valueText: \"#79C0FF\",\n    valueHighlight: \"#39D353\",\n    valueWarning: \"#FFCA28\",\n    valueError: \"#F85149\",\n    levelHigh: \"#39D353\",\n    levelMedium: \"#FFCA28\",\n    levelLow: \"#8B949E\",\n    sectionTitle: \"#7D8590\",\n    coalitionColor: {\n      Default: \"#58A6FF\",\n      \"The Alliance\": \"#00BABC\",\n      \"The Assembly\": \"#FF6950\",\n      \"The Order\": \"#9736E8\",\n      \"The Federation\": \"#FFCD42\",\n      Commodore: \"#39D353\",\n      Freax: \"#FFCA28\",\n      Bios: \"#00BABC\",\n    },\n  },\n  light: {\n    bg: \"#F6F8FA\",\n    windowBorder: \"#D0D7DE\",\n    headerBg: \"#F6F8FA\",\n    titleText: \"#24292F\",\n    promptUser: \"#0969DA\",\n    promptHost: \"#8250DF\",\n    promptPath: \"#0969DA\",\n    commandText: \"#24292F\",\n    tableBorder: \"#D0D7DE\",\n    tableHeader: \"#CF222E\",\n    labelText: \"#57606A\",\n    valueText: \"#0969DA\",\n    valueHighlight: \"#1A7F37\",\n    valueWarning: \"#9A6700\",\n    valueError: \"#CF222E\",\n    levelHigh: \"#1A7F37\",\n    levelMedium: \"#9A6700\",\n    levelLow: \"#57606A\",\n    sectionTitle: \"#57606A\",\n    coalitionColor: {\n      Default: \"#0969DA\",\n      \"The Alliance\": \"#1F9598\",\n      \"The Assembly\": \"#CF222E\",\n      \"The Order\": \"#8250DF\",\n      \"The Federation\": \"#9A6700\",\n      Commodore: \"#1A7F37\",\n      Freax: \"#9A6700\",\n      Bios: \"#1F9598\",\n    },\n  },\n};\n\n// SVG definitions for terminal styling\nconst getSvgDefs = (themeName) => {\n  const theme = THEMES[themeName] || THEMES.dark;\n  return `\n  <defs>\n    <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"2\" patternTransform=\"rotate(0)\">\n      <rect width=\"100%\" height=\"1\" fill=\"#000\" fill-opacity=\"0.04\" />\n    </pattern>\n    <filter id=\"noise\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.8\" numOctaves=\"1\" stitchTiles=\"stitch\" result=\"noise\"/>\n      <feColorMatrix type=\"matrix\" values=\"0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.05 0\" result=\"coloredNoise\"/>\n      <feComposite operator=\"in\" in2=\"SourceGraphic\" in=\"coloredNoise\" result=\"monoNoise\"/>\n      <feBlend in=\"SourceGraphic\" in2=\"monoNoise\" mode=\"multiply\"/>\n    </filter>\n    <filter id=\"window-shadow\">\n      <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"4\" flood-opacity=\"0.3\" flood-color=\"#000000\" />\n    </filter>\n    <filter id=\"cursor-glow\">\n      <feGaussianBlur stdDeviation=\"0.5\" />\n      <feComponentTransfer>\n        <feFuncA type=\"linear\" slope=\"5\" intercept=\"0\" />\n      </feComponentTransfer>\n      <feBlend in=\"SourceGraphic\" mode=\"screen\" />\n    </filter>\n  </defs>\n  \n  <style>\n    .terminal-font { font-family: \"Menlo\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; }\n    .cursor-blink { animation: blink 1.2s infinite steps(1); }\n    @keyframes blink { 0%, 49% { opacity: 1 } 50%, 100% { opacity: 0 } }\n  </style>`;\n};\n\n/**\n * Format a date to readable format\n */\nconst formatDate = (dateString) => {\n  if (!dateString) return \"N/A\";\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return \"N/A\";\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  } catch (error) {\n    return \"N/A\";\n  }\n};\n\n/**\n * Calculate student stats\n */\nconst calculateStudentStats = (studentData) => {\n  // Extract basic stats\n  const userData = studentData.basic_info || studentData;\n\n  const stats = {\n    totalProjects: 0,\n    completedProjects: 0,\n    failedProjects: 0,\n    inProgressProjects: 0,\n    averageMark: 0,\n    highestMark: 0,\n    correctionPoints: userData.correction_point || 0,\n    wallet: userData.wallet || 0,\n    totalSkills: 0,\n    skillsAverage: 0,\n    accountAge: 0,\n    level: 0,\n  };\n\n  // PRIORITY 1: Check for directly injected level value first (most reliable)\n  if (\n    studentData.directLevelValue &&\n    typeof studentData.directLevelValue === \"number\"\n  ) {\n    stats.level = studentData.directLevelValue;\n    console.log(`Using directLevelValue: ${stats.level}`);\n  }\n  // PRIORITY 2: Check cursus_users data\n  else if (\n    studentData.cursus_users &&\n    Array.isArray(studentData.cursus_users)\n  ) {\n    // Log all cursus data for debugging\n    console.log(\n      `${studentData.login} - Available cursus:`,\n      studentData.cursus_users.map(\n        (c) =>\n          `${c.cursus?.name || \"Unknown\"} (${c.cursus?.id || \"Unknown\"}): ${\n            c.level\n          }`\n      )\n    );\n\n    // Try to find 42cursus (exact match)\n    const mainCursus = studentData.cursus_users.find(\n      (c) => c.cursus?.name === \"42cursus\"\n    );\n\n    if (mainCursus && typeof mainCursus.level === \"number\") {\n      stats.level = mainCursus.level;\n      console.log(`Using 42cursus level: ${stats.level}`);\n    }\n    // Try with variant spelling\n    else {\n      const altCursus = studentData.cursus_users.find(\n        (c) =>\n          c.cursus?.name === \"42 Cursus\" ||\n          c.cursus?.name === \"42 cursus\" ||\n          c.cursus?.name?.toLowerCase().includes(\"42\")\n      );\n\n      if (altCursus && typeof altCursus.level === \"number\") {\n        stats.level = altCursus.level;\n        console.log(`Using alt cursus level: ${stats.level}`);\n      }\n      // Try by ID (21 = main curriculum)\n      else {\n        const cursusById = studentData.cursus_users.find(\n          (c) => c.cursus?.id === 21\n        );\n\n        if (cursusById && typeof cursusById.level === \"number\") {\n          stats.level = cursusById.level;\n          console.log(`Using cursus ID 21 level: ${stats.level}`);\n        }\n        // Fallback: highest level from any cursus\n        else if (studentData.cursus_users.length > 0) {\n          // Sort by level descending\n          const sortedByLevel = [...studentData.cursus_users].sort(\n            (a, b) => (b.level || 0) - (a.level || 0)\n          );\n\n          stats.level = sortedByLevel[0].level || 0;\n          console.log(\n            `Using highest level: ${stats.level} from ${\n              sortedByLevel[0].cursus?.name || \"Unknown\"\n            }`\n          );\n        }\n      }\n    }\n  }\n\n  // Process projects\n  if (studentData.projects_users && Array.isArray(studentData.projects_users)) {\n    // Get non-piscine projects\n    const nonPiscineProjects = studentData.projects_users.filter((p) => {\n      if (!p.cursus_ids || !Array.isArray(p.cursus_ids)) return true;\n      return !p.cursus_ids.includes(9);\n    });\n\n    // Count projects by status\n    const completedProjects = nonPiscineProjects.filter(\n      (p) =>\n        p.status === \"finished\" &&\n        (p.validated === true || p[\"validated?\"] === true) &&\n        p.final_mark !== null\n    );\n\n    const failedProjects = nonPiscineProjects.filter(\n      (p) =>\n        p.status === \"finished\" &&\n        (p.validated === false || p[\"validated?\"] === false)\n    );\n\n    const inProgressProjects = nonPiscineProjects.filter(\n      (p) => p.status === \"in_progress\"\n    );\n\n    // Set project counts\n    stats.completedProjects = completedProjects.length;\n    stats.failedProjects = failedProjects.length;\n    stats.inProgressProjects = inProgressProjects.length;\n    stats.totalProjects = nonPiscineProjects.length;\n\n    // Calculate marks for completed projects\n    if (completedProjects.length > 0) {\n      const marks = completedProjects\n        .map((p) => p.final_mark || 0)\n        .filter((m) => m > 0);\n\n      stats.highestMark = Math.max(...marks, 0);\n      stats.averageMark =\n        marks.length > 0\n          ? Math.round((marks.reduce((a, b) => a + b, 0) / marks.length) * 10) /\n            10\n          : 0;\n    }\n  }\n\n  // Process skills\n  let allSkills = [];\n\n  // From nested skills structure\n  if (studentData.skills && typeof studentData.skills === \"object\") {\n    Object.values(studentData.skills).forEach((skillsArray) => {\n      if (Array.isArray(skillsArray)) {\n        allSkills.push(...skillsArray);\n      }\n    });\n  }\n\n  // From cursus_users\n  if (studentData.cursus_users && Array.isArray(studentData.cursus_users)) {\n    for (const cursus of studentData.cursus_users) {\n      if (cursus.skills && Array.isArray(cursus.skills)) {\n        allSkills.push(...cursus.skills);\n      }\n    }\n  }\n\n  // Count unique skills\n  const uniqueSkillIds = new Set();\n  allSkills.forEach((skill) => {\n    if (skill.id) uniqueSkillIds.add(skill.id);\n    else if (skill.name) uniqueSkillIds.add(skill.name);\n  });\n\n  stats.totalSkills = uniqueSkillIds.size;\n\n  if (allSkills.length > 0) {\n    stats.skillsAverage =\n      Math.round(\n        (allSkills.reduce((sum, skill) => sum + (skill.level || 0), 0) /\n          allSkills.length) *\n          100\n      ) / 100;\n  }\n\n  // Calculate account age\n  const createdAt = userData.created_at || userData.createdAt;\n  if (createdAt) {\n    const createdDate = new Date(createdAt);\n    const now = new Date();\n    stats.accountAge = Math.floor((now - createdDate) / (1000 * 60 * 60 * 24));\n  }\n\n  // Final check - if level is still 0, try to extract from studentData.level\n  if (stats.level === 0 && typeof studentData.level === \"number\") {\n    stats.level = studentData.level;\n  }\n\n  console.log(`Final level for ${userData.login}: ${stats.level}`);\n  return stats;\n};\n\n/**\n * Get coalition information\n */\nconst getCoalitionData = (studentData) => {\n  // Direct coalition property\n  if (studentData.coalition) {\n    return studentData.coalition;\n  }\n\n  // Coalitions array\n  if (\n    studentData.coalitions &&\n    Array.isArray(studentData.coalitions) &&\n    studentData.coalitions.length > 0\n  ) {\n    return studentData.coalitions[0];\n  }\n\n  return null;\n};\n\n/**\n * Generate terminal-style visualization for student information\n */\nexport function generateTerminalStudent(\n  studentData,\n  themeName = \"dark\",\n  options = {}\n) {\n  console.log(\n    `Generating terminal student widget for: ${studentData.login || \"Unknown\"}`\n  );\n\n  // Default configuration\n  const config = {\n    width: options.width || 800,\n    lineHeight: 30,\n    padding: options.padding || 40,\n    ...options,\n  };\n\n  // Extract user data\n  const userData = studentData.basic_info || studentData;\n  const username = userData.login || \"user\";\n  const displayName =\n    userData.displayname ||\n    userData.displayName ||\n    userData.usual_full_name ||\n    username;\n\n  // Calculate stats and get coalition\n  const stats = calculateStudentStats(studentData);\n  const coalition = getCoalitionData(studentData);\n  const coalitionName = coalition?.name || \"Default\";\n\n  // Calculate layout dimensions - preserving original dimensions\n  const headerHeight = 36;\n  const topBarHeight = 20;\n  const commandHeight = 50;\n  const basicInfoHeight = 200;\n  const statsHeight = 200;\n  const coalitionHeight = coalition ? 90 : 0;\n  const footerHeight = 20;\n\n  const calculatedHeight =\n    headerHeight +\n    topBarHeight +\n    commandHeight +\n    basicInfoHeight +\n    statsHeight +\n    coalitionHeight +\n    footerHeight +\n    20;\n\n  // Get theme\n  const theme = THEMES[themeName] || THEMES.dark;\n\n  // Start building SVG\n  let svg = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${\n    config.width\n  }\" height=\"${calculatedHeight}\" viewBox=\"0 0 ${\n    config.width\n  } ${calculatedHeight}\">\n  ${getSvgDefs(themeName)}\n  \n  <!-- Terminal window -->\n  <rect width=\"${config.width}\" height=\"${calculatedHeight}\" fill=\"${\n    theme.windowBorder\n  }\" rx=\"6\" ry=\"6\" filter=\"url(#window-shadow)\" />\n  <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${\n    calculatedHeight - 2\n  }\" fill=\"${theme.bg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Terminal header -->\n  <rect x=\"1\" y=\"1\" width=\"${\n    config.width - 2\n  }\" height=\"${headerHeight}\" fill=\"${theme.headerBg}\" rx=\"5\" ry=\"5\" />\n  \n  <!-- Traffic lights -->\n  <g transform=\"translate(20, ${headerHeight / 2})\">\n    <circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n    <circle cx=\"20\" cy=\"0\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n    <circle cx=\"40\" cy=\"0\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n  </g>\n  \n  <!-- Title -->\n  <text x=\"${config.width / 2}\" y=\"${\n    headerHeight / 2 + 5\n  }\" text-anchor=\"middle\" fill=\"${\n    theme.titleText\n  }\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    ${escapeXml(displayName)} — student profile\n  </text>\n  \n  <!-- Command line -->\n  <g transform=\"translate(${config.padding}, ${\n    headerHeight + topBarHeight + 30\n  })\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">${escapeXml(username)}</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"8\" fill=\"${theme.commandText}\">whoami --all</tspan>\n      <tspan class=\"cursor-blink\" fill=\"${\n        theme.promptUser\n      }\" filter=\"url(#cursor-glow)\">▋</tspan>\n    </text>\n  </g>`;\n\n  // Basic Info Section\n  const profileY = headerHeight + topBarHeight + commandHeight;\n  const colPadding = config.padding;\n\n  // Add section title\n  svg += `\n  <g transform=\"translate(${colPadding}, ${profileY + 30})\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.sectionTitle}\">/* Basic Information */</tspan>\n    </text>\n  </g>\n  <line x1=\"${colPadding}\" y1=\"${profileY + 40}\" x2=\"${\n    config.width - colPadding\n  }\" y2=\"${profileY + 40}\" \n        stroke=\"${\n          theme.tableBorder\n        }\" stroke-width=\"1\" stroke-dasharray=\"2,1\" opacity=\"0.5\" />`;\n\n  // Add basic info fields\n  const leftColX = colPadding;\n  const rightColX = Math.floor(config.width / 2) + 20;\n\n  // Left Column Labels - unchanged\n  const leftColLabels = [\n    { label: \"Login\", value: username },\n    { label: \"Display Name\", value: displayName },\n    { label: \"Email\", value: userData.email || \"N/A\" },\n    {\n      label: \"Created At\",\n      value: formatDate(userData.created_at || userData.createdAt),\n    },\n  ];\n\n  // Right Column Labels - MODIFIED: Replaced \"Active Status\" with \"Level\"\n  const rightColLabels = [\n    {\n      label: \"Level\",\n      value: stats.level.toFixed(2),\n      isHighlight: stats.level >= 10,\n    },\n    {\n      label: \"Correction Points\",\n      value: stats.correctionPoints.toString(),\n      isHighlight: stats.correctionPoints > 10,\n    },\n    { label: \"Wallet\", value: stats.wallet.toString() },\n    { label: \"Account Age\", value: `${stats.accountAge} days` },\n  ];\n\n  // Column widths for alignment\n  const leftLabelWidth = 130;\n  const rightLabelWidth = 170;\n\n  // Render left column\n  leftColLabels.forEach((item, index) => {\n    const y = profileY + 80 + index * config.lineHeight;\n    svg += `\n    <g transform=\"translate(0, ${y})\">\n      <text font-size=\"13\" class=\"terminal-font\">\n        <tspan x=\"${leftColX}\" fill=\"${theme.labelText}\">${item.label}:</tspan>\n        <tspan x=\"${leftColX + leftLabelWidth}\" fill=\"${\n      item.isHighlight ? theme.valueHighlight : theme.valueText\n    }\">${escapeXml(item.value)}</tspan>\n      </text>\n    </g>`;\n  });\n\n  // Render right column\n  rightColLabels.forEach((item, index) => {\n    const y = profileY + 80 + index * config.lineHeight;\n    svg += `\n    <g transform=\"translate(0, ${y})\">\n      <text font-size=\"13\" class=\"terminal-font\">\n        <tspan x=\"${rightColX}\" fill=\"${theme.labelText}\">${item.label}:</tspan>\n        <tspan x=\"${rightColX + rightLabelWidth}\" fill=\"${\n      item.isHighlight ? theme.valueHighlight : theme.valueText\n    }\">${escapeXml(item.value)}</tspan>\n      </text>\n    </g>`;\n  });\n\n  // Stats Section\n  const statsY = profileY + basicInfoHeight + 10;\n\n  // Add section title\n  svg += `\n<g transform=\"translate(${colPadding}, ${statsY})\">\n  <text font-size=\"14\" class=\"terminal-font\">\n    <tspan fill=\"${theme.sectionTitle}\">/* Student Statistics */</tspan>\n  </text>\n</g>\n<line x1=\"${colPadding}\" y1=\"${statsY + 10}\" x2=\"${\n    config.width - colPadding\n  }\" y2=\"${statsY + 10}\" \n      stroke=\"${\n        theme.tableBorder\n      }\" stroke-width=\"1\" stroke-dasharray=\"2,1\" opacity=\"0.5\" />`;\n\n  // Projects stats (left column) - unchanged\n  const projectsStats = [\n    { label: \"Total Projects\", value: stats.totalProjects.toString() },\n    {\n      label: \"Completed Projects\",\n      value: stats.completedProjects.toString(),\n      isHighlight: true,\n    },\n    {\n      label: \"Failed Projects\",\n      value: stats.failedProjects.toString(),\n      isWarning: true,\n    },\n    {\n      label: \"In Progress Projects\",\n      value: stats.inProgressProjects.toString(),\n    },\n  ];\n\n  // Performance stats (right column)\n  const performanceStats = [\n    {\n      label: \"Average Project Mark\",\n      value: `${stats.averageMark}/100`,\n      isHighlight: stats.averageMark >= 90,\n    },\n    {\n      label: \"Highest Project Mark\",\n      value: `${stats.highestMark}/100`,\n      isHighlight: stats.highestMark >= 100,\n    },\n    { label: \"Total Skills\", value: stats.totalSkills.toString() },\n    {\n      label: \"Average Skill Score\",\n      value: stats.skillsAverage.toFixed(2),\n      isHighlight: stats.skillsAverage >= 7,\n    },\n  ];\n\n  // Label widths for alignment\n  const statsLabelWidth = 180;\n  const rightStatsLabelWidth = 180;\n\n  // Render project stats\n  projectsStats.forEach((item, index) => {\n    const y = statsY + 45 + index * config.lineHeight;\n    const valueColor = item.isWarning\n      ? theme.valueWarning\n      : item.isHighlight\n      ? theme.valueHighlight\n      : theme.valueText;\n\n    svg += `\n  <g transform=\"translate(0, ${y})\">\n    <text font-size=\"13\" class=\"terminal-font\">\n      <tspan x=\"${leftColX}\" fill=\"${theme.labelText}\">${item.label}:</tspan>\n      <tspan x=\"${leftColX + statsLabelWidth}\" fill=\"${valueColor}\">${escapeXml(\n      item.value\n    )}</tspan>\n    </text>\n  </g>`;\n  });\n\n  // Render performance stats\n  performanceStats.forEach((item, index) => {\n    const y = statsY + 45 + index * config.lineHeight;\n    const valueColor = item.isHighlight\n      ? theme.valueHighlight\n      : theme.valueText;\n\n    svg += `\n  <g transform=\"translate(0, ${y})\">\n    <text font-size=\"13\" class=\"terminal-font\">\n      <tspan x=\"${rightColX}\" fill=\"${theme.labelText}\">${item.label}:</tspan>\n      <tspan x=\"${\n        rightColX + rightStatsLabelWidth\n      }\" fill=\"${valueColor}\">${escapeXml(item.value)}</tspan>\n    </text>\n  </g>`;\n  });\n\n  // Coalition Section - unchanged\n  if (coalition) {\n    const coalitionY = statsY + statsHeight + 10;\n\n    // Add section title\n    svg += `\n  <g transform=\"translate(${colPadding}, ${coalitionY})\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.sectionTitle}\">/* Coalition Information */</tspan>\n    </text>\n  </g>\n  <line x1=\"${colPadding}\" y1=\"${coalitionY + 10}\" x2=\"${\n      config.width - colPadding\n    }\" y2=\"${coalitionY + 10}\" \n        stroke=\"${\n          theme.tableBorder\n        }\" stroke-width=\"1\" stroke-dasharray=\"2,1\" opacity=\"0.5\" />`;\n\n    // Get coalition color\n    let coalitionColor = coalition.color;\n    if (!coalitionColor) {\n      coalitionColor =\n        theme.coalitionColor[coalitionName] || theme.coalitionColor[\"Default\"];\n    }\n\n    // Display coalition info\n    svg += `\n  <g transform=\"translate(0, ${coalitionY + 45})\">\n    <text font-size=\"13\" class=\"terminal-font\">\n      <tspan x=\"${leftColX}\" fill=\"${theme.labelText}\">Coalition:</tspan>\n      <tspan x=\"${\n        leftColX + statsLabelWidth\n      }\" fill=\"${coalitionColor}\" font-weight=\"bold\">${escapeXml(\n      coalition.name || \"None\"\n    )}</tspan>\n    </text>\n  </g>\n  <g transform=\"translate(0, ${coalitionY + 45 + config.lineHeight})\">\n    <text font-size=\"13\" class=\"terminal-font\">\n      <tspan x=\"${leftColX}\" fill=\"${theme.labelText}\">Coalition Score:</tspan>\n      <tspan x=\"${leftColX + statsLabelWidth}\" fill=\"${coalitionColor}\">${\n      coalition.score || 0\n    }</tspan>\n    </text>\n  </g>`;\n  }\n\n\n  return svg;\n}\n\n/**\n * Generate terminal error message\n */\nexport function generateErrorSVG(message, themeName = \"dark\") {\n  const errorWidth = 500;\n  const errorHeight = 200;\n  const theme = THEMES[themeName] || THEMES.dark;\n\n  return `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${errorWidth}\" height=\"${errorHeight}\" viewBox=\"0 0 ${errorWidth} ${errorHeight}\">\n<defs>\n  <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"2\" patternTransform=\"rotate(0)\">\n    <rect width=\"100%\" height=\"1\" fill=\"#000\" fill-opacity=\"0.04\" />\n  </pattern>\n  \n  <filter id=\"window-shadow\">\n    <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"4\" flood-opacity=\"0.3\" flood-color=\"#000000\" />\n  </filter>\n  \n  <filter id=\"noise\">\n    <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.8\" numOctaves=\"1\" stitchTiles=\"stitch\" result=\"noise\"/>\n    <feColorMatrix type=\"matrix\" values=\"0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.05 0\" result=\"coloredNoise\"/>\n    <feComposite operator=\"in\" in2=\"SourceGraphic\" in=\"coloredNoise\" result=\"monoNoise\"/>\n    <feBlend in=\"SourceGraphic\" in2=\"monoNoise\" mode=\"multiply\"/>\n  </filter>\n</defs>\n\n<style>\n  .terminal-font { font-family: \"Menlo\", \"Monaco\", \"Consolas\", \"Courier New\", monospace; }\n  @keyframes blink { 0%, 100% { opacity: 0; } 50% { opacity: 1; } }\n  .cursor { animation: blink 1.2s infinite; }\n</style>\n\n<!-- Terminal window -->\n<rect width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"${\n    theme.windowBorder\n  }\" rx=\"6\" ry=\"6\" filter=\"url(#window-shadow)\" />\n<rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"${errorHeight - 2}\" fill=\"${\n    theme.bg\n  }\" rx=\"5\" ry=\"5\" />\n\n<!-- Terminal header -->\n<rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"36\" fill=\"${\n    theme.headerBg\n  }\" rx=\"5\" ry=\"5\" />\n\n<!-- Traffic lights -->\n<circle cx=\"20\" cy=\"18\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n<circle cx=\"40\" cy=\"18\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n<circle cx=\"60\" cy=\"18\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n\n<text x=\"${errorWidth / 2}\" y=\"22\" text-anchor=\"middle\" fill=\"${\n    theme.titleText\n  }\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n  error — bash\n</text>\n\n<!-- Command prompt -->\n<text x=\"15\" y=\"60\" font-size=\"14\" class=\"terminal-font\">\n  <tspan fill=\"${theme.promptUser}\">user</tspan>\n  <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n  <tspan fill=\"${theme.promptPath}\">~$</tspan>\n  <tspan dx=\"8\" fill=\"${theme.commandText}\">whoami --all</tspan>\n  <tspan class=\"cursor\" dx=\"4\">|</tspan>\n</text>\n\n<!-- Error message -->\n<rect x=\"15\" y=\"75\" width=\"${errorWidth - 30}\" height=\"50\" rx=\"0\" ry=\"0\" \n      fill=\"${\n        themeName === \"dark\"\n          ? \"rgba(255, 123, 114, 0.1)\"\n          : \"rgba(207, 34, 46, 0.1)\"\n      }\" \n      stroke=\"${theme.valueError}\" stroke-width=\"1\" stroke-opacity=\"0.3\" />\n\n<text x=\"25\" y=\"105\" font-size=\"14\" fill=\"${\n    theme.valueError\n  }\" class=\"terminal-font\">\n  <tspan>error: ${escapeXml(message)}</tspan>\n</text>\n\n<!-- Return code -->\n<text x=\"15\" y=\"150\" font-size=\"14\" class=\"terminal-font\">\n  <tspan fill=\"${theme.promptUser}\">user</tspan>\n  <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n  <tspan fill=\"${theme.promptPath}\">~$</tspan>\n  <tspan dx=\"8\" fill=\"${theme.commandText}\">echo $?</tspan>\n</text>\n\n<text x=\"15\" y=\"175\" font-size=\"14\" fill=\"${\n    theme.commandText\n  }\" class=\"terminal-font\">\n  <tspan>1</tspan>\n</text>\n\n<!-- Terminal effects -->\n<rect x=\"1\" y=\"1\" width=\"${errorWidth - 2}\" height=\"${\n    errorHeight - 2\n  }\" rx=\"5\" ry=\"5\" fill=\"url(#scanlines)\" fill-opacity=\"0.5\" />\n<rect x=\"0\" y=\"0\" width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"transparent\" filter=\"url(#noise)\" rx=\"6\" ry=\"6\" opacity=\"0.2\" />\n</svg>`;\n}\n\nexport default {\n  generateTerminalStudent,\n  generateErrorSVG,\n};\n"
    },
    {
      "path": "lib/themes.js",
      "content": "/**\n * Widget theme configurations\n */\nexport const themes = {\n  // Dark theme (default)\n  dark: {\n    name: 'Dark',\n    colors: {\n      background: '#1e293b',       // slate-800\n      text: '#f8fafc',             // slate-50\n      textSecondary: '#cbd5e1',    // slate-300\n      cardBackground: '#334155',   // slate-700\n      border: '#475569',           // slate-600\n      accent: '#3b82f6',           // blue-500\n      success: '#22c55e',          // green-500\n      warning: '#eab308',          // yellow-500\n      danger: '#ef4444',           // red-500\n      // Progress bar backgrounds\n      progressBg: '#1e293b',       // slate-800\n      highScore: '#22c55e',        // green-500\n      mediumScore: '#3b82f6',      // blue-500\n      lowScore: '#eab308',         // yellow-500\n      failScore: '#ef4444'         // red-500\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  },\n  \n  // Light theme\n  light: {\n    name: 'Light',\n    colors: {\n      background: '#f8fafc',       // slate-50\n      text: '#1e293b',             // slate-800\n      textSecondary: '#475569',    // slate-600\n      cardBackground: '#f1f5f9',   // slate-100\n      border: '#cbd5e1',           // slate-300\n      accent: '#2563eb',           // blue-600\n      success: '#16a34a',          // green-600\n      warning: '#ca8a04',          // yellow-600\n      danger: '#dc2626',           // red-600\n      // Progress bar backgrounds\n      progressBg: '#e2e8f0',       // slate-200\n      highScore: '#16a34a',        // green-600\n      mediumScore: '#2563eb',      // blue-600\n      lowScore: '#ca8a04',         // yellow-600\n      failScore: '#dc2626'         // red-600\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  }\n};\n\n/**\n * Get color for skill level\n */\nexport function getSkillColor(value, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  \n  if (value >= 8) return theme.colors.highScore;\n  if (value >= 6) return theme.colors.mediumScore;\n  if (value >= 4) return theme.colors.lowScore;\n  return theme.colors.failScore;\n}\n\nexport default themes;"
    },
    {
      "path": "lib/utils/levelFetcher.js",
      "content": "// lib/utils/levelFetcher.js\n\nimport axios from 'axios';\n\n// API configuration\nconst API_URL = process.env.NEXT_PUBLIC_42_API_URL || \"https://api.intra.42.fr/v2\";\nconst TOKEN_URL = \"https://api.intra.42.fr/oauth/token\";\nconst CLIENT_ID = process.env.FT_CLIENT_ID;\nconst CLIENT_SECRET = process.env.FT_CLIENT_SECRET;\n\n// Keep the token in memory to avoid unnecessary requests\nlet cachedToken = null;\nlet tokenExpiry = null;\n\n/**\n * Get an authentication token from the 42 API\n */\nasync function getToken() {\n  // Check if we have a valid cached token\n  if (cachedToken && tokenExpiry && Date.now() < tokenExpiry) {\n    return cachedToken;\n  }\n\n  try {\n    console.log('LevelFetcher: Requesting token from 42 API...');\n    const response = await axios.post(TOKEN_URL, {\n      grant_type: \"client_credentials\",\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n    });\n\n    // Cache the token and set expiry (subtract 5 minutes as safety margin)\n    cachedToken = response.data.access_token;\n    tokenExpiry = Date.now() + (response.data.expires_in * 1000) - 300000;\n    console.log('LevelFetcher: Token obtained successfully');\n\n    return cachedToken;\n  } catch (error) {\n    console.error('LevelFetcher: Error getting 42 API token:', error);\n    throw new Error(`Failed to get 42 API token: ${error.message}`);\n  }\n}\n\n/**\n * Make an authenticated request to the 42 API\n */\nasync function api42Request(endpoint, options = {}) {\n  try {\n    const token = await getToken();\n    \n    const response = await axios({\n      url: `${API_URL}${endpoint}`,\n      headers: { \n        Authorization: `Bearer ${token}`,\n        ...options.headers\n      },\n      ...options\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error(`LevelFetcher: Error in API request ${endpoint}:`, error);\n    throw new Error(`Failed API request: ${error.message}`);\n  }\n}\n\n/**\n * Get user's 42cursus level from the API\n * @param {string} username - 42 username\n * @returns {Promise<number>} - User's level or 0 if not found\n */\nexport async function getUserLevel(username) {\n  try {\n    console.log(`LevelFetcher: Fetching level data for ${username}...`);\n    \n    // Direct endpoint to get only cursus_users data, which is more efficient\n    const endpoint = `/users/${username}/cursus_users`;\n    const cursusData = await api42Request(endpoint);\n    \n    if (!cursusData || !Array.isArray(cursusData)) {\n      console.warn(`LevelFetcher: Invalid data format for ${username}`);\n      return 0;\n    }\n    \n    console.log(`LevelFetcher: Found ${cursusData.length} cursus entries for ${username}`);\n    \n    // Look specifically for 42cursus\n    const mainCursus = cursusData.find(c => c.cursus?.name === '42cursus');\n    if (mainCursus && typeof mainCursus.level === 'number') {\n      console.log(`LevelFetcher: 42cursus level found: ${mainCursus.level}`);\n      return mainCursus.level;\n    }\n    \n    // Try with cursus ID 21 (42 cursus)\n    const cursusById = cursusData.find(c => c.cursus?.id === 21);\n    if (cursusById && typeof cursusById.level === 'number') {\n      console.log(`LevelFetcher: Level found via cursus ID 21: ${cursusById.level}`);\n      return cursusById.level;\n    }\n    \n    // If no 42cursus found, use the highest level as fallback\n    if (cursusData.length > 0) {\n      const highestLevel = Math.max(...cursusData.map(c => c.level || 0));\n      console.log(`LevelFetcher: Using highest level: ${highestLevel}`);\n      return highestLevel;\n    }\n    \n    console.warn(`LevelFetcher: No level data found for ${username}`);\n    return 0;\n  } catch (error) {\n    console.error(`LevelFetcher: Error fetching level for ${username}:`, error);\n    return 0; // Return 0 as default in case of error\n  }\n}\n\nexport default {\n  getUserLevel\n};"
    },
    {
      "path": "lib/utils/projectsHelper.js",
      "content": "// lib/utils/projectUtils.js\n\n/**\n * Utilities for working with 42 project data\n */\n\n/**\n * Map of cursus IDs to readable names\n */\nexport const CURSUS_NAMES = {\n    9: 'C Piscine',\n    21: 'Common Core',\n    67: '42 Events'\n  };\n  \n  /**\n   * Get a human-readable name for a cursus ID\n   * @param {number} cursusId - The cursus ID\n   * @returns {string} The cursus name\n   */\n  export function getCursusName(cursusId) {\n    return CURSUS_NAMES[cursusId] || `Cursus ${cursusId}`;\n  }\n  \n  /**\n   * Filter projects to get only valid completed ones\n   * @param {Array} projects - Array of project objects from API\n   * @param {Object} options - Filter options\n   * @returns {Array} Filtered projects\n   */\n  export function getValidatedProjects(projects, options = {}) {\n    const { includePiscine = false } = options;\n    \n    return projects.filter(project => {\n      // Check if project is completed\n      const isCompleted = \n        (project.status === 'finished') && \n        (project.validated === true || project['validated?'] === true) &&\n        (project.final_mark !== null && project.final_mark > 0);\n      \n      // Check if it's a Piscine project\n      const isPiscine = project.cursus_ids && project.cursus_ids.includes(9);\n      \n      // Include only completed projects, and filter Piscine projects if requested\n      return isCompleted && (includePiscine || !isPiscine);\n    });\n  }\n  \n  /**\n   * Sort projects by completion date (newest first)\n   * @param {Array} projects - Array of project objects\n   * @returns {Array} Sorted projects\n   */\n  export function sortProjectsByDate(projects) {\n    return [...projects].sort((a, b) => {\n      // Primary sort by marked_at date\n      if (a.marked_at && b.marked_at) {\n        return new Date(b.marked_at) - new Date(a.marked_at);\n      }\n      \n      // Secondary sort by updated_at if marked_at not available\n      if (a.updated_at && b.updated_at) {\n        return new Date(b.updated_at) - new Date(a.updated_at);\n      }\n      \n      // Tertiary sort by mark (highest first)\n      return (b.final_mark || 0) - (a.final_mark || 0);\n    });\n  }\n  \n  /**\n   * Prepare project data for display\n   * @param {Object} project - Raw project object from API\n   * @returns {Object} Processed project object\n   */\n  export function processProjectForDisplay(project) {\n    // Get project name\n    const name = project.project ? project.project.name : 'Unknown Project';\n    \n    // Get completion date\n    const completionDate = project.marked_at || project.updated_at;\n    \n    // Get mark\n    const mark = project.final_mark || 0;\n    \n    // Get team information\n    const isTeam = project.teams && \n                  project.teams[0] && \n                  project.teams[0].users && \n                  project.teams[0].users.length > 1;\n    \n    const teamSize = isTeam ? project.teams[0].users.length : 1;\n    \n    // Get cursus information\n    const cursusIds = project.cursus_ids || [];\n    const cursusNames = cursusIds.map(id => getCursusName(id));\n    \n    // Return processed data\n    return {\n      id: project.id,\n      name,\n      mark,\n      completionDate,\n      isTeam,\n      teamSize,\n      cursusIds,\n      cursusNames,\n      status: project.status\n    };\n  }\n  \n  /**\n   * Format date in a readable way\n   * @param {string} dateString - ISO date string\n   * @returns {string} Formatted date\n   */\n  export function formatDate(dateString) {\n    if (!dateString) return 'N/A';\n    \n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return 'N/A';\n      \n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    } catch (error) {\n      return 'N/A';\n    }\n  }\n  \n  export default {\n    getCursusName,\n    getValidatedProjects,\n    sortProjectsByDate,\n    processProjectForDisplay,\n    formatDate\n  };\n  "
    },
    {
      "path": "lib/utils/widgetUrl.js",
      "content": "// lib/utils/widgetUrl.js\n\n/**\n * Build a widget URL with specified parameters\n * @param {Object} options - Configuration options for the widget URL\n * @param {string} options.username - 42 username\n * @param {string} options.widgetType - Widget type (skills, projects, etc.)\n * @param {string} options.theme - Widget theme (dark, light)\n * @param {number} options.width - Widget width in pixels\n * @param {number} options.maxSkills - Maximum number of skills to display\n * @param {string} options.baseUrl - Base URL for the widget (defaults to current origin)\n * @returns {string} The complete widget URL\n */\nexport function buildWidgetUrl({\n    username,\n    widgetType = 'skills',\n    theme = 'dark',\n    width,\n    maxSkills,\n    baseUrl\n  }) {\n    if (!username) {\n      throw new Error('Username is required to build a widget URL');\n    }\n    \n    // Get base URL (current origin or provided baseUrl)\n    const base = baseUrl || (typeof window !== 'undefined' \n      ? window.location.origin \n      : 'https://42widgets.vercel.app');\n    \n    // Build the URL - only theme is required parameter\n    let url = `${base}/api/widget/${widgetType}/${encodeURIComponent(username)}?theme=${theme}`;\n    \n    // Only add optional parameters if explicitly provided and valid\n    if (width && !isNaN(width) && width > 0) {\n      url += `&width=${width}`;\n    }\n    \n    // Only add maxSkills if explicitly provided and valid\n    // This is crucial - we don't want to accidentally limit skills\n    if (maxSkills && !isNaN(maxSkills) && maxSkills > 0) {\n      url += `&maxSkills=${maxSkills}`;\n    }\n    \n    return url;\n  }\n  \n  /**\n   * Generate sharing formats for a widget\n   * @param {Object} options - Same options as buildWidgetUrl\n   * @returns {Object} Different sharing formats\n   */\n  export function generateSharingFormats(options) {\n    const widgetUrl = buildWidgetUrl(options);\n    const { username, widgetType = 'skills' } = options;\n    \n    return {\n      markdown: `![${username}'s 42 ${widgetType}](${widgetUrl})`,\n      html: `<img src=\"${widgetUrl}\" alt=\"${username}'s 42 ${widgetType}\" />`,\n      url: widgetUrl,\n      bbcode: `[img]${widgetUrl}[/img]`,\n      html_linked: `<a href=\"https://profile.intra.42.fr/users/${username}\" target=\"_blank\"><img src=\"${widgetUrl}\" alt=\"${username}'s 42 ${widgetType}\" /></a>`,\n      markdown_linked: `[![${username}'s 42 ${widgetType}](${widgetUrl})](https://profile.intra.42.fr/users/${username})`,\n    };\n  }\n  \n  export default {\n    buildWidgetUrl,\n    generateSharingFormats\n  };"
    },
    {
      "path": "next.config.mjs",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    // Enable React's strict mode for development\n    reactStrictMode: true,\n    \n    // Configure for serverless/edge deployment if needed\n    // output: 'standalone',\n  };\n  \n  export default nextConfig;"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"42-widgets\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"dotenv\": \"^16.4.7\",\n    \"next\": \"15.2.4\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/postcss\": \"^4\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss\": \"^8.4.31\",\n    \"tailwindcss\": \"^3.3.5\"\n  }\n}\n"
    },
    {
      "path": "postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}"
    },
    {
      "path": "postcss.config.mjs",
      "content": "const config = {\n  plugins: [\"@tailwindcss/postcss\"],\n};\n\nexport default config;\n"
    },
    {
      "path": "tailwind.config.js",
      "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./lib/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}"
    }
  ]
}