{
  "files": [
    {
      "path": ".env.local",
      "content": "# .env.local\n\n# 42 API credentials\nNEXT_PUBLIC_42_API_URL=https://api.intra.42.fr/v2\nFT_CLIENT_ID=u-s4t2ud-3ea24e9ed293f8655a8d8da5a1baec9b372b9dd1c795a79e246436c7335c5dfe\nFT_CLIENT_SECRET=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\n\n# App configuration\nNEXT_PUBLIC_APP_URL=http://localhost:3000"
    },
    {
      "path": ".gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# environment variables\n.env*\n!.env.example\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\nproject_code.json\n"
    },
    {
      "path": "app/api/student/[username]/route.js",
      "content": "import { NextResponse } from 'next/server';\nimport { fetchStudentData } from '@/lib/api';\n\n/**\n * API handler for fetching student data\n */\nexport async function GET(request, { params }) {\n  try {\n    const resolvedParams = await Promise.resolve(params);\n    const { username } = resolvedParams;\n    \n    // Debug info - log environment variables availability\n    console.log('Environment check:', {\n      apiUrlExists: !!process.env.NEXT_PUBLIC_42_API_URL,\n      clientIdExists: !!process.env.FT_CLIENT_ID,\n      clientSecretExists: !!process.env.FT_CLIENT_SECRET\n    });\n    \n    // Get student data from API\n    const studentData = await fetchStudentData(username);\n    \n    // Return the full student data\n    return NextResponse.json(studentData);\n  } catch (error) {\n    console.error('API Error:', error);\n    return NextResponse.json(\n      { error: error.message || 'Failed to fetch student data' },\n      { status: 500 }\n    );\n  }\n}"
    },
    {
      "path": "app/api/widget/[type]/[username]/route.js",
      "content": "// app/api/widget/skills/[username]/route.js\n\nimport { NextResponse } from 'next/server';\nimport { fetchStudentData } from '@/lib/api';\nimport { generateTerminalSkills, generateErrorSVG } from '@/lib/generators/terminalSkillsGenerator';\n\n/**\n * Cache control constants\n */\nconst CACHE_MAX_AGE = 60 * 60; // 1 hour\nconst STALE_WHILE_REVALIDATE = 60 * 60 * 24; // 1 day\n\n/**\n * API handler for the terminal-style skills widget\n */\nexport async function GET(request, { params }) {\n  try {\n    const resolvedParams = await Promise.resolve(params);\n    const { username } = resolvedParams;\n    const searchParams = request.nextUrl.searchParams;\n    \n    // Extract customization options\n    const theme = searchParams.get('theme') || 'dark';\n    const width = parseInt(searchParams.get('width'), 10) || 600;\n    const maxSkills = parseInt(searchParams.get('maxSkills'), 10) || 8;\n    \n    // Common headers for SVG response\n    const headers = {\n      'Content-Type': 'image/svg+xml; charset=utf-8',\n      'Cache-Control': `public, max-age=${CACHE_MAX_AGE}, stale-while-revalidate=${STALE_WHILE_REVALIDATE}`,\n      'Access-Control-Allow-Origin': '*',\n      'X-Content-Type-Options': 'nosniff',\n    };\n    \n    // Fetch student data\n    const decodedUsername = decodeURIComponent(username);\n    const studentData = await fetchStudentData(decodedUsername);\n    \n    // Generate SVG chart\n    const svgContent = generateTerminalSkills(studentData, theme, {\n      width,\n      maxSkills\n    });\n    \n    return new NextResponse(svgContent, { headers });\n  } catch (error) {\n    console.error('Widget generation error:', error);\n    \n    // Return an error SVG\n    const errorSvg = generateErrorSVG(error.message || 'Failed to generate widget');\n    \n    return new NextResponse(errorSvg, {\n      headers: { 'Content-Type': 'image/svg+xml; charset=utf-8' },\n      status: 500\n    });\n  }\n}"
    },
    {
      "path": "app/globals.css",
      "content": "/* app/globals.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 255, 255, 255;\n  --background-rgb: 15, 23, 42;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: rgb(var(--background-rgb));\n}\n\n/* Add smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}"
    },
    {
      "path": "app/layout.js",
      "content": "// app/layout.js\nimport './globals.css';\nimport { Inter } from 'next/font/google';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata = {\n  title: '42widgets | Beautiful Widgets for 42 School Students',\n  description: 'Generate beautiful widgets to showcase your 42 school achievements on GitHub and other platforms.',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head />\n      <body className={`${inter.className} bg-gray-900 text-white min-h-screen flex flex-col`} suppressHydrationWarning>\n        {children}\n      </body>\n    </html>\n  );\n}"
    },
    {
      "path": "app/page.js",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport TerminalSkillsDisplay from '@/components/student/TerminalSkillsDisplay';\nimport { generateTerminalSkills, generateErrorSVG } from '@/lib/generators/terminalSkillsGenerator';\n\nexport default function HomePage() {\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [svgWidget, setSvgWidget] = useState('');\n  const [currentUsername, setCurrentUsername] = useState('');\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!username.trim()) {\n      setError('Please enter a valid username');\n      return;\n    }\n    \n    // Validate username format\n    if (!/^[a-z0-9-]+$/i.test(username)) {\n      setError('Please enter a valid 42 intra username (letters, numbers, and hyphens only)');\n      return;\n    }\n    \n    setIsLoading(true);\n    setError('');\n    \n    try {\n      // Fetch student data from our API with properly encoded username\n      const encodedUsername = encodeURIComponent(username.trim());\n      const response = await axios.get(`/api/student/${encodedUsername}`);\n      const data = response.data;\n      \n      // Generate the SVG widget\n      const svg = generateTerminalSkills(data);\n      \n      setSvgWidget(svg);\n      setCurrentUsername(username);\n      \n    } catch (err) {\n      console.error('Error:', err);\n      \n      // Handle specific error types\n      let errorMessage = 'Error generating widget';\n      \n      if (err.response) {\n        if (err.response.status === 429) {\n          errorMessage = 'Rate limit exceeded. Please try again in a minute.';\n        } else if (err.response.status === 404) {\n          errorMessage = `Username '${username}' not found. Please check the spelling.`;\n        } else if (err.response.data?.error) {\n          errorMessage = err.response.data.error;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setSvgWidget(generateErrorSVG(errorMessage));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <header className=\"bg-gray-800 shadow-md\">\n        <div className=\"max-w-4xl mx-auto px-4 py-4\">\n          <h1 className=\"text-xl font-bold text-blue-400\">42 Skills Terminal</h1>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto p-4 py-8\">\n        <div className=\"mb-8 text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">Generate Your 42 Skills Terminal</h2>\n          <p className=\"text-gray-300 max-w-2xl mx-auto\">\n            Create a clean, terminal-style visualization of your 42 School skills.\n            Perfect for displaying on your GitHub profile.\n          </p>\n        </div>\n\n        {/* Form */}\n        <div className=\"mb-8\">\n          <form onSubmit={handleSubmit} className=\"bg-gray-800 rounded-lg shadow-md p-6 max-w-md mx-auto\">\n            <div className=\"mb-4\">\n              <label htmlFor=\"username\" className=\"block text-gray-300 mb-2 font-medium\">\n                42 Intra Username\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400\">\n                  @\n                </span>\n                <input\n                  type=\"text\"\n                  id=\"username\"\n                  className=\"w-full pl-8 px-4 py-2 border rounded-md bg-gray-700 text-white border-gray-600 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  placeholder=\"zelhajou\"\n                  required\n                />\n              </div>\n            </div>\n\n            <button\n              type=\"submit\"\n              className={`\n                w-full py-2 px-4 rounded-md text-white font-medium transition-colors\n                ${isLoading\n                  ? 'bg-gray-500 cursor-not-allowed'\n                  : 'bg-blue-600 hover:bg-blue-700'}`\n              }\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <span className=\"flex items-center justify-center\">\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Generating...\n                </span>\n              ) : 'Generate Widget'}\n            </button>\n            \n            {error && (\n              <div className=\"mt-4 p-3 bg-red-900/30 border border-red-500/50 rounded text-red-300 text-sm\">\n                <div className=\"flex\">\n                  <svg className=\"h-5 w-5 text-red-400 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z\" clipRule=\"evenodd\" />\n                  </svg>\n                  {error}\n                </div>\n              </div>\n            )}\n          </form>\n        </div>\n\n        {/* Widget Display */}\n        {svgWidget && (\n          <TerminalSkillsDisplay svgWidget={svgWidget} username={currentUsername} />\n        )}\n\n        {/* Features Section */}\n        <div className=\"mt-12 grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"bg-gray-800 rounded-lg p-5 shadow-md\">\n            <div className=\"text-blue-400 mb-3\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-bold mb-2\">Terminal Style</h3>\n            <p className=\"text-gray-400 text-sm\">\n              Showcase your skills in a clean, familiar terminal interface that reflects your development environment.\n            </p>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded-lg p-5 shadow-md\">\n            <div className=\"text-green-400 mb-3\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-bold mb-2\">Color-Coded Skills</h3>\n            <p className=\"text-gray-400 text-sm\">\n              Each skill is instantly recognizable with color highlighting that indicates your proficiency level.\n            </p>\n          </div>\n          \n          <div className=\"bg-gray-800 rounded-lg p-5 shadow-md\">\n            <div className=\"text-yellow-400 mb-3\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-bold mb-2\">GitHub Ready</h3>\n            <p className=\"text-gray-400 text-sm\">\n              Add the widget to your GitHub profile with a single click to copy the markdown code.\n            </p>\n          </div>\n        </div>\n\n        {/* How to Use */}\n        <div className=\"mt-10 bg-gray-800 rounded-lg shadow-md p-6\">\n          <h3 className=\"text-xl font-bold mb-4\">How to Use</h3>\n          <ol className=\"list-decimal pl-5 space-y-3 text-gray-300\">\n            <li>Enter your 42 intra username in the input field above</li>\n            <li>Click the \"Generate Widget\" button to create your terminal-style skills visualization</li>\n            <li>Select your preferred theme (dark or light)</li>\n            <li>Copy the provided markdown code from the widget display</li>\n            <li>Paste the markdown into your GitHub README.md file</li>\n          </ol>\n          \n          <div className=\"mt-6 bg-gray-700 p-4 rounded-md\">\n            <h4 className=\"text-sm font-bold mb-2 text-gray-200\">Why Terminal Style?</h4>\n            <p className=\"text-gray-300 text-sm\">\n              The terminal is a developer's home. This visualization presents your 42 School skills in a format that reflects how developers work every day—with a clean, structured command-line interface. It's not just a widget; it's a statement about your identity as a programmer.\n            </p>\n          </div>\n        </div>\n      </main>\n\n      <footer className=\"bg-gray-800 shadow-inner mt-12 py-6\">\n        <div className=\"max-w-4xl mx-auto px-4 text-center\">\n          <p className=\"text-gray-400 text-sm\">\n            Created with ❤️ • Not affiliated with 42 School\n          </p>\n          <p className=\"mt-2 text-gray-500 text-xs\">\n            © {new Date().getFullYear()} 42widgets\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}"
    },
    {
      "path": "components/student/TerminalSkillsDisplay.js",
      "content": "'use client';\n\nimport { useState } from 'react';\n\nexport default function TerminalSkillsDisplay({ svgWidget, username }) {\n  const [copied, setCopied] = useState(false);\n  const [selectedTheme, setSelectedTheme] = useState('dark');\n  \n  // Generate GitHub embed code\n  const generateGithubCode = () => {\n    if (!username) return '';\n    \n    const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n    const widgetUrl = `${baseUrl}/api/widget/skills/${encodeURIComponent(username)}?theme=${selectedTheme}`;\n    \n    return `![${username}'s 42 Skills](${widgetUrl})`;\n  };\n  \n  // Copy to clipboard\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(generateGithubCode())\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => console.error('Failed to copy:', err));\n  };\n  \n  if (!svgWidget) return null;\n  \n  return (\n    <div className=\"bg-gray-800 rounded-lg p-6 shadow-lg mb-10\">\n      <h3 className=\"text-lg font-medium text-white mb-4\">Your Terminal Skills Widget</h3>\n      \n      {/* Widget Preview */}\n      <div className=\"border border-gray-700 rounded-lg p-3 bg-gray-900 flex justify-center mb-6 overflow-auto\">\n        <div dangerouslySetInnerHTML={{ __html: svgWidget }} className=\"transform transition hover:scale-[1.01] duration-200\" />\n      </div>\n      \n      {/* Theme Selector */}\n      <div className=\"mb-6\">\n        <label className=\"block text-sm text-gray-300 mb-2\">Theme</label>\n        <div className=\"flex space-x-3\">\n          <button\n            onClick={() => setSelectedTheme('dark')}\n            className={`px-3 py-2 rounded text-sm transition-colors ${\n              selectedTheme === 'dark' \n                ? 'bg-blue-600 text-white' \n                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n            }`}\n          >\n            Dark\n          </button>\n          <button\n            onClick={() => setSelectedTheme('light')}\n            className={`px-3 py-2 rounded text-sm transition-colors ${\n              selectedTheme === 'light' \n                ? 'bg-blue-600 text-white' \n                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n            }`}\n          >\n            Light\n          </button>\n        </div>\n      </div>\n      \n      {/* GitHub Embed Code */}\n      <div className=\"space-y-2 mb-6\">\n        <label className=\"block text-sm text-gray-300\">GitHub Markdown</label>\n        <div className=\"flex\">\n          <input\n            type=\"text\"\n            readOnly\n            value={generateGithubCode()}\n            className=\"flex-grow px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-l-md text-sm\"\n          />\n          <button\n            onClick={copyToClipboard}\n            className={`px-3 py-2 rounded-r-md text-white text-sm transition-colors ${copied ? 'bg-green-500' : 'bg-blue-600 hover:bg-blue-700'}`}\n          >\n            {copied ? 'Copied!' : 'Copy'}\n          </button>\n        </div>\n        <p className=\"text-xs text-gray-400\">\n          Add this code to your GitHub README.md to display your skills\n        </p>\n      </div>\n      \n      {/* Preview Link */}\n      <div className=\"flex justify-center\">\n        <a\n          href={`/api/widget/skills/${username}?theme=${selectedTheme}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"inline-flex items-center px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 text-sm transition-colors\"\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n          </svg>\n          Open in New Tab\n        </a>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "jsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"@/components/*\": [\"./components/*\"],\n      \"@/lib/*\": [\"./lib/*\"],\n      \"@/api/*\": [\"./lib/api/*\"],\n      \"@/config/*\": [\"./config/*\"],\n      \"@/themes\": [\"./lib/themes\"],\n      \"@/mock-data\": [\"./lib/mock-data\"],\n      \"@/generators/*\": [\"./lib/generators/*\"]\n    },\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"react\",\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": false,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \"**/*.js\",\n    \"**/*.jsx\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}"
    },
    {
      "path": "lib/api/index.js",
      "content": "import axios from 'axios';\n\n// Base API URLs\nconst API_URL = process.env.NEXT_PUBLIC_42_API_URL || \"https://api.intra.42.fr/v2\";\nconst TOKEN_URL = \"https://api.intra.42.fr/oauth/token\";\nconst CLIENT_ID = process.env.FT_CLIENT_ID;\nconst CLIENT_SECRET = process.env.FT_CLIENT_SECRET;\n\n// Cache the token to avoid unnecessary requests\nlet cachedToken = null;\nlet tokenExpiry = null;\n\n/**\n * Get an authentication token from the 42 API\n */\nexport async function getToken() {\n  // Check if we have a valid cached token\n  if (cachedToken && tokenExpiry && Date.now() < tokenExpiry) {\n    return cachedToken;\n  }\n\n  if (!CLIENT_ID || !CLIENT_SECRET) {\n    console.error('Missing 42 API credentials:', { \n      clientIdExists: !!CLIENT_ID, \n      clientSecretExists: !!CLIENT_SECRET \n    });\n    throw new Error('Missing 42 API credentials. Make sure FT_CLIENT_ID and FT_CLIENT_SECRET are set.');\n  }\n  \n  try {\n    console.log('Requesting token from 42 API...');\n    const response = await axios.post(TOKEN_URL, {\n      grant_type: \"client_credentials\",\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n    });\n\n    // Cache the token and set expiry (subtract 5 minutes as safety margin)\n    cachedToken = response.data.access_token;\n    tokenExpiry = Date.now() + (response.data.expires_in * 1000) - 300000;\n    console.log('Token obtained successfully');\n\n    return cachedToken;\n  } catch (error) {\n    console.error('Error getting 42 API token:', error);\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    throw new Error(`Failed to get 42 API token: ${error.message}`);\n  }\n}\n\n/**\n * Make an authenticated request to the 42 API with retry logic\n */\nexport async function api42Request(endpoint, options = {}, retryCount = 0) {\n  try {\n    const token = await getToken();\n    \n    const response = await axios({\n      url: `${API_URL}${endpoint}`,\n      headers: { \n        Authorization: `Bearer ${token}`,\n        ...options.headers\n      },\n      ...options\n    });\n    \n    return response.data;\n  } catch (error) {\n    // Handle rate limiting with exponential backoff\n    if (error.response && error.response.status === 429 && retryCount < 3) {\n      console.warn(`Rate limited on ${endpoint}, retry attempt ${retryCount + 1}...`);\n      \n      // Calculate backoff time: 2^retry * 1000ms + random jitter\n      const backoffTime = (Math.pow(2, retryCount) * 1000) + (Math.random() * 1000);\n      \n      // Wait for backoff time\n      await new Promise(resolve => setTimeout(resolve, backoffTime));\n      \n      // Retry the request\n      return api42Request(endpoint, options, retryCount + 1);\n    }\n    \n    console.error(`Error in API request ${endpoint}:`, error);\n    throw new Error(`Failed API request: ${error.response?.status || ''} ${error.message}`);\n  }\n}\n\n/**\n * Fetch comprehensive student data in one call\n */\nexport async function fetchStudentData(username) {\n  try {\n    // Fetch student basic profile\n    const userData = await api42Request(`/users/${username}`);\n    const userId = userData.id;\n    \n    // Make parallel requests for different data types\n    const [projectsData, coalitionsData] = await Promise.all([\n      api42Request(`/users/${userId}/projects_users`),\n      api42Request(`/users/${userId}/coalitions`).catch(() => [])\n    ]);\n    \n    // Process skills data\n    const cursusData = userData.cursus_users || [];\n    const skillsByCursus = {};\n    \n    for (const cursus of cursusData) {\n      const cursusName = cursus.cursus?.name || 'Unknown Cursus';\n      const skills = cursus.skills || [];\n      skillsByCursus[cursusName] = skills;\n    }\n    \n    // Process projects data\n    const projects = {\n      completed: [],\n      inProgress: [],\n      failed: []\n    };\n    \n    for (const project of projectsData) {\n      const projectInfo = {\n        id: project.id,\n        name: project.project?.name || 'Unknown Project',\n        status: project.status,\n        finalMark: project.final_mark,\n        validatedAt: project.validated_at,\n        markedAt: project[\"marked_at\"],\n        cursusName: project.cursus_ids?.length > 0 ? \n          project.cursus_ids[0].name : 'Unknown Cursus'\n      };\n      \n      if (project.status === 'finished' && project.validated) {\n        projects.completed.push(projectInfo);\n      } else if (project.status === 'in_progress') {\n        projects.inProgress.push(projectInfo);\n      } else {\n        projects.failed.push(projectInfo);\n      }\n    }\n    \n    // Process coalition data\n    let coalition = null;\n    if (coalitionsData && coalitionsData.length > 0) {\n      coalition = {\n        id: coalitionsData[0].id,\n        name: coalitionsData[0].name,\n        slug: coalitionsData[0].slug,\n        color: coalitionsData[0].color,\n        score: coalitionsData[0].score,\n        imageUrl: coalitionsData[0].image_url,\n        coverUrl: coalitionsData[0].cover_url\n      };\n    }\n    \n    // Return compiled student data\n    return {\n      id: userData.id,\n      login: userData.login,\n      displayName: userData.displayname || userData.login,\n      email: userData.email,\n      image: userData.image?.link,\n      location: userData.location,\n      correctionPoints: userData.correction_point,\n      wallet: userData.wallet,\n      createdAt: userData.created_at,\n      updatedAt: userData.updated_at,\n      skills: skillsByCursus,\n      projects,\n      coalition\n    };\n  } catch (error) {\n    console.error('Error fetching student data:', error);\n    throw new Error(`Failed to fetch student data: ${error.message}`);\n  }\n}"
    },
    {
      "path": "lib/generators/terminalSkillsGenerator.js",
      "content": "/**\n * Raw API Skills Visualization\n * Displays exactly what's returned from the API without modifications\n */\n\n/**\n * Escape special characters for XML/SVG\n */\nfunction escapeXml(unsafe) {\n  return unsafe.replace(/[<>&'\"]/g, c => {\n    switch (c) {\n      case '<': return '&lt;';\n      case '>': return '&gt;';\n      case '&': return '&amp;';\n      case '\\'': return '&apos;';\n      case '\"': return '&quot;';\n    }\n  });\n}\n\n/**\n * Generate terminal-style visualization with raw API data\n */\nexport function generateTerminalSkills(studentData, themeName = 'dark', options = {}) {\n  // Configure options with defaults\n  const config = {\n    width: options.width || 800,\n    height: options.height || 0,\n    maxSkills: options.maxSkills || 100, // High number to show all skills\n    lineHeight: options.lineHeight || 30,\n    ...options\n  };\n  \n  // Extract skills directly from the API data without modification\n  let allSkills = [];\n  \n  // Collect all skills from all cursus\n  Object.entries(studentData.skills || {}).forEach(([cursusName, cursusSkills]) => {\n    allSkills = [...allSkills, ...cursusSkills];\n  });\n  \n  // If no skills found, show error\n  if (allSkills.length === 0) {\n    return generateErrorSVG('No skills data available', themeName);\n  }\n  \n  // Sort skills by level\n  const sortedSkills = allSkills\n    .sort((a, b) => b.level - a.level)\n    .slice(0, config.maxSkills);\n  \n  // Calculate required height\n  const headerHeight = 40; \n  const topBarHeight = 28;\n  const commandHeight = 40;\n  const tableHeaderHeight = 40;\n  const tableRowsHeight = sortedSkills.length * config.lineHeight;\n  const bottomPadding = 40;\n  \n  const calculatedHeight = headerHeight + topBarHeight + commandHeight + tableHeaderHeight + tableRowsHeight + bottomPadding;\n  \n  // Color scheme based on theme\n  const colors = {\n    dark: {\n      background: '#151718',        // Terminal black\n      windowBorder: '#000000',      // Black border\n      headerBg: '#222222',          // Title bar\n      titleText: '#EEEEEE',         // Title text\n      topBarBg: '#333333',          // Top bar\n      promptUser: '#87D441',        // Green username\n      promptHost: '#87AFAF',        // Host text\n      commandText: '#FFFFFF',       // White text\n      tableBorder: '#444444',       // Table border\n      tableHeaderText: '#BF5FFF',   // Purple header\n      skillName: '#61AFEF',         // Blue skill name\n      skillLevel: '#98C379',        // Green level\n      skillDesc: '#888888',         // Gray description\n      footerText: '#555555'         // Footer text\n    },\n    light: {\n      background: '#FFFFFF',\n      windowBorder: '#CCCCCC',\n      headerBg: '#F0F0F0',\n      titleText: '#333333',\n      topBarBg: '#E5E5E5',\n      promptUser: '#118811',\n      promptHost: '#555555',\n      commandText: '#000000',\n      tableBorder: '#DDDDDD',\n      tableHeaderText: '#9C27B0',\n      skillName: '#0366D6',\n      skillLevel: '#22863A',\n      skillDesc: '#6A737D',\n      footerText: '#999999'\n    }\n  };\n  \n  const theme = colors[themeName] || colors.dark;\n  \n  // Start SVG\n  let svg = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${config.width}\" height=\"${calculatedHeight}\" viewBox=\"0 0 ${config.width} ${calculatedHeight}\">\n    <style>\n      .terminal-font { font-family: \"SFMono-Regular\", \"Menlo\", \"Monaco\", \"Consolas\", monospace; }\n    </style>\n    \n    <!-- Terminal window border -->\n    <rect width=\"${config.width}\" height=\"${calculatedHeight}\" fill=\"${theme.windowBorder}\" rx=\"4\" ry=\"4\" />\n    \n    <!-- Terminal window background -->\n    <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${calculatedHeight - 2}\" fill=\"${theme.background}\" />\n    \n    <!-- Terminal header -->\n    <rect x=\"1\" y=\"1\" width=\"${config.width - 2}\" height=\"${headerHeight}\" fill=\"${theme.headerBg}\" />\n    <circle cx=\"20\" cy=\"${headerHeight/2}\" r=\"6\" fill=\"#FF5F56\" /> <!-- Close -->\n    <circle cx=\"40\" cy=\"${headerHeight/2}\" r=\"6\" fill=\"#FFBD2E\" /> <!-- Minimize -->\n    <circle cx=\"60\" cy=\"${headerHeight/2}\" r=\"6\" fill=\"#27C93F\" /> <!-- Expand -->\n    <text x=\"${config.width / 2}\" y=\"${headerHeight/2 + 5}\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\">\n      ${escapeXml(studentData.login)}@42 — skills\n    </text>\n  `;\n  \n  // Top bar\n  svg += `\n    <rect x=\"1\" y=\"${headerHeight + 1}\" width=\"${config.width - 2}\" height=\"${topBarHeight}\" fill=\"${theme.topBarBg}\" />\n  `;\n  \n  // Command line\n  svg += `\n    <g transform=\"translate(12, ${headerHeight + topBarHeight + 25})\" class=\"terminal-font\">\n      <text font-size=\"14\">\n        <tspan fill=\"${theme.promptUser}\">jou</tspan>\n        <tspan fill=\"${theme.promptHost}\">@42:~$</tspan>\n        <tspan dx=\"8\" fill=\"${theme.commandText}\">ls -la skills</tspan>\n      </text>\n    </g>\n  `;\n  \n  // Table header with separator line\n  const tableY = headerHeight + topBarHeight + commandHeight;\n  svg += `\n    <line x1=\"1\" y1=\"${tableY}\" x2=\"${config.width - 1}\" y2=\"${tableY}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />\n  `;\n  \n  // Column positions\n  const skillColX = 12;\n  const levelColX = Math.round(config.width * 0.6) - 100;\n  const descColX = Math.round(config.width * 0.6);\n  \n  // Table headers\n  svg += `\n    <g transform=\"translate(0, ${tableY + 28})\" class=\"terminal-font\">\n      <text font-size=\"13\" font-weight=\"bold\">\n        <tspan x=\"${skillColX}\" fill=\"${theme.skillName}\">SKILL</tspan>\n        <tspan x=\"${levelColX}\" fill=\"${theme.tableHeaderText}\">LEVEL</tspan>\n        <tspan x=\"${descColX}\" fill=\"${theme.tableHeaderText}\">DESCRIPTION</tspan>\n      </text>\n    </g>\n    <line x1=\"1\" y1=\"${tableY + tableHeaderHeight - 5}\" x2=\"${config.width - 1}\" y2=\"${tableY + tableHeaderHeight - 5}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />\n  `;\n  \n  // Add skills directly from API data\n  let rowY = tableY + tableHeaderHeight;\n  \n  sortedSkills.forEach((skill, index) => {\n    // Add skill row - using raw API data without any additional descriptions\n    svg += `\n      <g transform=\"translate(0, ${rowY + config.lineHeight/2 + 5})\" class=\"terminal-font\">\n        <text font-size=\"13\">\n          <tspan x=\"${skillColX}\" fill=\"${theme.skillName}\">${escapeXml(skill.name)}</tspan>\n          <tspan x=\"${levelColX}\" fill=\"${theme.skillLevel}\">${skill.level.toFixed(2)}</tspan>\n          <tspan x=\"${descColX}\" fill=\"${theme.skillDesc}\"># Programming skill</tspan>\n        </text>\n      </g>\n    `;\n    \n    // Add separator line after each row\n    svg += `\n      <line x1=\"1\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width - 1}\" y2=\"${rowY + config.lineHeight}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />\n    `;\n    \n    rowY += config.lineHeight;\n  });\n  \n  // Footer\n  svg += `\n    <text x=\"${config.width/2}\" y=\"${calculatedHeight - 15}\" font-size=\"11\" text-anchor=\"middle\" fill=\"${theme.footerText}\" class=\"terminal-font\">\n      Generated with 42widgets • ${new Date().toISOString().split('T')[0]}\n    </text>\n  `;\n  \n  // Close SVG\n  svg += `</svg>`;\n  \n  return svg;\n}\n\n/**\n * Generate a simple terminal error message\n */\nexport function generateErrorSVG(message, themeName = 'dark') {\n  const theme = {\n    dark: {\n      background: '#151718',\n      windowBorder: '#000000',\n      headerBg: '#222222',\n      titleText: '#EEEEEE',\n      promptUser: '#87D441',\n      promptHost: '#87AFAF',\n      commandText: '#FFFFFF',\n      errorText: '#E06C75'\n    },\n    light: {\n      background: '#FFFFFF',\n      windowBorder: '#CCCCCC',\n      headerBg: '#F0F0F0',\n      titleText: '#333333',\n      promptUser: '#118811',\n      promptHost: '#555555',\n      commandText: '#000000',\n      errorText: '#CB2431'\n    }\n  }[themeName] || {\n    background: '#151718',\n    windowBorder: '#000000',\n    headerBg: '#222222',\n    titleText: '#EEEEEE',\n    promptUser: '#87D441',\n    promptHost: '#87AFAF',\n    commandText: '#FFFFFF',\n    errorText: '#E06C75'\n  };\n  \n  const width = 500;\n  const height = 200;\n  \n  return `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\n    <style>\n      .terminal-font { font-family: \"SFMono-Regular\", \"Menlo\", \"Monaco\", \"Consolas\", monospace; }\n    </style>\n    \n    <!-- Terminal window border -->\n    <rect width=\"${width}\" height=\"${height}\" fill=\"${theme.windowBorder}\" rx=\"4\" ry=\"4\" />\n    \n    <!-- Terminal window background -->\n    <rect x=\"1\" y=\"1\" width=\"${width - 2}\" height=\"${height - 2}\" fill=\"${theme.background}\" />\n    \n    <!-- Terminal header -->\n    <rect x=\"1\" y=\"1\" width=\"${width - 2}\" height=\"40\" fill=\"${theme.headerBg}\" />\n    <circle cx=\"20\" cy=\"20\" r=\"6\" fill=\"#FF5F56\" /> <!-- Close -->\n    <circle cx=\"40\" cy=\"20\" r=\"6\" fill=\"#FFBD2E\" /> <!-- Minimize -->\n    <circle cx=\"60\" cy=\"20\" r=\"6\" fill=\"#27C93F\" /> <!-- Expand -->\n    <text x=\"${width / 2}\" y=\"25\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\">\n      error — bash\n    </text>\n    \n    <!-- Command prompt -->\n    <text x=\"15\" y=\"70\" font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">user</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:~$</tspan>\n      <tspan dx=\"8\" fill=\"${theme.commandText}\">skills --user</tspan>\n    </text>\n    \n    <!-- Error message -->\n    <text x=\"15\" y=\"105\" font-size=\"14\" fill=\"${theme.errorText}\" class=\"terminal-font\">\n      <tspan>Error: ${escapeXml(message)}</tspan>\n    </text>\n    \n    <!-- Footer -->\n    <text x=\"${width/2}\" y=\"${height - 20}\" font-size=\"11\" text-anchor=\"middle\" fill=\"#555555\" class=\"terminal-font\">\n      Please try again with a valid username\n    </text>\n  </svg>\n  `;\n}\n\nexport default {\n  generateTerminalSkills,\n  generateErrorSVG\n};"
    },
    {
      "path": "lib/themes.js",
      "content": "/**\n * Widget theme configurations\n */\nexport const themes = {\n  // Dark theme (default)\n  dark: {\n    name: 'Dark',\n    colors: {\n      background: '#1e293b',       // slate-800\n      text: '#f8fafc',             // slate-50\n      textSecondary: '#cbd5e1',    // slate-300\n      cardBackground: '#334155',   // slate-700\n      border: '#475569',           // slate-600\n      accent: '#3b82f6',           // blue-500\n      success: '#22c55e',          // green-500\n      warning: '#eab308',          // yellow-500\n      danger: '#ef4444',           // red-500\n      // Progress bar backgrounds\n      progressBg: '#1e293b',       // slate-800\n      highScore: '#22c55e',        // green-500\n      mediumScore: '#3b82f6',      // blue-500\n      lowScore: '#eab308',         // yellow-500\n      failScore: '#ef4444'         // red-500\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  },\n  \n  // Light theme\n  light: {\n    name: 'Light',\n    colors: {\n      background: '#f8fafc',       // slate-50\n      text: '#1e293b',             // slate-800\n      textSecondary: '#475569',    // slate-600\n      cardBackground: '#f1f5f9',   // slate-100\n      border: '#cbd5e1',           // slate-300\n      accent: '#2563eb',           // blue-600\n      success: '#16a34a',          // green-600\n      warning: '#ca8a04',          // yellow-600\n      danger: '#dc2626',           // red-600\n      // Progress bar backgrounds\n      progressBg: '#e2e8f0',       // slate-200\n      highScore: '#16a34a',        // green-600\n      mediumScore: '#2563eb',      // blue-600\n      lowScore: '#ca8a04',         // yellow-600\n      failScore: '#dc2626'         // red-600\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  }\n};\n\n/**\n * Get color for skill level\n */\nexport function getSkillColor(value, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  \n  if (value >= 8) return theme.colors.highScore;\n  if (value >= 6) return theme.colors.mediumScore;\n  if (value >= 4) return theme.colors.lowScore;\n  return theme.colors.failScore;\n}\n\nexport default themes;"
    },
    {
      "path": "next.config.mjs",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    // Enable React's strict mode for development\n    reactStrictMode: true,\n    \n    // Configure for serverless/edge deployment if needed\n    // output: 'standalone',\n  };\n  \n  export default nextConfig;"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"42-widgets\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"next\": \"15.2.4\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/postcss\": \"^4\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss\": \"^8.4.31\",\n    \"tailwindcss\": \"^3.3.5\"\n  }\n}"
    },
    {
      "path": "postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}"
    },
    {
      "path": "postcss.config.mjs",
      "content": "const config = {\n  plugins: [\"@tailwindcss/postcss\"],\n};\n\nexport default config;\n"
    },
    {
      "path": "tailwind.config.js",
      "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./lib/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}"
    }
  ]
}