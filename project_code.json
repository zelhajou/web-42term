{
  "files": [
    {
      "path": ".env.local",
      "content": "# .env.local\n\n# 42 API credentials\nNEXT_PUBLIC_42_API_URL=https://api.intra.42.fr/v2\nFT_CLIENT_ID=u-s4t2ud-3ea24e9ed293f8655a8d8da5a1baec9b372b9dd1c795a79e246436c7335c5dfe\nFT_CLIENT_SECRET=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\n\n# App configuration\nNEXT_PUBLIC_APP_URL=http://localhost:3000"
    },
    {
      "path": ".gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# environment variables\n.env*\n!.env.example\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\nproject_code.json\n"
    },
    {
      "path": "app/api/student/[username]/route.js",
      "content": "import { NextResponse } from 'next/server';\nimport { fetchStudentData } from '@/lib/api';\n\n/**\n * API handler for fetching student data\n */\nexport async function GET(request, { params }) {\n  try {\n    const resolvedParams = await Promise.resolve(params);\n    const { username } = resolvedParams;\n    \n    // Debug info - log environment variables availability\n    console.log('Environment check:', {\n      apiUrlExists: !!process.env.NEXT_PUBLIC_42_API_URL,\n      clientIdExists: !!process.env.FT_CLIENT_ID,\n      clientSecretExists: !!process.env.FT_CLIENT_SECRET\n    });\n    \n    // Get student data from API\n    const studentData = await fetchStudentData(username);\n    \n    // Return the full student data\n    return NextResponse.json(studentData);\n  } catch (error) {\n    console.error('API Error:', error);\n    return NextResponse.json(\n      { error: error.message || 'Failed to fetch student data' },\n      { status: 500 }\n    );\n  }\n}"
    },
    {
      "path": "app/api/widget/[type]/[username]/route.js",
      "content": "// app/api/widget/skills/[username]/route.js\n\nimport { NextResponse } from 'next/server';\nimport { fetchStudentData } from '@/lib/api';\nimport { generateTerminalSkills, generateErrorSVG } from '@/lib/generators/terminalSkillsGenerator';\n\n/**\n * Cache control constants\n */\nconst CACHE_MAX_AGE = 60 * 60; // 1 hour\nconst STALE_WHILE_REVALIDATE = 60 * 60 * 24; // 1 day\n\n/**\n * API handler for the terminal-style skills widget\n */\nexport async function GET(request, { params }) {\n  try {\n    const resolvedParams = await Promise.resolve(params);\n    const { username } = resolvedParams;\n    const searchParams = request.nextUrl.searchParams;\n    \n    // Extract customization options\n    const theme = searchParams.get('theme') || 'dark';\n    const width = parseInt(searchParams.get('width'), 10) || 600;\n    const maxSkills = parseInt(searchParams.get('maxSkills'), 10) || 8;\n    \n    // Common headers for SVG response\n    const headers = {\n      'Content-Type': 'image/svg+xml; charset=utf-8',\n      'Cache-Control': `public, max-age=${CACHE_MAX_AGE}, stale-while-revalidate=${STALE_WHILE_REVALIDATE}`,\n      'Access-Control-Allow-Origin': '*',\n      'X-Content-Type-Options': 'nosniff',\n    };\n    \n    // Fetch student data\n    const decodedUsername = decodeURIComponent(username);\n    const studentData = await fetchStudentData(decodedUsername);\n    \n    // Generate SVG chart\n    const svgContent = generateTerminalSkills(studentData, theme, {\n      width,\n      maxSkills\n    });\n    \n    return new NextResponse(svgContent, { headers });\n  } catch (error) {\n    console.error('Widget generation error:', error);\n    \n    // Return an error SVG\n    const errorSvg = generateErrorSVG(error.message || 'Failed to generate widget');\n    \n    return new NextResponse(errorSvg, {\n      headers: { 'Content-Type': 'image/svg+xml; charset=utf-8' },\n      status: 500\n    });\n  }\n}"
    },
    {
      "path": "app/globals.css",
      "content": "/* app/globals.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 255, 255, 255;\n  --background-rgb: 15, 23, 42;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: rgb(var(--background-rgb));\n}\n\n/* Add smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}"
    },
    {
      "path": "app/layout.js",
      "content": "// app/layout.js\nimport './globals.css';\nimport { Inter } from 'next/font/google';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata = {\n  title: '42widgets | Beautiful Widgets for 42 School Students',\n  description: 'Generate beautiful widgets to showcase your 42 school achievements on GitHub and other platforms.',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head />\n      <body className={`${inter.className} bg-gray-900 text-white min-h-screen flex flex-col`} suppressHydrationWarning>\n        {children}\n      </body>\n    </html>\n  );\n}"
    },
    {
      "path": "app/page.js",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport TerminalSkillsDisplay from '@/components/student/TerminalSkillsDisplay';\nimport { generateTerminalSkills, generateErrorSVG } from '@/lib/generators/terminalSkillsGenerator';\n\nexport default function HomePage() {\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [svgWidget, setSvgWidget] = useState('');\n  const [currentUsername, setCurrentUsername] = useState('');\n  const [widgetType, setWidgetType] = useState('skills'); // 'skills' or 'projects'\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!username.trim()) {\n      setError('Please enter a valid username');\n      return;\n    }\n    \n    // Validate username format\n    if (!/^[a-z0-9-]+$/i.test(username)) {\n      setError('Please enter a valid 42 intra username (letters, numbers, and hyphens only)');\n      return;\n    }\n    \n    setIsLoading(true);\n    setError('');\n    \n    try {\n      // Fetch student data from our API with properly encoded username\n      const encodedUsername = encodeURIComponent(username.trim());\n      const response = await axios.get(`/api/student/${encodedUsername}`);\n      const data = response.data;\n      \n      // Generate the SVG widget based on selected type\n      let svg;\n      if (widgetType === 'skills') {\n        svg = generateTerminalSkills(data);\n      } else {\n        // For future project visualization\n        svg = generateTerminalSkills(data); // Placeholder until project viz is implemented\n      }\n      \n      setSvgWidget(svg);\n      setCurrentUsername(username);\n      \n    } catch (err) {\n      console.error('Error:', err);\n      \n      // Handle specific error types\n      let errorMessage = 'Error generating widget';\n      \n      if (err.response) {\n        if (err.response.status === 429) {\n          errorMessage = 'Rate limit exceeded. Please try again in a minute.';\n        } else if (err.response.status === 404) {\n          errorMessage = `Username '${username}' not found. Please check the spelling.`;\n        } else if (err.response.data?.error) {\n          errorMessage = err.response.data.error;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setSvgWidget(generateErrorSVG(errorMessage));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#121212] text-white flex flex-col\">\n      {/* Header */}\n      <header className=\"border-b border-[#2a2a2a] py-3 px-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <h1 className=\"text-lg font-mono font-bold\">\n            <span className=\"text-green-400\">$</span> \n            <span className=\"text-white\">42</span>\n            <span className=\"text-purple-400\">term</span>\n          </h1>\n          <a \n            href=\"https://github.com/42widgets/terminal\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            className=\"text-gray-500 hover:text-white transition-colors duration-200\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n              <path fillRule=\"evenodd\" d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\" clipRule=\"evenodd\" />\n            </svg>\n          </a>\n        </div>\n      </header>\n\n      {/* Main content */}\n      <div className=\"flex-grow flex max-w-7xl mx-auto w-full\">\n        {/* Left sidebar */}\n        <div className=\"w-[320px] flex-shrink-0 border-r border-[#2a2a2a] p-4\">\n          {/* Widget Type Toggle */}\n          <div className=\"mb-4 bg-[#1a1a1a] border border-[#333] rounded-md overflow-hidden flex\">\n            <button\n              onClick={() => setWidgetType('skills')}\n              className={`py-2 px-4 text-sm flex-1 ${widgetType === 'skills' ? 'bg-blue-600 text-white' : 'bg-[#1a1a1a] text-gray-400 hover:bg-[#252525]'}`}\n            >\n              Skills Terminal\n            </button>\n            <button\n              onClick={() => setWidgetType('projects')}\n              className={`py-2 px-4 text-sm flex-1 ${widgetType === 'projects' ? 'bg-blue-600 text-white' : 'bg-[#1a1a1a] text-gray-400 hover:bg-[#252525]'}`}\n            >\n              Projects Terminal\n            </button>\n          </div>\n          \n          {/* Username Input */}\n          <div className=\"mb-5\">\n            <form onSubmit={handleSubmit} className=\"bg-[#1a1a1a] border border-[#333] p-3 rounded-md\">\n              <div className=\"relative mb-3\">\n                <div className=\"flex items-center absolute inset-y-0 left-0 pl-3 pointer-events-none\">\n                  <span className=\"text-gray-500\">@</span>\n                </div>\n                <input\n                  type=\"text\"\n                  id=\"username\"\n                  className=\"w-full pl-8 py-2 bg-[#242424] text-white border border-[#444] rounded-md focus:outline-none focus:border-blue-500 text-sm\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  placeholder=\"Enter 42 username\"\n                  required\n                />\n              </div>\n              \n              <button\n                type=\"submit\"\n                className={`w-full py-2 rounded-md text-white font-medium text-sm transition-colors ${\n                  isLoading ? 'bg-gray-700 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'\n                }`}\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <span className=\"flex items-center justify-center\">\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                    Generating...\n                  </span>\n                ) : 'Generate Widget'}\n              </button>\n              \n              {error && (\n                <div className=\"mt-3 p-2 bg-red-900/30 border border-red-500/50 rounded text-red-300 text-xs\">\n                  <div className=\"flex items-start\">\n                    <svg className=\"h-4 w-4 text-red-400 mr-1.5 mt-0.5 flex-shrink-0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z\" clipRule=\"evenodd\" />\n                    </svg>\n                    {error}\n                  </div>\n                </div>\n              )}\n            </form>\n          </div>\n          \n          {/* Features Section */}\n          <div className=\"mb-5 bg-[#1a1a1a] border border-[#333] rounded-md p-3\">\n            <h3 className=\"uppercase text-xs text-gray-500 font-semibold mb-2 tracking-wider\">Features</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li className=\"flex items-center text-gray-300\">\n                <span className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center text-blue-400 mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                    <path fillRule=\"evenodd\" d=\"M3.25 3A2.25 2.25 0 001 5.25v9.5A2.25 2.25 0 003.25 17h13.5A2.25 2.25 0 0019 14.75v-9.5A2.25 2.25 0 0016.75 3H3.25zm.943 1.5h11.614a.75.75 0 01.75.75v10.5a.75.75 0 01-.75.75H4.193a.75.75 0 01-.75-.75V5.25a.75.75 0 01.75-.75z\" clipRule=\"evenodd\" />\n                  </svg>\n                </span>\n                Terminal-style visualization\n              </li>\n              <li className=\"flex items-center text-gray-300\">\n                <span className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center text-green-400 mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                    <path d=\"M15.98 1.804a1 1 0 00-1.96 0l-.24 1.192a1 1 0 01-.784.785l-1.192.238a1 1 0 000 1.962l1.192.238a1 1 0 01.785.785l.238 1.192a1 1 0 001.962 0l.238-1.192a1 1 0 01.785-.785l1.192-.238a1 1 0 000-1.962l-1.192-.238a1 1 0 01-.785-.785l-.238-1.192zM6.949 5.684a1 1 0 00-1.898 0l-.683 2.051a1 1 0 01-.633.633l-2.051.683a1 1 0 000 1.898l2.051.684a1 1 0 01.633.632l.683 2.051a1 1 0 001.898 0l.683-2.051a1 1 0 01.633-.633l2.051-.683a1 1 0 000-1.898l-2.051-.683a1 1 0 01-.633-.633L6.95 5.684z\" />\n                  </svg>\n                </span>\n                Color-coded by proficiency level\n              </li>\n              <li className=\"flex items-center text-gray-300\">\n                <span className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center text-purple-400 mr-2\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-4 h-4\">\n                    <path fillRule=\"evenodd\" d=\"M6.28 5.22a.75.75 0 010 1.06L2.56 10l3.72 3.72a.75.75 0 01-1.06 1.06L.97 10.53a.75.75 0 010-1.06l4.25-4.25a.75.75 0 011.06 0zm7.44 0a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L17.44 10l-3.72-3.72a.75.75 0 010-1.06z\" clipRule=\"evenodd\" />\n                  </svg>\n                </span>\n                GitHub profile ready\n              </li>\n            </ul>\n          </div>\n          \n          {/* How to use */}\n          <div className=\"bg-[#1a1a1a] border border-[#333] rounded-md p-3\">\n            <h3 className=\"uppercase text-xs text-gray-500 font-semibold mb-2 tracking-wider\">How to use</h3>\n            <ol className=\"list-decimal ml-5 text-sm space-y-1 text-gray-300\">\n              <li>Enter your 42 intra username</li>\n              <li>Select widget type (Skills/Projects)</li>\n              <li>Copy the markdown to your GitHub README</li>\n            </ol>\n          </div>\n        </div>\n        \n        {/* Main content area - Terminal Display */}\n        <div className=\"flex-grow p-6 flex items-center justify-center overflow-auto\">\n          {svgWidget ? (\n            <div className=\"flex flex-col max-w-full\">\n              <div className=\"bg-[#1a1a1a] border border-[#333] rounded-md p-4 mb-4 overflow-hidden\">\n                <div \n                  dangerouslySetInnerHTML={{ __html: svgWidget }} \n                  className=\"transform hover:scale-[1.02] transition-transform duration-300 flex justify-center\"\n                />\n              </div>\n              \n              <div className=\"flex gap-4 justify-between items-center bg-[#1a1a1a] border border-[#333] rounded-md p-3 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"text-xs text-gray-500\">THEME:</div>\n                  <div className=\"flex gap-1\">\n                    <button \n                      className=\"px-3 py-1 text-xs rounded bg-[#242424] text-gray-300 hover:bg-[#303030]\"\n                      onClick={() => window.dispatchEvent(new CustomEvent('set-theme', { detail: 'dark' }))}\n                    >\n                      Dark\n                    </button>\n                    <button \n                      className=\"px-3 py-1 text-xs rounded bg-[#242424] text-gray-300 hover:bg-[#303030]\"\n                      onClick={() => window.dispatchEvent(new CustomEvent('set-theme', { detail: 'light' }))}\n                    >\n                      Light\n                    </button>\n                  </div>\n                </div>\n                \n                <button \n                  className=\"px-4 py-1 text-xs rounded bg-blue-600 text-white hover:bg-blue-700\"\n                  onClick={() => {\n                    const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n                    const widgetUrl = `${baseUrl}/api/widget/${widgetType}/${encodeURIComponent(currentUsername)}?theme=dark`;\n                    const markdown = `![${currentUsername}'s 42 ${widgetType}](${widgetUrl})`;\n                    navigator.clipboard.writeText(markdown);\n                  }}\n                >\n                  Copy Markdown\n                </button>\n              </div>\n              \n              <div className=\"text-xs text-gray-500 mt-2 text-center\">\n                Tip: After adding to GitHub README, you may need to refresh your profile page to see changes.\n              </div>\n            </div>\n          ) : (\n            <div className=\"w-[800px] h-[500px] bg-[#1a1a1a] border border-[#333] rounded-md flex items-center justify-center\">\n              <div className=\"text-center max-w-md\">\n                <div className=\"text-gray-600 mb-6\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-300 mb-3\">Your Skills Terminal</h3>\n                <p className=\"text-gray-500 text-sm mb-4\">\n                  Get a beautiful terminal visualization of your 42 School skills to showcase on your GitHub profile.\n                </p>\n                <div className=\"inline-block bg-[#242424] px-4 py-2 rounded-md text-xs text-gray-400 font-mono\">\n                  @username:~$ ls -la skills --by-cursus\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-[#2a2a2a] py-3 text-center\">\n        <p className=\"text-gray-600 text-xs\">\n          Created with ❤️ • Not affiliated with 42 School • © {new Date().getFullYear()} 42widgets\n        </p>\n      </footer>\n    </div>\n  );\n}"
    },
    {
      "path": "components/student/TerminalSkillsDisplay.js",
      "content": "'use client';\n\nimport { useState } from 'react';\n\nexport default function TerminalSkillsDisplay({ svgWidget, username, widgetType = 'skills' }) {\n  const [copied, setCopied] = useState(false);\n  const [selectedTheme, setSelectedTheme] = useState('dark');\n  \n  // Generate GitHub embed code\n  const generateGithubCode = () => {\n    if (!username) return '';\n    \n    const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n    const widgetUrl = `${baseUrl}/api/widget/${widgetType}/${encodeURIComponent(username)}?theme=${selectedTheme}`;\n    \n    return `![${username}'s 42 ${widgetType}](${widgetUrl})`;\n  };\n  \n  // Copy to clipboard\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(generateGithubCode())\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => console.error('Failed to copy:', err));\n  };\n  \n  if (!svgWidget) return null;\n  \n  return (\n    <div className=\"w-full bg-[#1a1a1a] border border-[#333] rounded-md p-4 h-full flex flex-col\">\n      {/* Widget Preview */}\n      <div className=\"border border-[#333] rounded-md p-2 bg-[#121212] mb-4 overflow-auto flex-grow flex items-center justify-center\">\n        <div \n          dangerouslySetInnerHTML={{ __html: svgWidget }} \n          className=\"transform transition hover:scale-[1.01] duration-200\"\n        />\n      </div>\n      \n      <div className=\"space-y-3 flex-shrink-0\">\n        {/* Controls row with theme selector and copy button */}\n        <div className=\"flex gap-3 items-end\">\n          {/* Theme Selector */}\n          <div className=\"flex-grow\">\n            <label className=\"block text-[10px] text-gray-500 mb-1\">THEME</label>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => setSelectedTheme('dark')}\n                className={`px-2 py-1 rounded text-xs transition-colors flex-1 ${\n                  selectedTheme === 'dark' \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-[#242424] text-gray-400 hover:bg-[#2d2d2d]'\n                }`}\n              >\n                Dark\n              </button>\n              <button\n                onClick={() => setSelectedTheme('light')}\n                className={`px-2 py-1 rounded text-xs transition-colors flex-1 ${\n                  selectedTheme === 'light' \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-[#242424] text-gray-400 hover:bg-[#2d2d2d]'\n                }`}\n              >\n                Light\n              </button>\n            </div>\n          </div>\n          \n          {/* Copy button */}\n          <button\n            onClick={copyToClipboard}\n            className={`px-3 py-1 rounded text-white text-xs transition-colors h-[26px] flex items-center ${\n              copied \n                ? 'bg-green-600' \n                : 'bg-blue-600 hover:bg-blue-700'\n            }`}\n          >\n            {copied ? (\n              <span className=\"flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 mr-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n                Copied\n              </span>\n            ) : 'Copy Markdown'}\n          </button>\n        </div>\n        \n        {/* URL Preview */}\n        <div>\n          <label className=\"block text-[10px] text-gray-500 mb-1\">MARKDOWN CODE</label>\n          <div className=\"bg-[#242424] rounded text-xs text-gray-400 px-2 py-1.5 font-mono overflow-x-auto whitespace-nowrap\">\n            {generateGithubCode()}\n          </div>\n        </div>\n        \n        {/* New Tab Link */}\n        <div className=\"text-center\">\n          <a\n            href={`/api/widget/${widgetType}/${username}?theme=${selectedTheme}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center px-2 py-1 bg-[#242424] text-gray-400 rounded text-xs hover:bg-[#2d2d2d] transition-colors\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n            </svg>\n            Open in new tab\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "jsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"],\n      \"@/components/*\": [\"./components/*\"],\n      \"@/lib/*\": [\"./lib/*\"],\n      \"@/api/*\": [\"./lib/api/*\"],\n      \"@/config/*\": [\"./config/*\"],\n      \"@/themes\": [\"./lib/themes\"],\n      \"@/mock-data\": [\"./lib/mock-data\"],\n      \"@/generators/*\": [\"./lib/generators/*\"]\n    },\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"react\",\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": false,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \"**/*.js\",\n    \"**/*.jsx\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}"
    },
    {
      "path": "lib/api/index.js",
      "content": "import axios from 'axios';\n\n// Base API URLs\nconst API_URL = process.env.NEXT_PUBLIC_42_API_URL || \"https://api.intra.42.fr/v2\";\nconst TOKEN_URL = \"https://api.intra.42.fr/oauth/token\";\nconst CLIENT_ID = process.env.FT_CLIENT_ID;\nconst CLIENT_SECRET = process.env.FT_CLIENT_SECRET;\n\n// Cache the token to avoid unnecessary requests\nlet cachedToken = null;\nlet tokenExpiry = null;\n\n/**\n * Get an authentication token from the 42 API\n */\nexport async function getToken() {\n  // Check if we have a valid cached token\n  if (cachedToken && tokenExpiry && Date.now() < tokenExpiry) {\n    return cachedToken;\n  }\n\n  if (!CLIENT_ID || !CLIENT_SECRET) {\n    console.error('Missing 42 API credentials:', { \n      clientIdExists: !!CLIENT_ID, \n      clientSecretExists: !!CLIENT_SECRET \n    });\n    throw new Error('Missing 42 API credentials. Make sure FT_CLIENT_ID and FT_CLIENT_SECRET are set.');\n  }\n  \n  try {\n    console.log('Requesting token from 42 API...');\n    const response = await axios.post(TOKEN_URL, {\n      grant_type: \"client_credentials\",\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n    });\n\n    // Cache the token and set expiry (subtract 5 minutes as safety margin)\n    cachedToken = response.data.access_token;\n    tokenExpiry = Date.now() + (response.data.expires_in * 1000) - 300000;\n    console.log('Token obtained successfully');\n\n    return cachedToken;\n  } catch (error) {\n    console.error('Error getting 42 API token:', error);\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    throw new Error(`Failed to get 42 API token: ${error.message}`);\n  }\n}\n\n/**\n * Make an authenticated request to the 42 API with retry logic\n */\nexport async function api42Request(endpoint, options = {}, retryCount = 0) {\n  try {\n    const token = await getToken();\n    \n    const response = await axios({\n      url: `${API_URL}${endpoint}`,\n      headers: { \n        Authorization: `Bearer ${token}`,\n        ...options.headers\n      },\n      ...options\n    });\n    \n    return response.data;\n  } catch (error) {\n    // Handle rate limiting with exponential backoff\n    if (error.response && error.response.status === 429 && retryCount < 3) {\n      console.warn(`Rate limited on ${endpoint}, retry attempt ${retryCount + 1}...`);\n      \n      // Calculate backoff time: 2^retry * 1000ms + random jitter\n      const backoffTime = (Math.pow(2, retryCount) * 1000) + (Math.random() * 1000);\n      \n      // Wait for backoff time\n      await new Promise(resolve => setTimeout(resolve, backoffTime));\n      \n      // Retry the request\n      return api42Request(endpoint, options, retryCount + 1);\n    }\n    \n    console.error(`Error in API request ${endpoint}:`, error);\n    throw new Error(`Failed API request: ${error.response?.status || ''} ${error.message}`);\n  }\n}\n\n/**\n * Fetch comprehensive student data in one call\n */\nexport async function fetchStudentData(username) {\n  try {\n    // Fetch student basic profile\n    const userData = await api42Request(`/users/${username}`);\n    const userId = userData.id;\n    \n    // Make parallel requests for different data types\n    const [projectsData, coalitionsData] = await Promise.all([\n      api42Request(`/users/${userId}/projects_users`),\n      api42Request(`/users/${userId}/coalitions`).catch(() => [])\n    ]);\n    \n    // Process skills data\n    const cursusData = userData.cursus_users || [];\n    const skillsByCursus = {};\n    \n    for (const cursus of cursusData) {\n      const cursusName = cursus.cursus?.name || 'Unknown Cursus';\n      const skills = cursus.skills || [];\n      skillsByCursus[cursusName] = skills;\n    }\n    \n    // Process projects data\n    const projects = {\n      completed: [],\n      inProgress: [],\n      failed: []\n    };\n    \n    for (const project of projectsData) {\n      const projectInfo = {\n        id: project.id,\n        name: project.project?.name || 'Unknown Project',\n        status: project.status,\n        finalMark: project.final_mark,\n        validatedAt: project.validated_at,\n        markedAt: project[\"marked_at\"],\n        cursusName: project.cursus_ids?.length > 0 ? \n          project.cursus_ids[0].name : 'Unknown Cursus'\n      };\n      \n      if (project.status === 'finished' && project.validated) {\n        projects.completed.push(projectInfo);\n      } else if (project.status === 'in_progress') {\n        projects.inProgress.push(projectInfo);\n      } else {\n        projects.failed.push(projectInfo);\n      }\n    }\n    \n    // Process coalition data\n    let coalition = null;\n    if (coalitionsData && coalitionsData.length > 0) {\n      coalition = {\n        id: coalitionsData[0].id,\n        name: coalitionsData[0].name,\n        slug: coalitionsData[0].slug,\n        color: coalitionsData[0].color,\n        score: coalitionsData[0].score,\n        imageUrl: coalitionsData[0].image_url,\n        coverUrl: coalitionsData[0].cover_url\n      };\n    }\n    \n    // Return compiled student data\n    return {\n      id: userData.id,\n      login: userData.login,\n      displayName: userData.displayname || userData.login,\n      email: userData.email,\n      image: userData.image?.link,\n      location: userData.location,\n      correctionPoints: userData.correction_point,\n      wallet: userData.wallet,\n      createdAt: userData.created_at,\n      updatedAt: userData.updated_at,\n      skills: skillsByCursus,\n      projects,\n      coalition\n    };\n  } catch (error) {\n    console.error('Error fetching student data:', error);\n    throw new Error(`Failed to fetch student data: ${error.message}`);\n  }\n}"
    },
    {
      "path": "lib/generators/terminalSkillsGenerator.js",
      "content": "// Apply terminal-specific styling to error message\nconst errorSvg = `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${errorWidth}\" height=\"${errorHeight}\" viewBox=\"0 0 ${errorWidth} ${errorHeight}\">\n  <defs>\n    <!-- Define patterns and effects for terminal look -->\n    <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"4\" patternTransform=\"rotate(0)\">\n      <rect width=\"100%\" height=\"2\" fill=\"#000\" fill-opacity=\"0.05\" />\n    </pattern>\n    \n    <filter id=\"crt\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\n      <feGaussianBlur stdDeviation=\"1.5\" result=\"blur\" />\n      <feColorMatrix type=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\" result=\"contrast\" />\n      <feComposite in=\"SourceGraphic\" in2=\"contrast\" operator=\"atop\" />\n    </filter>\n    \n    <filter id=\"noise\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.80\" numOctaves=\"1\" seed=\"0\" stitchTiles=\"stitch\" result=\"noise\"/>\n      <feColorMatrix type=\"saturate\" values=\"0\" in=\"noise\" result=\"desaturatedNoise\"/>\n      <feComponentTransfer in=\"desaturatedNoise\" result=\"adjustedNoise\">\n        <feFuncA type=\"table\" tableValues=\"0 0.02\"/>\n      </feComponentTransfer>\n      <feBlend in=\"SourceGraphic\" in2=\"adjustedNoise\" mode=\"overlay\"/>\n    </filter>\n    \n    <linearGradient id=\"screenGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n      <stop offset=\"0%\" stop-color=\"${themeName === 'dark' ? '#1D1D1D' : '#F0F0F0'}\" stop-opacity=\"1\" />\n      <stop offset=\"100%\" stop-color=\"${themeName === 'dark' ? '#151515' : '#E6E6E6'}\" stop-opacity=\"1\" />\n    </linearGradient>\n  </defs>\n\n  <style>\n    .terminal-font { font-family: \"JetBrains Mono\", \"Hack\", \"Fira Code\", \"SFMono-Regular\", \"Menlo\", \"Monaco\", \"Consolas\", monospace; }\n    .cursor-blink {\n      animation: blink 1.2s infinite steps(1);\n    }\n    @keyframes blink {\n      0%, 49% { opacity: 1 }\n      50%, 100% { opacity: 0 }\n    }\n  </style>\n  \n  <!-- Terminal window with enhanced shadow -->\n  <filter id=\"window-shadow\">\n    <feDropShadow dx=\"0\" dy=\"4\" stdDeviation=\"6\" flood-opacity=\"0.5\" flood-color=\"#000000\" />\n  </filter>\n  \n  <!-- Base terminal outline -->\n  <rect width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"#000000\" rx=\"8\" ry=\"8\" filter=\"url(#window-shadow)\" />\n  \n  <!-- Terminal window background with gradient and scanlines -->\n  <rect x=\"2\" y=\"2\" width=\"${errorWidth - 4}\" height=\"${errorHeight - 4}\" fill=\"url(#screenGradient)\" rx=\"7\" ry=\"7\" />\n  <rect x=\"2\" y=\"2\" width=\"${errorWidth - 4}\" height=\"${errorHeight - 4}\" fill=\"url(#scanlines)\" rx=\"7\" ry=\"7\" opacity=\"0.2\" />\n  <rect x=\"2\" y=\"2\" width=\"${errorWidth - 4}\" height=\"${errorHeight - 4}\" filter=\"url(#noise)\" rx=\"7\" ry=\"7\" fill-opacity=\"0\" />\n  \n  <!-- Terminal header -->\n  <rect x=\"2\" y=\"2\" width=\"${errorWidth - 4}\" height=\"40\" fill=\"${theme.headerBg}\" rx=\"7\" ry=\"7\" />\n  \n  <!-- More realistic traffic lights -->\n  <g transform=\"translate(20, 22)\">\n    <circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n    <circle cx=\"20\" cy=\"0\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n    <circle cx=\"40\" cy=\"0\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n  </g>\n  \n  <text x=\"${errorWidth / 2}\" y=\"25\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    error — bash\n  </text>\n  \n  <!-- Command prompt -->\n  <g transform=\"translate(15, 70)\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">user</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"8\" fill=\"${theme.commandText}\">skills --user</tspan>\n      <tspan class=\"cursor-blink\" fill=\"${theme.promptUser}\" dx=\"3\">▋</tspan>\n    </text>\n  </g>\n  \n  <!-- Error message with styled terminal output -->\n  <g transform=\"translate(15, 95)\">\n    <text font-size=\"14\" fill=\"${theme.errorText}\" class=\"terminal-font\">\n      <tspan>bash: skills: command not found: ${escapeXml(message)}</tspan>\n    </text>\n  </g>\n  \n  <!-- Additional command output -->\n  <g transform=\"translate(15, 120)\">\n    <text font-size=\"13\" fill=\"${theme.commandText}\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">user</tspan>\n      <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"8\" fill=\"${theme.commandText}\">echo $?</tspan>\n    </text>\n  </g>\n  \n  <g transform=\"translate(15, 145)\">\n    <text font-size=\"13\" fill=\"${theme.errorText}\" class=\"terminal-font\">\n      <tspan>127</tspan>\n    </text>\n  </g>\n  \n  <!-- Footer hint -->\n  <g transform=\"translate(15, ${errorHeight - 20})\">\n    <text font-size=\"11\" fill=\"${theme.footerText || theme.commandText}\" class=\"terminal-font\" opacity=\"0.7\">\n      <tspan>[Note: Please try again with a valid username]</tspan>\n    </text>\n  </g>\n  \n  <!-- CRT screen effect overlay -->\n  <rect x=\"2\" y=\"2\" width=\"${errorWidth - 4}\" height=\"${errorHeight - 4}\" rx=\"7\" ry=\"7\" fill=\"url(#scanlines)\" fill-opacity=\"0.1\" />\n  <rect x=\"2\" y=\"2\" width=\"${errorWidth - 4}\" height=\"${errorHeight - 4}\" rx=\"7\" ry=\"7\" fill=\"transparent\" filter=\"url(#crt)\" />\n  \n  <!-- Slight vignette effect -->\n  <radialGradient id=\"vignette\" cx=\"50%\" cy=\"50%\" r=\"65%\" fx=\"50%\" fy=\"50%\">\n    <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"0\" />\n    <stop offset=\"100%\" stop-color=\"#000000\" stop-opacity=\"0.3\" />\n  </radialGradient>\n  <rect x=\"0\" y=\"0\" width=\"${errorWidth}\" height=\"${errorHeight}\" fill=\"url(#vignette)\" rx=\"8\" ry=\"8\" />\n</svg>\n`;\n\nreturn errorSvg;/**\n* Enhanced Terminal Skills Visualization\n* Displays student skills in a realistic terminal UI\n*/\n\n/**\n* Escape special characters for XML/SVG\n*/\nfunction escapeXml(unsafe) {\nreturn unsafe?.replace(/[<>&'\"]/g, c => {\n  switch (c) {\n    case '<': return '&lt;';\n    case '>': return '&gt;';\n    case '&': return '&amp;';\n    case '\\'': return '&apos;';\n    case '\"': return '&quot;';\n  }\n}) || '';\n}\n\n/**\n* Generate terminal-style visualization with raw API data\n*/\nexport function generateTerminalSkills(studentData, themeName = 'dark', options = {}) {\n// Configure options with defaults\nconst config = {\n  width: options.width || 800,\n  height: options.height || 0,\n  maxSkills: options.maxSkills || 100, // High number to show all skills\n  lineHeight: options.lineHeight || 30,\n  ...options\n};\n\n// Extract skills directly from the API data without modification\nlet allSkills = [];\n\n// Collect all skills from all cursus\nObject.entries(studentData.skills || {}).forEach(([cursusName, cursusSkills]) => {\n  // Add cursus name to each skill for better organization\n  const cursusTaggedSkills = cursusSkills.map(skill => ({\n    ...skill,\n    cursus: cursusName\n  }));\n  allSkills = [...allSkills, ...cursusTaggedSkills];\n});\n\n// If no skills found, show error\nif (allSkills.length === 0) {\n  return generateErrorSVG('No skills data available', themeName);\n}\n\n// Sort skills by level\nconst sortedSkills = allSkills\n  .sort((a, b) => b.level - a.level)\n  .slice(0, config.maxSkills);\n\n// Group skills by cursus for organization and height calculation\nconst skillsByCursus = {};\nsortedSkills.forEach(skill => {\n  if (!skillsByCursus[skill.cursus]) {\n    skillsByCursus[skill.cursus] = [];\n  }\n  skillsByCursus[skill.cursus].push(skill);\n});\n\n// Calculate required height\nconst headerHeight = 40; \nconst topBarHeight = 28;\nconst commandHeight = 40;\nconst tableHeaderHeight = 40;\n// Add extra space for cursus headers\nconst cursusHeadersHeight = Object.keys(skillsByCursus).length * config.lineHeight;\nconst skillsRowsHeight = sortedSkills.length * config.lineHeight;\nconst bottomPadding = 40;\n\nconst calculatedHeight = headerHeight + topBarHeight + commandHeight + tableHeaderHeight + cursusHeadersHeight + skillsRowsHeight + bottomPadding;\n\n// Color scheme based on theme\nconst colors = {\n  dark: {\n    background: '#1E2127',         // Richer dark background\n    windowBorder: '#14161A',       // Darker border\n    headerBg: '#282C34',           // Header background\n    titleText: '#E5E9F0',          // Title text\n    topBarBg: '#323842',           // Top bar\n    promptUser: '#8BE9FD',         // Cyan username (Dracula-inspired)\n    promptHost: '#BD93F9',         // Purple host (Dracula-inspired)\n    promptPath: '#50FA7B',         // Green path\n    commandText: '#F8F8F2',        // Command text\n    tableBorder: '#3B4048',        // Table border\n    tableHeaderText: '#FF79C6',    // Pink header (Dracula-inspired)\n    skillName: '#61AFEF',          // Blue skill name\n    levelHigh: '#50FA7B',          // Bright green for high level\n    levelMedium: '#F1FA8C',        // Yellow for medium level\n    levelLow: '#BD93F9',           // Purple for low level (less alarming than red)\n    skillCursus: '#6272A4',        // Muted blue-purple for cursus\n    footerText: '#6272A4'          // Footer text\n  },\n  light: {\n    background: '#F8F9FC',         // Off-white background\n    windowBorder: '#E2E8F0',       // Light border\n    headerBg: '#EDF2F7',           // Header background\n    titleText: '#2D3748',          // Title text\n    topBarBg: '#E2E8F0',           // Top bar\n    promptUser: '#2B6CB0',         // Blue username\n    promptHost: '#6B46C1',         // Purple host\n    promptPath: '#2F855A',         // Green path\n    commandText: '#1A202C',        // Command text\n    tableBorder: '#CBD5E0',        // Table border\n    tableHeaderText: '#805AD5',    // Purple header\n    skillName: '#3182CE',          // Blue skill name\n    levelHigh: '#38A169',          // Green for high level\n    levelMedium: '#D69E2E',        // Yellow for medium level\n    levelLow: '#6B46C1',           // Purple for low level\n    skillCursus: '#718096',        // Gray-blue for cursus\n    footerText: '#718096'          // Footer text\n  }\n};\n\nconst theme = colors[themeName] || colors.dark;\n\n// Get username and format for display\nconst username = studentData.login || 'user';\n\n// Start SVG\nlet svg = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${config.width}\" height=\"${calculatedHeight}\" viewBox=\"0 0 ${config.width} ${calculatedHeight}\">\n  <defs>\n    <!-- Define patterns and effects -->\n    <pattern id=\"scanlines\" patternUnits=\"userSpaceOnUse\" width=\"100%\" height=\"4\" patternTransform=\"rotate(0)\">\n      <rect width=\"100%\" height=\"2\" fill=\"#000\" fill-opacity=\"0.05\" />\n    </pattern>\n    \n    <filter id=\"crt\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"120%\">\n      <feGaussianBlur stdDeviation=\"1.5\" result=\"blur\" />\n      <feColorMatrix type=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\" result=\"contrast\" />\n      <feComposite in=\"SourceGraphic\" in2=\"contrast\" operator=\"atop\" />\n    </filter>\n    \n    <filter id=\"noise\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\n      <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.80\" numOctaves=\"1\" seed=\"0\" stitchTiles=\"stitch\" result=\"noise\"/>\n      <feColorMatrix type=\"saturate\" values=\"0\" in=\"noise\" result=\"desaturatedNoise\"/>\n      <feComponentTransfer in=\"desaturatedNoise\" result=\"adjustedNoise\">\n        <feFuncA type=\"table\" tableValues=\"0 0.02\"/>\n      </feComponentTransfer>\n      <feBlend in=\"SourceGraphic\" in2=\"adjustedNoise\" mode=\"overlay\"/>\n    </filter>\n    \n    <filter id=\"textGlow\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"1.5\" result=\"blur\" />\n      <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n    </filter>\n    \n    <filter id=\"cursorGlow\" x=\"-300%\" y=\"-300%\" width=\"600%\" height=\"600%\">\n      <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"2.5\" result=\"blur\"/>\n      <feColorMatrix in=\"blur\" type=\"matrix\" values=\"0 0 0 0 0.5 0 0 0 0 1 0 0 0 0 0.2 0 0 0 1 0\" result=\"glow\"/>\n      <feBlend in=\"SourceGraphic\" in2=\"glow\" mode=\"overlay\"/>\n    </filter>\n    \n    <linearGradient id=\"screenGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n      <stop offset=\"0%\" stop-color=\"${themeName === 'dark' ? '#1D1D1D' : '#F0F0F0'}\" stop-opacity=\"1\" />\n      <stop offset=\"100%\" stop-color=\"${themeName === 'dark' ? '#151515' : '#E6E6E6'}\" stop-opacity=\"1\" />\n    </linearGradient>\n  </defs>\n  \n  <style>\n    .terminal-font { font-family: \"JetBrains Mono\", \"Hack\", \"Fira Code\", \"SFMono-Regular\", \"Menlo\", \"Monaco\", \"Consolas\", monospace; }\n    .username { fill: ${theme.promptUser}; }\n    .cursor-blink {\n      animation: blink 1.2s infinite steps(1);\n    }\n    @keyframes blink {\n      0%, 49% { opacity: 1 }\n      50%, 100% { opacity: 0 }\n    }\n  </style>\n  \n  <!-- Terminal window with enhanced shadow -->\n  <filter id=\"window-shadow\">\n    <feDropShadow dx=\"0\" dy=\"4\" stdDeviation=\"6\" flood-opacity=\"0.5\" flood-color=\"#000000\" />\n  </filter>\n  \n  <!-- Base terminal outline -->\n  <rect width=\"${config.width}\" height=\"${calculatedHeight}\" fill=\"#000000\" rx=\"8\" ry=\"8\" filter=\"url(#window-shadow)\" />\n  \n  <!-- Terminal window background with gradient and scanlines -->\n  <rect x=\"2\" y=\"2\" width=\"${config.width - 4}\" height=\"${calculatedHeight - 4}\" fill=\"url(#screenGradient)\" rx=\"7\" ry=\"7\" />\n  <rect x=\"2\" y=\"2\" width=\"${config.width - 4}\" height=\"${calculatedHeight - 4}\" fill=\"url(#scanlines)\" rx=\"7\" ry=\"7\" opacity=\"0.2\" />\n  <rect x=\"2\" y=\"2\" width=\"${config.width - 4}\" height=\"${calculatedHeight - 4}\" filter=\"url(#noise)\" rx=\"7\" ry=\"7\" fill-opacity=\"0\" />\n  \n  <!-- Terminal header -->\n  <rect x=\"2\" y=\"2\" width=\"${config.width - 4}\" height=\"${headerHeight}\" fill=\"${theme.headerBg}\" rx=\"7\" ry=\"7\" />\n  \n  <!-- More realistic traffic lights -->\n  <g id=\"traffic-lights\" transform=\"translate(20, ${headerHeight/2})\">\n    <circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"#FF5F56\" stroke=\"#E0443E\" stroke-width=\"0.5\" />\n    <circle cx=\"20\" cy=\"0\" r=\"6\" fill=\"#FFBD2E\" stroke=\"#DEA123\" stroke-width=\"0.5\" />\n    <circle cx=\"40\" cy=\"0\" r=\"6\" fill=\"#27C93F\" stroke=\"#1AAB29\" stroke-width=\"0.5\" />\n  </g>\n  \n  <!-- Terminal title -->\n  <text x=\"${config.width / 2}\" y=\"${headerHeight/2 + 5}\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    ${escapeXml(username)}@42 — skills\n  </text>\n`;\n\n// Top bar\nsvg += `\n  <rect x=\"1\" y=\"${headerHeight + 1}\" width=\"${config.width - 2}\" height=\"${topBarHeight}\" fill=\"${theme.topBarBg}\" />\n`;\n\n// Command line with blinking cursor - more authentic terminal look\nconst prompt = `${escapeXml(username)}@42:~$ `;\nconst command = `ls -la skills --by-cursus | grep -v \"\\\\.\" | sort`;\n\nsvg += `\n  <g transform=\"translate(12, ${headerHeight + topBarHeight + 25})\">\n    <text font-size=\"14\" class=\"terminal-font\">\n      <tspan class=\"username\">${prompt}</tspan>\n      <tspan fill=\"${theme.commandText}\">${command}</tspan>\n      <tspan class=\"cursor-blink\" fill=\"${theme.promptUser}\">▋</tspan>\n    </text>\n  </g>\n`;\n\n// Table header with separator line\nconst tableY = headerHeight + topBarHeight + commandHeight;\nsvg += `\n  <line x1=\"1\" y1=\"${tableY}\" x2=\"${config.width - 1}\" y2=\"${tableY}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />\n`;\n\n// Column positions - adjust based on description availability\nlet hasDescriptions = false;\n\n// Check if any skill has a description\nfor (const cursusSkills of Object.values(skillsByCursus)) {\n  for (const skill of cursusSkills) {\n    if (skill.description) {\n      hasDescriptions = true;\n      break;\n    }\n  }\n  if (hasDescriptions) break;\n}\n\n// Column positions - adjust for better alignment\nconst skillColX = 12;\nconst levelColX = Math.round(config.width * 0.5) - 50; // Align level column to center\nconst descColX = Math.round(config.width * 0.7);\n\n// Table headers\nsvg += `\n  <g transform=\"translate(0, ${tableY + 28})\">\n    <text font-size=\"13\" font-weight=\"bold\" class=\"terminal-font\">\n      <tspan x=\"${skillColX}\" fill=\"${theme.tableHeaderText}\">SKILL</tspan>\n      <tspan x=\"${levelColX}\" fill=\"${theme.tableHeaderText}\">LEVEL</tspan>\n      ${hasDescriptions ? `<tspan x=\"${descColX}\" fill=\"${theme.tableHeaderText}\">DESCRIPTION</tspan>` : ''}\n    </text>\n  </g>\n  <line x1=\"1\" y1=\"${tableY + tableHeaderHeight - 5}\" x2=\"${config.width - 1}\" y2=\"${tableY + tableHeaderHeight - 5}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />\n`;\n\n// Add skills grouped by cursus\nlet rowY = tableY + tableHeaderHeight;\n\n// Process each cursus group\nObject.entries(skillsByCursus).forEach(([cursusName, cursusSkills]) => {\n  // Add cursus header with even more terminal-style formatting\n  svg += `\n    <g transform=\"translate(0, ${rowY + config.lineHeight/2 + 5})\">\n      <text font-size=\"14\" class=\"terminal-font\">\n        <tspan x=\"${skillColX}\" fill=\"${theme.skillCursus}\">/* ${escapeXml(cursusName)} */</tspan>\n      </text>\n    </g>\n  `;\n  \n  // Add separator line with dotted style for more authentic terminal feel\n  svg += `\n    <line x1=\"12\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width - 12}\" y2=\"${rowY + config.lineHeight}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" stroke-dasharray=\"2,1\" opacity=\"0.5\" />\n  `;\n  \n  rowY += config.lineHeight;\n  \n  // Add skills for this cursus\n  cursusSkills.forEach(skill => {\n    // Calculate level color based on value\n    let levelColor = theme.levelLow;\n    if (skill.level >= 8) {\n      levelColor = theme.levelHigh;\n    } else if (skill.level >= 5) {\n      levelColor = theme.levelMedium;\n    }\n    \n    // Add skill row with improved space-efficient visualization\n    const skillRowY = rowY + config.lineHeight/2 + 5;\n    \n    // Create a more compact visualization using color only\n    svg += `\n      <g transform=\"translate(0, ${skillRowY})\">\n        <text font-size=\"13\" class=\"terminal-font\">\n          <tspan x=\"${skillColX}\" fill=\"${theme.skillName}\">${escapeXml(skill.name)}</tspan>\n          <tspan x=\"${levelColX}\" fill=\"${levelColor}\" text-anchor=\"end\">${skill.level.toFixed(2)}</tspan>\n          ${skill.description ? `<tspan x=\"${descColX}\" fill=\"${theme.skillCursus}\">${escapeXml(skill.description)}</tspan>` : ''}\n        </text>\n      </g>\n    `;\n    \n    // Add subtle terminal-style row separator\n    svg += `\n      <line x1=\"12\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width - 12}\" y2=\"${rowY + config.lineHeight}\" stroke=\"${theme.tableBorder}\" stroke-width=\"0.5\" opacity=\"0.2\" />\n    `;\n    \n    // Add separator line after each row\n    svg += `\n      <line x1=\"1\" y1=\"${rowY + config.lineHeight}\" x2=\"${config.width - 1}\" y2=\"${rowY + config.lineHeight}\" stroke=\"${theme.tableBorder}\" stroke-width=\"1\" />\n    `;\n    \n    rowY += config.lineHeight;\n  });\n});\n\n// Footer with terminal-style output\nsvg += `\n  <g transform=\"translate(12, ${calculatedHeight - 28})\">\n    <text font-size=\"11\" class=\"terminal-font\">\n      <tspan fill=\"${theme.promptUser}\">${username}@42</tspan>\n      <tspan fill=\"${theme.commandText}\">:</tspan>\n      <tspan fill=\"${theme.promptPath}\">~$</tspan>\n      <tspan dx=\"5\" fill=\"${theme.commandText}\">echo $?</tspan>\n    </text>\n  </g>\n  \n  <g transform=\"translate(12, ${calculatedHeight - 12})\">\n    <text font-size=\"11\" class=\"terminal-font\">\n      <tspan fill=\"${theme.commandText}\">0</tspan>\n    </text>\n  </g>\n  \n  <text x=\"${config.width - 12}\" y=\"${calculatedHeight - 12}\" text-anchor=\"end\" fill=\"${theme.footerText}\" font-size=\"10\" class=\"terminal-font\">\n    Generated with 42widgets • ${new Date().toISOString().split('T')[0]}\n  </text>\n`;\n\n// Overall terminal effect with scan lines and filter for more realism\nsvg += `\n  <!-- CRT screen effect overlay -->\n  <rect x=\"2\" y=\"2\" width=\"${config.width - 4}\" height=\"${calculatedHeight - 4}\" rx=\"7\" ry=\"7\" fill=\"url(#scanlines)\" fill-opacity=\"0.2\" />\n  <rect x=\"2\" y=\"2\" width=\"${config.width - 4}\" height=\"${calculatedHeight - 4}\" rx=\"7\" ry=\"7\" fill=\"transparent\" filter=\"url(#crt)\" />\n  \n  <!-- Slight vignette effect -->\n  <radialGradient id=\"vignette\" cx=\"50%\" cy=\"50%\" r=\"65%\" fx=\"50%\" fy=\"50%\">\n    <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"0\" />\n    <stop offset=\"100%\" stop-color=\"#000000\" stop-opacity=\"0.3\" />\n  </radialGradient>\n  <rect x=\"0\" y=\"0\" width=\"${config.width}\" height=\"${calculatedHeight}\" fill=\"url(#vignette)\" rx=\"8\" ry=\"8\" />\n</svg>`;\n}\n\n/**\n* Generate a terminal error message\n*/\nexport function generateErrorSVG(message, themeName = 'dark') {\nconst errorWidth = 500;\nconst errorHeight = 200;\n\nconst theme = {\n  dark: {\n    background: '#151718',\n    windowBorder: '#000000',\n    headerBg: '#1A1D1E',\n    titleText: '#EEEEEE',\n    promptUser: '#8BE9FD',  // Cyan username (Dracula-inspired)\n    promptHost: '#BD93F9',  // Purple host (Dracula-inspired)\n    promptPath: '#50FA7B',  // Green path\n    commandText: '#F8F8F2', // Command text\n    errorText: '#FF5555'    // Error text color\n  },\n  light: {\n    background: '#FFFFFF',\n    windowBorder: '#CCCCCC',\n    headerBg: '#F0F0F0',\n    titleText: '#333333',\n    promptUser: '#2B6CB0',  // Blue username\n    promptHost: '#6B46C1',  // Purple host\n    promptPath: '#2F855A',  // Green path\n    commandText: '#1A202C', // Command text\n    errorText: '#E53E3E'    // Error text color\n  }\n}[themeName] || {\n  background: '#151718',\n  windowBorder: '#000000',\n  headerBg: '#1A1D1E',\n  titleText: '#EEEEEE',\n  promptUser: '#8BE9FD',  // Cyan username (Dracula-inspired)\n  promptHost: '#BD93F9',  // Purple host (Dracula-inspired)\n  promptPath: '#50FA7B',  // Green path\n  commandText: '#F8F8F2', // Command text\n  errorText: '#FF5555'    // Error text color\n};\n\nconst width = 500;\nconst height = 200;\n\nreturn `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\n  <defs>\n    <!-- Error message glow -->\n    <filter id=\"errorGlow\" x=\"-10%\" y=\"-10%\" width=\"120%\" height=\"140%\">\n      <feGaussianBlur stdDeviation=\"1\" result=\"blur\" />\n      <feFlood flood-color=\"#FF79C6\" flood-opacity=\"0.3\" result=\"color\" />\n      <feComposite in=\"color\" in2=\"blur\" operator=\"in\" result=\"glow\" />\n      <feComposite in=\"SourceGraphic\" in2=\"glow\" operator=\"over\" />\n    </filter>\n    \n    <!-- Subtle pattern for background -->\n    <pattern id=\"subtlePattern\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\" patternTransform=\"rotate(45)\">\n      <rect width=\"50\" height=\"50\" fill=\"${theme.background}\" />\n      <rect width=\"1\" height=\"1\" fill=\"${themeName === 'dark' ? '#2E3440' : '#E2E8F0'}\" x=\"0\" y=\"0\" />\n    </pattern>\n  </defs>\n\n  <style>\n    .terminal-font { font-family: \"JetBrains Mono\", \"SFMono-Regular\", \"Menlo\", \"Monaco\", \"Consolas\", monospace; }\n    .username { fill: ${theme.promptUser}; }\n    @keyframes blink { 0%, 100% { opacity: 0; } 50% { opacity: 1; } }\n    .cursor { animation: blink 1.2s infinite; }\n  </style>\n  \n  <!-- Terminal window with enhanced shadow -->\n  <filter id=\"window-shadow\">\n    <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"4\" flood-opacity=\"0.4\" flood-color=\"${themeName === 'dark' ? '#000000' : '#A0AEC0'}\" />\n  </filter>\n  <rect width=\"${width}\" height=\"${height}\" fill=\"${theme.windowBorder}\" rx=\"8\" ry=\"8\" filter=\"url(#window-shadow)\" />\n  \n  <!-- Terminal window background with subtle pattern -->\n  <rect x=\"1\" y=\"1\" width=\"${width - 2}\" height=\"${height - 2}\" fill=\"url(#subtlePattern)\" rx=\"7\" ry=\"7\" />\n  \n  <!-- Terminal header with solid color -->\n  <rect x=\"1\" y=\"1\" width=\"${width - 2}\" height=\"40\" fill=\"${theme.headerBg}\" rx=\"7\" ry=\"7\" />\n  \n  <!-- Traffic lights with subtle glow -->\n  <circle cx=\"20\" cy=\"20\" r=\"6\" fill=\"#FF5F56\">\n    <animate attributeName=\"opacity\" values=\"0.8;1;0.8\" dur=\"3s\" repeatCount=\"indefinite\" />\n  </circle>\n  <circle cx=\"40\" cy=\"20\" r=\"6\" fill=\"#FFBD2E\">\n    <animate attributeName=\"opacity\" values=\"0.8;1;0.8\" dur=\"3s\" repeatCount=\"indefinite\" begin=\"0.3s\" />\n  </circle>\n  <circle cx=\"60\" cy=\"20\" r=\"6\" fill=\"#27C93F\">\n    <animate attributeName=\"opacity\" values=\"0.8;1;0.8\" dur=\"3s\" repeatCount=\"indefinite\" begin=\"0.6s\" />\n  </circle>\n  \n  <text x=\"${width / 2}\" y=\"25\" text-anchor=\"middle\" fill=\"${theme.titleText}\" font-size=\"13\" class=\"terminal-font\" font-weight=\"bold\">\n    error — bash\n  </text>\n  \n  <!-- Command prompt -->\n  <text x=\"15\" y=\"70\" font-size=\"14\" class=\"terminal-font\">\n    <tspan class=\"username\">user</tspan>\n    <tspan fill=\"${theme.promptHost}\">@42:</tspan>\n    <tspan fill=\"${theme.promptPath}\">~$</tspan>\n    <tspan dx=\"8\" fill=\"${theme.commandText}\">skills --user</tspan>\n    <tspan class=\"cursor\" dx=\"4\">|</tspan>\n  </text>\n  \n  <!-- Error message with styled box -->\n  <rect x=\"10\" y=\"85\" width=\"${width - 20}\" height=\"40\" rx=\"4\" ry=\"4\" \n        fill=\"${themeName === 'dark' ? 'rgba(189, 147, 249, 0.1)' : 'rgba(183, 148, 244, 0.1)'}\" \n        stroke=\"${theme.promptHost}\" stroke-width=\"1\" stroke-opacity=\"0.3\" />\n  \n  <text x=\"20\" y=\"110\" font-size=\"14\" fill=\"${theme.promptHost}\" class=\"terminal-font\" filter=\"url(#errorGlow)\">\n    <tspan>⚠ Error: ${escapeXml(message)}</tspan>\n  </text>\n  \n  <!-- Footer -->\n  <rect x=\"1\" y=\"${height - 30}\" width=\"${width - 2}\" height=\"29\" \n        fill=\"${themeName === 'dark' ? '#252933' : '#EDF2F7'}\" opacity=\"0.7\" />\n  <text x=\"${width/2}\" y=\"${height - 10}\" font-size=\"11\" text-anchor=\"middle\" fill=\"${theme.footerText}\" class=\"terminal-font\">\n    Please try again with a valid username\n  </text>\n</svg>\n`;\n}\n\nexport default {\ngenerateTerminalSkills,\ngenerateErrorSVG\n};"
    },
    {
      "path": "lib/themes.js",
      "content": "/**\n * Widget theme configurations\n */\nexport const themes = {\n  // Dark theme (default)\n  dark: {\n    name: 'Dark',\n    colors: {\n      background: '#1e293b',       // slate-800\n      text: '#f8fafc',             // slate-50\n      textSecondary: '#cbd5e1',    // slate-300\n      cardBackground: '#334155',   // slate-700\n      border: '#475569',           // slate-600\n      accent: '#3b82f6',           // blue-500\n      success: '#22c55e',          // green-500\n      warning: '#eab308',          // yellow-500\n      danger: '#ef4444',           // red-500\n      // Progress bar backgrounds\n      progressBg: '#1e293b',       // slate-800\n      highScore: '#22c55e',        // green-500\n      mediumScore: '#3b82f6',      // blue-500\n      lowScore: '#eab308',         // yellow-500\n      failScore: '#ef4444'         // red-500\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  },\n  \n  // Light theme\n  light: {\n    name: 'Light',\n    colors: {\n      background: '#f8fafc',       // slate-50\n      text: '#1e293b',             // slate-800\n      textSecondary: '#475569',    // slate-600\n      cardBackground: '#f1f5f9',   // slate-100\n      border: '#cbd5e1',           // slate-300\n      accent: '#2563eb',           // blue-600\n      success: '#16a34a',          // green-600\n      warning: '#ca8a04',          // yellow-600\n      danger: '#dc2626',           // red-600\n      // Progress bar backgrounds\n      progressBg: '#e2e8f0',       // slate-200\n      highScore: '#16a34a',        // green-600\n      mediumScore: '#2563eb',      // blue-600\n      lowScore: '#ca8a04',         // yellow-600\n      failScore: '#dc2626'         // red-600\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  }\n};\n\n/**\n * Get color for skill level\n */\nexport function getSkillColor(value, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  \n  if (value >= 8) return theme.colors.highScore;\n  if (value >= 6) return theme.colors.mediumScore;\n  if (value >= 4) return theme.colors.lowScore;\n  return theme.colors.failScore;\n}\n\nexport default themes;"
    },
    {
      "path": "next.config.mjs",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    // Enable React's strict mode for development\n    reactStrictMode: true,\n    \n    // Configure for serverless/edge deployment if needed\n    // output: 'standalone',\n  };\n  \n  export default nextConfig;"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"42-widgets\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"next\": \"15.2.4\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/postcss\": \"^4\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss\": \"^8.4.31\",\n    \"tailwindcss\": \"^3.3.5\"\n  }\n}"
    },
    {
      "path": "postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}"
    },
    {
      "path": "postcss.config.mjs",
      "content": "const config = {\n  plugins: [\"@tailwindcss/postcss\"],\n};\n\nexport default config;\n"
    },
    {
      "path": "tailwind.config.js",
      "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./lib/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}"
    }
  ]
}