{
  "files": [
    {
      "path": ".env.local",
      "content": "# .env.local\n\n# 42 API credentials\nNEXT_PUBLIC_42_API_URL=https://api.intra.42.fr/v2\nFT_CLIENT_ID=u-s4t2ud-3ea24e9ed293f8655a8d8da5a1baec9b372b9dd1c795a79e246436c7335c5dfe\nFT_CLIENT_SECRET=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\n\n# App configuration\nNEXT_PUBLIC_APP_URL=http://localhost:3000"
    },
    {
      "path": ".gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# environment variables\n.env*\n!.env.example\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts"
    },
    {
      "path": "app/api/student/[username]/route.js",
      "content": "import { NextResponse } from 'next/server';\nimport { fetchStudentData } from '@/lib/api';\nimport { mockStudentData } from '@/lib/mock-data';\n\n// Check if we're in demo mode (no API credentials available)\nconst isDemoMode = !process.env.FT_CLIENT_ID || !process.env.FT_CLIENT_SECRET;\n\n/**\n * API handler for fetching student data\n */\nexport async function GET(request, { params }) {\n  try {\n    // Await params before destructuring (Next.js requirement)\n    const resolvedParams = await Promise.resolve(params);\n    const { username } = resolvedParams;\n    \n    // Debug info - log environment variables availability (not their values, just if they exist)\n    console.log('Environment check:', {\n      apiUrlExists: !!process.env.NEXT_PUBLIC_42_API_URL,\n      clientIdExists: !!process.env.FT_CLIENT_ID,\n      clientSecretExists: !!process.env.FT_CLIENT_SECRET,\n      isDemoMode\n    });\n    \n    // Get the specific data type from query params\n    const searchParams = request.nextUrl.searchParams;\n    const dataType = searchParams.get('dataType');\n    \n    let studentData;\n    \n    // If in demo mode, use mock data instead of calling the API\n    if (isDemoMode) {\n      console.log('Using mock data for', username);\n      studentData = JSON.parse(JSON.stringify(mockStudentData)); // Deep clone\n      studentData.login = username;\n      studentData.displayName = username.charAt(0).toUpperCase() + username.slice(1);\n    } else {\n      // Fetch comprehensive student data\n      studentData = await fetchStudentData(username);\n    }\n    \n    // Return only specific data if requested\n    if (dataType) {\n      switch (dataType) {\n        case 'skills':\n          return NextResponse.json({\n            login: studentData.login,\n            displayName: studentData.displayName,\n            image: studentData.image,\n            skills: studentData.skills\n          });\n        \n        case 'projects':\n          return NextResponse.json({\n            login: studentData.login,\n            displayName: studentData.displayName,\n            image: studentData.image,\n            projects: studentData.projects\n          });\n        \n        case 'coalition':\n          return NextResponse.json({\n            login: studentData.login,\n            displayName: studentData.displayName,\n            image: studentData.image,\n            coalition: studentData.coalition\n          });\n          \n        default:\n          break;\n      }\n    }\n    \n    // Return the full student data by default\n    return NextResponse.json(studentData);\n  } catch (error) {\n    console.error('API Error:', error);\n    return NextResponse.json(\n      { error: error.message || 'Failed to fetch student data' },\n      { status: 500 }\n    );\n  }\n}"
    },
    {
      "path": "app/api/widget/[type]/[username]/route.js",
      "content": "import { NextResponse } from 'next/server';\nimport { fetchStudentData } from '@/lib/api';\nimport { generateSkillsBars, generateErrorSVG } from '@/lib/generators/skillsGenerator';\nimport { generateGithubCompatibleSvg } from '@/lib/generators/githubSvgGenerator';\nimport { mockStudentData } from '@/lib/mock-data';\n\n// Check if we're in demo mode (no API credentials available)\nconst isDemoMode = !process.env.FT_CLIENT_ID || !process.env.FT_CLIENT_SECRET;\n\n/**\n * Cache control constants\n */\nconst CACHE_MAX_AGE = 60 * 60; // 1 hour\nconst STALE_WHILE_REVALIDATE = 60 * 60 * 24; // 1 day\n\n/**\n * API handler for widget generation\n */\nexport async function GET(request, { params }) {\n  try {\n    // Await params before destructuring (Next.js requirement)\n    const resolvedParams = await Promise.resolve(params);\n    const { type, username } = resolvedParams;\n    const searchParams = request.nextUrl.searchParams;\n    const theme = searchParams.get('theme') || 'dark';\n    \n    // Common headers\n    const headers = {\n      'Content-Type': 'image/svg+xml; charset=utf-8',\n      'Cache-Control': `public, max-age=${CACHE_MAX_AGE}, stale-while-revalidate=${STALE_WHILE_REVALIDATE}`,\n      // Allow cross-origin embedding (important for GitHub and other sites)\n      'Access-Control-Allow-Origin': '*',\n      // Additional headers to help with GitHub's Camo proxy\n      'X-Content-Type-Options': 'nosniff',\n      'Content-Security-Policy': \"default-src 'self'; style-src 'unsafe-inline'\",\n    };\n    \n    let studentData;\n    \n    // If in demo mode, use mock data instead of calling the API\n    if (isDemoMode) {\n      console.log('Using mock data for widget generation:', username);\n      studentData = JSON.parse(JSON.stringify(mockStudentData)); // Deep clone\n      studentData.login = username;\n      studentData.displayName = username.charAt(0).toUpperCase() + username.slice(1);\n    } else {\n      // Fetch student data (ensure username is properly decoded)\n      const decodedUsername = decodeURIComponent(username);\n      studentData = await fetchStudentData(decodedUsername);\n    }\n    \n    // Generate the appropriate widget based on type\n    let svgContent;\n    \n    switch (type) {\n      case 'skills-bars':\n        // Use GitHub-compatible SVG generator instead of the regular one\n        svgContent = generateGithubCompatibleSvg(studentData, theme);\n        break;\n      \n      default:\n        return NextResponse.json(\n          { error: 'Invalid widget type' },\n          { status: 400 }\n        );\n    }\n    \n    return new NextResponse(svgContent, { headers });\n  } catch (error) {\n    console.error('Widget generation error:', error);\n    \n    // Return an error SVG\n    const errorSvg = generateErrorSVG(error.message || 'Failed to generate widget');\n    \n    return new NextResponse(errorSvg, {\n      headers: { 'Content-Type': 'image/svg+xml; charset=utf-8' },\n      status: 500\n    });\n  }\n}"
    },
    {
      "path": "app/globals.css",
      "content": "/* app/globals.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 255, 255, 255;\n  --background-rgb: 15, 23, 42;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: rgb(var(--background-rgb));\n}\n\n/* Add smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}"
    },
    {
      "path": "app/layout.js",
      "content": "// app/layout.js\nimport './globals.css';\nimport { Inter } from 'next/font/google';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata = {\n  title: '42widgets | Beautiful Widgets for 42 School Students',\n  description: 'Generate beautiful widgets to showcase your 42 school achievements on GitHub and other platforms.',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <head />\n      <body className={`${inter.className} bg-gray-900 text-white min-h-screen flex flex-col`} suppressHydrationWarning>\n        {children}\n      </body>\n    </html>\n  );\n}"
    },
    {
      "path": "app/page.js",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport WidgetDisplay from '@/components/WidgetDisplay';\nimport { generateSkillsBars, generateErrorSVG } from '@/lib/generators/skillsGenerator';\n\nexport default function HomePage() {\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [svgWidget, setSvgWidget] = useState('');\n  const [currentUsername, setCurrentUsername] = useState('');\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!username.trim()) {\n      setError('Please enter a valid username');\n      return;\n    }\n    \n    // Validate username format\n    if (!/^[a-z0-9-]+$/i.test(username)) {\n      setError('Please enter a valid 42 intra username (letters, numbers, and hyphens only)');\n      return;\n    }\n    \n    setIsLoading(true);\n    setError('');\n    \n    try {\n      // Fetch student data from our API with properly encoded username\n      const encodedUsername = encodeURIComponent(username.trim());\n      const response = await axios.get(`/api/student/${encodedUsername}?dataType=skills`);\n      const data = response.data;\n      \n      // Generate the SVG widget\n      const svg = generateSkillsBars(data);\n      setSvgWidget(svg);\n      setCurrentUsername(username);\n      \n    } catch (err) {\n      console.error('Error:', err);\n      \n      // Handle specific error types\n      let errorMessage = 'Error generating widget';\n      \n      if (err.response) {\n        if (err.response.status === 429) {\n          errorMessage = 'Rate limit exceeded. Please try again in a minute.';\n        } else if (err.response.status === 404) {\n          errorMessage = `Username '${username}' not found. Please check the spelling.`;\n        } else if (err.response.data?.error) {\n          errorMessage = err.response.data.error;\n        }\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setSvgWidget(generateErrorSVG(errorMessage));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <header className=\"bg-gray-800 shadow-md\">\n        <div className=\"max-w-5xl mx-auto px-4 py-4\">\n          <h1 className=\"text-2xl font-bold text-blue-400\">42 Widgets</h1>\n        </div>\n      </header>\n\n      <main className=\"max-w-5xl mx-auto p-4 py-8\">\n        <div className=\"mb-8 text-center\">\n          <h2 className=\"text-3xl font-bold mb-2\">Generate Your 42 Widget</h2>\n          <p className=\"text-gray-300\">\n            Create beautiful widgets to showcase your 42 school skills on GitHub and other platforms.\n          </p>\n        </div>\n\n        {/* Form */}\n                  <div className=\"mb-8\">\n          <form onSubmit={handleSubmit} className=\"bg-gray-800 rounded-lg shadow-md p-6 max-w-md mx-auto\">\n            <div className=\"mb-4\">\n              <label htmlFor=\"username\" className=\"block text-gray-300 mb-2 font-medium\">\n                42 Intra Username\n              </label>\n              <input\n                type=\"text\"\n                id=\"username\"\n                className=\"w-full px-4 py-2 border rounded-md bg-gray-700 text-white border-gray-600\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"e.g. zelhajou\"\n                required\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              className={`\n                w-full py-2 px-4 rounded-md text-white font-medium\n                ${isLoading\n                  ? 'bg-gray-500 cursor-not-allowed'\n                  : 'bg-blue-600 hover:bg-blue-700'}`\n              }\n              disabled={isLoading}\n            >\n              {isLoading ? 'Generating...' : 'Generate Widget'}\n            </button>\n            \n            {error && (\n              <div className=\"mt-4 text-red-400\">\n                {error}\n              </div>\n            )}\n            \n            {!process.env.FT_CLIENT_ID && (\n              <div className=\"mt-4 p-3 bg-yellow-900/30 border border-yellow-700/50 rounded-md text-yellow-200 text-sm\">\n                <p><strong>Demo Mode:</strong> Running without 42 API credentials. Using mock data instead.</p>\n              </div>\n            )}\n          </form>\n        </div>\n\n        {/* Widget Display */}\n        {svgWidget && (\n          <WidgetDisplay svgWidget={svgWidget} username={currentUsername} />\n        )}\n\n        {/* How to use */}\n        <div className=\"mt-12 bg-gray-800 rounded-lg shadow-md p-6\">\n          <h3 className=\"text-xl font-bold mb-4\">How to Use</h3>\n          <ol className=\"list-decimal pl-5 space-y-2 text-gray-300\">\n            <li>Enter your 42 intra username</li>\n            <li>Generate the widget</li>\n            <li>Copy the markdown code and paste it into your GitHub README.md</li>\n          </ol>\n        </div>\n      </main>\n\n      <footer className=\"bg-gray-800 shadow-inner mt-12 py-6\">\n        <div className=\"max-w-5xl mx-auto px-4 text-center\">\n          <p className=\"text-gray-400 text-sm\">\n            Created with ❤️ • Not affiliated with 42 School\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}"
    },
    {
      "path": "components/WidgetDisplay.js",
      "content": "'use client';\n\nimport { useState } from 'react';\n\nexport default function WidgetDisplay({ svgWidget, username }) {\n  const [copied, setCopied] = useState(false);\n  \n  // Generate embed code\n  const generateEmbedCode = () => {\n    if (!username) return '';\n    // Make sure we're using the full, absolute URL (including http/https)\n    const baseUrl = window.location.origin;\n    const url = `${baseUrl}/api/widget/skills-bars/${username}?theme=dark`;\n    return `![42 skills bars](${url})`;\n  };\n  \n  // Copy embed code to clipboard\n  const copyToClipboard = () => {\n    const embedCode = generateEmbedCode();\n    \n    navigator.clipboard.writeText(embedCode)\n      .then(() => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      })\n      .catch(err => {\n        console.error('Failed to copy:', err);\n      });\n  };\n  \n  if (!svgWidget) return null;\n  \n  return (\n    <div className=\"bg-gray-800 rounded-lg shadow-md p-6 mb-8\">\n      <h3 className=\"text-xl font-bold mb-3\">Your Widget</h3>\n      \n      <div className=\"border border-gray-600 rounded-lg p-3 overflow-hidden mb-4\">\n        <div dangerouslySetInnerHTML={{ __html: svgWidget }} />\n      </div>\n      \n      <h4 className=\"font-bold mb-2\">Embed Code</h4>\n      <div className=\"flex mb-3\">\n        <input\n          type=\"text\"\n          className=\"flex-grow px-3 py-1 text-sm border rounded-l-md bg-gray-700 text-white border-gray-600\"\n          value={generateEmbedCode()}\n          readOnly\n        />\n        <button\n          onClick={copyToClipboard}\n          className=\"bg-gray-600 text-white px-3 py-1 rounded-r-md hover:bg-gray-500 text-sm\"\n          type=\"button\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </button>\n      </div>\n      \n      <p className=\"text-xs text-gray-400\">\n        Add this code to your GitHub README.md file\n      </p>\n    </div>\n  );\n}"
    },
    {
      "path": "components/common/Footer.jsx",
      "content": "import React from 'react';\nimport Link from 'next/link';\n\nconst Footer = () => {\n  return (\n    <footer className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700\">\n      <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {/* Site Info */}\n          <div>\n            <h3 className=\"text-xl font-bold text-blue-600 dark:text-blue-400\">42widgets</h3>\n            <p className=\"mt-4 text-sm text-gray-600 dark:text-gray-300\">\n              Beautiful widgets for 42 School students to showcase their skills, projects, and achievements \n              on GitHub and other platforms.\n            </p>\n          </div>\n          \n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-base font-medium text-gray-900 dark:text-white\">Quick Links</h3>\n            <ul className=\"mt-4 space-y-2\">\n              <li>\n                <Link href=\"/\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  Home\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/widgets/skills\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  Skills Widgets\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/widgets/projects\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  Projects Widgets\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/widgets/stats\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  Stats Widgets\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/widgets/coalition\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  Coalition Widgets\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* About */}\n          <div>\n            <h3 className=\"text-base font-medium text-gray-900 dark:text-white\">About</h3>\n            <ul className=\"mt-4 space-y-2\">\n              <li>\n                <Link href=\"/about\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  About 42widgets\n                </Link>\n              </li>\n              <li>\n                <a href=\"https://github.com/username/42widgets\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  GitHub Repository\n                </a>\n              </li>\n              <li>\n                <a href=\"https://42.fr/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400\">\n                  About 42 School\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        {/* Copyright */}\n        <div className=\"mt-12 pt-8 border-t border-gray-200 dark:border-gray-700\">\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 text-center\">\n            &copy; {new Date().getFullYear()} 42widgets. Made with ❤️ by 42 students for 42 students.\n          </p>\n          <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-2 text-center\">\n            This website is not officially affiliated with 42 School. All 42 trademarks belong to their respective owners.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;"
    },
    {
      "path": "components/common/Navbar.jsx",
      "content": "'use client';\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nconst Navbar = () => {\n  const pathname = usePathname();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  \n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n  \n  const navLinks = [\n    { href: '/', label: 'Home' },\n    { href: '/widgets/skills', label: 'Skills Widgets' },\n    { href: '/widgets/projects', label: 'Projects Widgets' },\n    { href: '/widgets/stats', label: 'Stats Widgets' },\n    { href: '/widgets/coalition', label: 'Coalition Widgets' },\n  ];\n  \n  return (\n    <nav className=\"bg-white dark:bg-gray-800 shadow-md\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <Link href=\"/\" className=\"text-xl font-bold text-blue-600 dark:text-blue-400\">\n                42widgets\n              </Link>\n            </div>\n            \n            {/* Desktop menu */}\n            <div className=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={`\n                    inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium h-full\n                    ${pathname === link.href\n                      ? 'border-blue-500 text-gray-900 dark:text-white'\n                      : 'border-transparent text-gray-500 dark:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600 hover:text-gray-700 dark:hover:text-gray-200'}\n                  `}\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n          \n          {/* Mobile menu button */}\n          <div className=\"flex items-center sm:hidden\">\n            <button\n              onClick={toggleMobileMenu}\n              className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500\"\n              aria-expanded=\"false\"\n            >\n              <span className=\"sr-only\">Open main menu</span>\n              <svg\n                className={`${mobileMenuOpen ? 'hidden' : 'block'} h-6 w-6`}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                aria-hidden=\"true\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n              <svg\n                className={`${mobileMenuOpen ? 'block' : 'hidden'} h-6 w-6`}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                aria-hidden=\"true\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile menu */}\n      <div className={`${mobileMenuOpen ? 'block' : 'hidden'} sm:hidden`}>\n        <div className=\"pt-2 pb-3 space-y-1\">\n          {navLinks.map((link) => (\n            <Link\n              key={link.href}\n              href={link.href}\n              className={`\n                block pl-3 pr-4 py-2 border-l-4 text-base font-medium\n                ${pathname === link.href\n                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300'\n                  : 'border-transparent text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:text-gray-800 dark:hover:text-gray-200'}\n              `}\n            >\n              {link.label}\n            </Link>\n          ))}\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;"
    },
    {
      "path": "components/common/ThemeSelector.jsx",
      "content": ""
    },
    {
      "path": "components/dashboard/WidgetCard.jsx",
      "content": ""
    },
    {
      "path": "components/forms/WidgetGenerator.jsx",
      "content": "import WidgetGeneratorClient from './WidgetGeneratorClient';\n\nconst WidgetGenerator = ({ widgetType = 'skills-bars' }) => {\n  return <WidgetGeneratorClient widgetType={widgetType} />;\n};\n\nexport default WidgetGenerator;"
    },
    {
      "path": "components/forms/WidgetGeneratorClient.jsx",
      "content": "'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport themes from '@/lib/themes';\n\nconst WidgetGeneratorClient = ({ widgetType = 'skills-bars' }) => {\n  const router = useRouter();\n  const [username, setUsername] = useState('');\n  const [theme, setTheme] = useState('dark');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [embedCode, setEmbedCode] = useState('');\n  const [previewUrl, setPreviewUrl] = useState('');\n  const [showPreview, setShowPreview] = useState(false);\n  \n  // Get available themes\n  const themeOptions = Object.entries(themes).map(([key, theme]) => ({\n    value: key,\n    label: theme.name\n  }));\n  \n  // Generate widget URL\n  const generateWidgetUrl = (username, type, theme) => {\n    if (!username) return '';\n    return `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/widget/${type}/${username}?theme=${theme}`;\n  };\n  \n  // Generate markdown embed code\n  const generateEmbedCode = (url) => {\n    if (!url) return '';\n    return `![42 ${widgetType.replace(/-/g, ' ')}](${url})`;\n  };\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!username.trim()) {\n      setError('Please enter a valid username');\n      return;\n    }\n    \n    setIsLoading(true);\n    setError('');\n    \n    try {\n      // First check if the user exists by making an API call\n      const response = await fetch(`/api/student/${username}?dataType=skills`);\n      \n      if (!response.ok) {\n        throw new Error(`Error fetching user data: ${response.statusText}`);\n      }\n      \n      // Generate the preview URL and embed code\n      const url = generateWidgetUrl(username, widgetType, theme);\n      setPreviewUrl(url);\n      setEmbedCode(generateEmbedCode(url));\n      setShowPreview(true);\n      \n    } catch (err) {\n      console.error('Error:', err);\n      setError(err.message || 'Error generating widget');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Copy embed code to clipboard\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(embedCode)\n      .then(() => {\n        alert('Embed code copied to clipboard!');\n      })\n      .catch(err => {\n        console.error('Failed to copy:', err);\n      });\n  };\n  \n  return (\n    <div className=\"w-full max-w-3xl mx-auto\">\n      <form onSubmit={handleSubmit} className=\"bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-8\">\n        <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">\n          Generate Your {widgetType.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')} Widget\n        </h2>\n        \n        {/* Username input */}\n        <div className=\"mb-4\">\n          <label htmlFor=\"username\" className=\"block text-gray-700 dark:text-gray-300 mb-2\">\n            42 Intra Username\n          </label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            className=\"w-full px-4 py-2 border rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-blue-500 focus:border-blue-500\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            placeholder=\"e.g. zelhajou\"\n            required\n          />\n        </div>\n        \n        {/* Theme selection */}\n        <div className=\"mb-6\">\n          <label className=\"block text-gray-700 dark:text-gray-300 mb-2\">\n            Widget Theme\n          </label>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {themeOptions.map((themeOption) => (\n              <label \n                key={themeOption.value}\n                className={`\n                  flex items-center justify-center p-3 border rounded-md cursor-pointer\n                  ${theme === themeOption.value \n                    ? 'bg-blue-50 dark:bg-blue-900 border-blue-500 dark:border-blue-400' \n                    : 'bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600'}\n                `}\n              >\n                <input\n                  type=\"radio\"\n                  className=\"sr-only\"\n                  value={themeOption.value}\n                  checked={theme === themeOption.value}\n                  onChange={() => setTheme(themeOption.value)}\n                />\n                <span className={`\n                  text-sm font-medium\n                  ${theme === themeOption.value \n                    ? 'text-blue-600 dark:text-blue-300' \n                    : 'text-gray-700 dark:text-gray-300'}\n                `}>\n                  {themeOption.label}\n                </span>\n              </label>\n            ))}\n          </div>\n        </div>\n        \n        {/* Submit button */}\n        <button\n          type=\"submit\"\n          className={`\n            w-full py-2 px-4 rounded-md text-white font-medium\n            ${isLoading\n              ? 'bg-gray-500 cursor-not-allowed'\n              : 'bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300'}\n            transition duration-150 ease-in-out\n          `}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Generating...' : 'Generate Widget'}\n        </button>\n        \n        {/* Error message */}\n        {error && (\n          <div className=\"mt-4 text-red-500 dark:text-red-400\">\n            {error}\n          </div>\n        )}\n      </form>\n      \n      {/* Preview and embed code */}\n      {showPreview && (\n        <div className=\"bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-8\">\n          <h3 className=\"text-lg font-bold mb-4 text-gray-800 dark:text-white\">\n            Widget Preview\n          </h3>\n          \n          <div className=\"border border-gray-300 dark:border-gray-600 rounded-lg p-4 mb-6 overflow-hidden\">\n            <img \n              src={previewUrl}\n              alt={`${username}'s ${widgetType} widget`}\n              className=\"w-full max-w-full mx-auto\"\n            />\n          </div>\n          \n          <h3 className=\"text-lg font-bold mb-2 text-gray-800 dark:text-white\">\n            Embed Code\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n            Add this to your GitHub README.md or any markdown file:\n          </p>\n          \n          <div className=\"flex\">\n            <input\n              type=\"text\"\n              className=\"flex-grow px-4 py-2 border rounded-l-md bg-gray-50 dark:bg-gray-700 text-gray-800 dark:text-white border-gray-300 dark:border-gray-600\"\n              value={embedCode}\n              readOnly\n            />\n            <button\n              onClick={copyToClipboard}\n              className=\"bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-white px-4 py-2 rounded-r-md hover:bg-gray-300 dark:hover:bg-gray-500\"\n              type=\"button\"\n            >\n              Copy\n            </button>\n          </div>\n          \n          <p className=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">\n            Direct link: <a href={previewUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-500 hover:underline\">Open image in new tab</a>\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WidgetGeneratorClient;"
    },
    {
      "path": "components/widgets/coalition/CoalitionCard.jsx",
      "content": ""
    },
    {
      "path": "components/widgets/projects/ProjectsTimeline.jsx",
      "content": ""
    },
    {
      "path": "components/widgets/skills/SkillsBars.jsx",
      "content": "'use client';\n\nimport React, { useState } from 'react';\nimport themes, { getSkillColor } from '@/lib/themes';\n\nconst SkillsBars = ({ studentData, theme = 'dark' }) => {\n  const themeConfig = themes[theme] || themes.dark;\n  \n  // Calculate maximum skills per cursus for consistent spacing\n  const maxSkillsPerCursus = Math.max(\n    ...Object.values(studentData.skills || {}).map(skills => skills.length || 0),\n    1\n  );\n\n  return (\n    <div className={`rounded-lg shadow-lg ${themeConfig.cssClasses.background} ${themeConfig.cssClasses.text} w-full max-w-3xl mx-auto overflow-hidden`}>\n      {/* Header */}\n      <div className=\"p-6 border-b border-opacity-20 ${themeConfig.cssClasses.borderColor}\">\n        <div className=\"flex items-center\">\n          {studentData.image && (\n            <img \n              src={studentData.image} \n              alt={studentData.displayName || studentData.login} \n              className=\"w-12 h-12 rounded-full mr-4\"\n            />\n          )}\n          <div>\n            <h2 className=\"text-2xl font-bold\">\n              {studentData.displayName || studentData.login}'s 42 Skills\n            </h2>\n            <p className={`text-sm ${themeConfig.cssClasses.textSecondary}`}>\n              42 School Programming Skills Visualization\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Skills content */}\n      <div className=\"p-6 space-y-6\">\n        {Object.entries(studentData.skills || {}).map(([cursusName, skills]) => (\n          <div key={cursusName} className={`p-4 rounded-lg ${themeConfig.cssClasses.cardBackground}`}>\n            <h3 className=\"text-xl font-semibold mb-4\">{cursusName}</h3>\n            <div className=\"space-y-4\">\n              {skills.map((skill) => (\n                <div key={`${cursusName}-${skill.name}`} className=\"space-y-1\">\n                  <div className=\"flex justify-between\">\n                    <span>{skill.name}</span>\n                    <span className=\"font-mono\">{skill.level.toFixed(2)}/10.00</span>\n                  </div>\n                  <div className={`w-full ${themeConfig.cssClasses.progressBg} rounded-full h-2`}>\n                    <div \n                      className={`h-2 rounded-full`} \n                      style={{ \n                        width: `${(skill.level / 10) * 100}%`,\n                        backgroundColor: getSkillColor(skill.level, theme)\n                      }}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Footer */}\n      <div className={`px-6 py-3 border-t ${themeConfig.cssClasses.borderColor} border-opacity-20 text-center ${themeConfig.cssClasses.textSecondary} text-sm`}>\n        Powered by 42widgets.io\n      </div>\n    </div>\n  );\n};\n\nexport default SkillsBars;"
    },
    {
      "path": "components/widgets/skills/SkillsRadar.jsx",
      "content": "'use client';\n\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, RadarController, RadialLinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\nimport themes from '@/lib/themes';\n\n// Register required Chart.js components\nChart.register(RadarController, RadialLinearScale, PointElement, LineElement, Tooltip, Legend);\n\nconst SkillsRadar = ({ studentData, theme = 'dark' }) => {\n  const themeConfig = themes[theme] || themes.dark;\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  \n  useEffect(() => {\n    if (!chartRef.current) return;\n    \n    // Clean up previous chart instance\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    \n    // Extract all unique skills and prepare data for the radar chart\n    const allSkills = [];\n    const cursusData = [];\n    \n    Object.entries(studentData.skills || {}).forEach(([cursusName, skills]) => {\n      const skillValues = [];\n      const skillNames = [];\n      \n      skills.forEach((skill) => {\n        if (!skillNames.includes(skill.name)) {\n          skillNames.push(skill.name);\n        }\n        if (!allSkills.includes(skill.name)) {\n          allSkills.push(skill.name);\n        }\n        skillValues.push(skill.level);\n      });\n      \n      cursusData.push({\n        name: cursusName,\n        skills: skillNames,\n        values: skillValues\n      });\n    });\n    \n    // Limit to top 8 skills if there are more for readability\n    let displaySkills = allSkills;\n    if (allSkills.length > 8) {\n      // Find the most common skills across cursus\n      const skillCounts = {};\n      const skillMaxValues = {};\n      \n      Object.values(studentData.skills || {}).forEach(skills => {\n        skills.forEach(skill => {\n          skillCounts[skill.name] = (skillCounts[skill.name] || 0) + 1;\n          skillMaxValues[skill.name] = Math.max(skillMaxValues[skill.name] || 0, skill.level);\n        });\n      });\n      \n      // Sort by frequency and then by highest level\n      displaySkills = allSkills\n        .sort((a, b) => {\n          const countDiff = skillCounts[b] - skillCounts[a];\n          if (countDiff !== 0) return countDiff;\n          return skillMaxValues[b] - skillMaxValues[a];\n        })\n        .slice(0, 8);\n    }\n    \n    // Prepare datasets for Chart.js\n    const datasets = [];\n    \n    // Define colors for each cursus based on theme\n    const colorSets = [\n      { borderColor: themeConfig.colors.accent, backgroundColor: `${themeConfig.colors.accent}33` },\n      { borderColor: themeConfig.colors.success, backgroundColor: `${themeConfig.colors.success}33` },\n      { borderColor: themeConfig.colors.warning, backgroundColor: `${themeConfig.colors.warning}33` }\n    ];\n    \n    // Create a dataset for each cursus\n    Object.entries(studentData.skills || {}).forEach(([cursusName, skills], index) => {\n      // Map skill values to the selected display skills\n      const dataValues = displaySkills.map(skillName => {\n        const skill = skills.find(s => s.name === skillName);\n        return skill ? skill.level : 0;\n      });\n      \n      datasets.push({\n        label: cursusName,\n        data: dataValues,\n        borderColor: colorSets[index % colorSets.length].borderColor,\n        backgroundColor: colorSets[index % colorSets.length].backgroundColor,\n        borderWidth: 2,\n        pointBackgroundColor: colorSets[index % colorSets.length].borderColor,\n        pointRadius: 4\n      });\n    });\n    \n    // Create the radar chart\n    const ctx = chartRef.current.getContext('2d');\n    chartInstance.current = new Chart(ctx, {\n      type: 'radar',\n      data: {\n        labels: displaySkills,\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'bottom',\n            labels: {\n              color: themeConfig.colors.text,\n              font: {\n                family: themeConfig.fontFamily,\n                size: 14\n              },\n              padding: 20\n            }\n          },\n          tooltip: {\n            backgroundColor: themeConfig.colors.cardBackground,\n            titleColor: themeConfig.colors.text,\n            bodyColor: themeConfig.colors.text,\n            borderColor: themeConfig.colors.border,\n            borderWidth: 1,\n            displayColors: true,\n            padding: 10,\n            titleFont: {\n              family: themeConfig.fontFamily,\n              size: 14,\n              weight: 'bold'\n            },\n            bodyFont: {\n              family: themeConfig.fontFamily,\n              size: 12\n            },\n            callbacks: {\n              label: function(context) {\n                const label = context.dataset.label || '';\n                return `${label}: ${context.raw.toFixed(2)}/10`;\n              }\n            }\n          }\n        },\n        scales: {\n          r: {\n            min: 0,\n            max: 10,\n            ticks: {\n              stepSize: 2,\n              backdropColor: 'transparent',\n              color: themeConfig.colors.textSecondary,\n              font: {\n                family: themeConfig.fontFamily,\n                size: 10\n              }\n            },\n            grid: {\n              color: `${themeConfig.colors.border}66`, // 40% opacity\n            },\n            angleLines: {\n              color: `${themeConfig.colors.border}66`, // 40% opacity\n            },\n            pointLabels: {\n              color: themeConfig.colors.text,\n              font: {\n                family: themeConfig.fontFamily,\n                size: 12\n              }\n            }\n          }\n        }\n      }\n    });\n    \n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [studentData, theme]);\n  \n  return (\n    <div className={`rounded-lg shadow-lg ${themeConfig.cssClasses.background} ${themeConfig.cssClasses.text} w-full max-w-3xl mx-auto overflow-hidden`}>\n      {/* Header */}\n      <div className={`p-6 border-b border-opacity-20 ${themeConfig.cssClasses.borderColor}`}>\n        <div className=\"flex items-center\">\n          {studentData.image && (\n            <img \n              src={studentData.image} \n              alt={studentData.displayName || studentData.login} \n              className=\"w-12 h-12 rounded-full mr-4\"\n            />\n          )}\n          <div>\n            <h2 className=\"text-2xl font-bold\">\n              {studentData.displayName || studentData.login}'s Skills Radar\n            </h2>\n            <p className={`text-sm ${themeConfig.cssClasses.textSecondary}`}>\n              42 School Skills Visualization\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart content */}\n      <div className=\"p-6\">\n        <div className=\"w-full aspect-square\">\n          <canvas ref={chartRef}></canvas>\n        </div>\n      </div>\n      \n      {/* Footer */}\n      <div className={`px-6 py-3 border-t ${themeConfig.cssClasses.borderColor} border-opacity-20 text-center ${themeConfig.cssClasses.textSecondary} text-sm`}>\n        Powered by 42widgets.io\n      </div>\n    </div>\n  );\n};\n\nexport default SkillsRadar;"
    },
    {
      "path": "components/widgets/stats/AchievementsList.jsx",
      "content": ""
    },
    {
      "path": "components/widgets/stats/CoreProgress.jsx",
      "content": ""
    },
    {
      "path": "jsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n"
    },
    {
      "path": "lib/api.js",
      "content": "import axios from 'axios';\n\n// Base API URLs\nconst API_URL = process.env.NEXT_PUBLIC_42_API_URL || \"https://api.intra.42.fr/v2\";\nconst TOKEN_URL = \"https://api.intra.42.fr/oauth/token\";\nconst CLIENT_ID = process.env.FT_CLIENT_ID;\nconst CLIENT_SECRET = process.env.FT_CLIENT_SECRET;\n\n// Cache the token to avoid unnecessary requests\nlet cachedToken = null;\nlet tokenExpiry = null;\n\n/**\n * Get an authentication token from the 42 API\n */\nexport async function getToken() {\n  // Check if we have a valid cached token\n  if (cachedToken && tokenExpiry && Date.now() < tokenExpiry) {\n    return cachedToken;\n  }\n\n  if (!CLIENT_ID || !CLIENT_SECRET) {\n    console.error('Missing 42 API credentials:', { \n      clientIdExists: !!CLIENT_ID, \n      clientSecretExists: !!CLIENT_SECRET \n    });\n    throw new Error('Missing 42 API credentials. Make sure FT_CLIENT_ID and FT_CLIENT_SECRET are set.');\n  }\n  \n  try {\n    console.log('Requesting token from 42 API...');\n    const response = await axios.post(TOKEN_URL, {\n      grant_type: \"client_credentials\",\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n    });\n\n    // Cache the token and set expiry (subtract 5 minutes as safety margin)\n    cachedToken = response.data.access_token;\n    tokenExpiry = Date.now() + (response.data.expires_in * 1000) - 300000;\n    console.log('Token obtained successfully');\n\n    return cachedToken;\n  } catch (error) {\n    console.error('Error getting 42 API token:', error);\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    }\n    throw new Error(`Failed to get 42 API token: ${error.message}`);\n  }\n}\n\n/**\n * Make an authenticated request to the 42 API with retry logic\n */\nexport async function api42Request(endpoint, options = {}, retryCount = 0) {\n  try {\n    const token = await getToken();\n    \n    const response = await axios({\n      url: `${API_URL}${endpoint}`,\n      headers: { \n        Authorization: `Bearer ${token}`,\n        ...options.headers\n      },\n      ...options\n    });\n    \n    return response.data;\n  } catch (error) {\n    // Handle rate limiting with exponential backoff\n    if (error.response && error.response.status === 429 && retryCount < 3) {\n      console.warn(`Rate limited on ${endpoint}, retry attempt ${retryCount + 1}...`);\n      \n      // Calculate backoff time: 2^retry * 1000ms + random jitter\n      const backoffTime = (Math.pow(2, retryCount) * 1000) + (Math.random() * 1000);\n      \n      // Wait for backoff time\n      await new Promise(resolve => setTimeout(resolve, backoffTime));\n      \n      // Retry the request\n      return api42Request(endpoint, options, retryCount + 1);\n    }\n    \n    console.error(`Error in API request ${endpoint}:`, error);\n    throw new Error(`Failed API request: ${error.response?.status || ''} ${error.message}`);\n  }\n}\n\n/**\n * Fetch comprehensive student data in one call\n */\nexport async function fetchStudentData(username) {\n  try {\n    // Fetch student basic profile\n    const userData = await api42Request(`/users/${username}`);\n    const userId = userData.id;\n    \n    // Make parallel requests for different data types\n    const [projectsData, coalitionsData] = await Promise.all([\n      api42Request(`/users/${userId}/projects_users`),\n      api42Request(`/users/${userId}/coalitions`).catch(() => [])\n    ]);\n    \n    // Process skills data\n    const cursusData = userData.cursus_users || [];\n    const skillsByCursus = {};\n    \n    for (const cursus of cursusData) {\n      const cursusName = cursus.cursus?.name || 'Unknown Cursus';\n      const skills = cursus.skills || [];\n      skillsByCursus[cursusName] = skills;\n    }\n    \n    // Process projects data\n    const projects = {\n      completed: [],\n      inProgress: [],\n      failed: []\n    };\n    \n    for (const project of projectsData) {\n      const projectInfo = {\n        id: project.id,\n        name: project.project?.name || 'Unknown Project',\n        status: project.status,\n        finalMark: project.final_mark,\n        validatedAt: project.validated_at,\n        markedAt: project[\"marked_at\"],\n        cursusName: project.cursus_ids?.length > 0 ? \n          project.cursus_ids[0].name : 'Unknown Cursus'\n      };\n      \n      if (project.status === 'finished' && project.validated) {\n        projects.completed.push(projectInfo);\n      } else if (project.status === 'in_progress') {\n        projects.inProgress.push(projectInfo);\n      } else {\n        projects.failed.push(projectInfo);\n      }\n    }\n    \n    // Process coalition data\n    let coalition = null;\n    if (coalitionsData && coalitionsData.length > 0) {\n      coalition = {\n        id: coalitionsData[0].id,\n        name: coalitionsData[0].name,\n        slug: coalitionsData[0].slug,\n        color: coalitionsData[0].color,\n        score: coalitionsData[0].score,\n        imageUrl: coalitionsData[0].image_url,\n        coverUrl: coalitionsData[0].cover_url\n      };\n    }\n    \n    // Return compiled student data\n    return {\n      id: userData.id,\n      login: userData.login,\n      displayName: userData.displayname || userData.login,\n      email: userData.email,\n      image: userData.image?.link,\n      location: userData.location,\n      correctionPoints: userData.correction_point,\n      wallet: userData.wallet,\n      createdAt: userData.created_at,\n      updatedAt: userData.updated_at,\n      skills: skillsByCursus,\n      projects,\n      coalition\n    };\n  } catch (error) {\n    console.error('Error fetching student data:', error);\n    throw new Error(`Failed to fetch student data: ${error.message}`);\n  }\n}"
    },
    {
      "path": "lib/generators/generateGithubCompatibleSvg.js",
      "content": "import themes, { getSkillColor } from '../themes';\n\n/**\n * Escape special characters for XML/SVG\n */\nfunction escapeXml(unsafe) {\n  return unsafe.replace(/[<>&'\"]/g, function(c) {\n    switch (c) {\n      case '<': return '&lt;';\n      case '>': return '&gt;';\n      case '&': return '&amp;';\n      case '\\'': return '&apos;';\n      case '\"': return '&quot;';\n    }\n  });\n}\n\n/**\n * Generate a GitHub-compatible SVG widget\n * This creates a simpler SVG that should work better with GitHub's Camo proxy\n */\nexport function generateGithubCompatibleSvg(studentData, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  \n  // Calculate SVG dimensions\n  const cursusCount = Object.keys(studentData.skills || {}).length;\n  if (cursusCount === 0) {\n    return generateErrorSVG('No skills data available', themeName);\n  }\n  \n  const maxSkillsPerCursus = Math.max(\n    ...Object.values(studentData.skills).map(skills => skills.length || 0),\n    1\n  );\n  \n  const width = 800;\n  const skillHeight = 30;\n  const cursusHeight = 50 + (skillHeight * maxSkillsPerCursus) + 20;\n  let height = 100 + (cursusHeight * cursusCount);\n  \n  // Min height\n  height = Math.max(height, 300);\n  \n  // XML declaration and DOCTYPE\n  let svg = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect width=\"${width}\" height=\"${height}\" fill=\"${theme.colors.background}\" rx=\"10\" ry=\"10\" />\n  <text x=\"40\" y=\"50\" font-size=\"24\" font-weight=\"bold\" fill=\"${theme.colors.text}\" style=\"font-family: Arial, sans-serif;\">\n    ${escapeXml(studentData.displayName || studentData.login)}'s 42 Skills\n  </text>\n  <text x=\"40\" y=\"75\" font-size=\"14\" fill=\"${theme.colors.textSecondary}\" style=\"font-family: Arial, sans-serif;\">\n    42 School Programming Skills Visualization\n  </text>\n`;\n  \n  let yOffset = 100;\n  \n  // Generate cursus sections\n  Object.entries(studentData.skills || {}).forEach(([cursusName, skills]) => {\n    // Cursus container\n    svg += `<rect x=\"40\" y=\"${yOffset}\" width=\"${width - 80}\" height=\"${50 + (skillHeight * skills.length)}\" \n      fill=\"${theme.colors.cardBackground}\" rx=\"5\" ry=\"5\" />\n    <text x=\"60\" y=\"${yOffset + 30}\" font-size=\"18\" font-weight=\"bold\" fill=\"${theme.colors.text}\" style=\"font-family: Arial, sans-serif;\">\n      ${escapeXml(cursusName)}\n    </text>\n`;\n    \n    // Skills bars\n    yOffset += 50;\n    skills.forEach((skill) => {\n      const barWidth = (width - 160) * (skill.level / 10);\n      \n      svg += `<text x=\"60\" y=\"${yOffset + 15}\" font-size=\"14\" fill=\"${theme.colors.text}\" style=\"font-family: Arial, sans-serif;\">\n      ${escapeXml(skill.name)}\n    </text>\n    <text x=\"${width - 80}\" y=\"${yOffset + 15}\" font-size=\"14\" text-anchor=\"end\" fill=\"${theme.colors.text}\" style=\"font-family: Arial, sans-serif;\">\n      ${skill.level.toFixed(2)}/10.00\n    </text>\n    <rect x=\"60\" y=\"${yOffset + 20}\" width=\"${width - 160}\" height=\"8\" fill=\"${theme.colors.progressBg}\" rx=\"4\" ry=\"4\" />\n    <rect x=\"60\" y=\"${yOffset + 20}\" width=\"${barWidth}\" height=\"8\" fill=\"${getSkillColor(skill.level, themeName)}\" rx=\"4\" ry=\"4\" />\n`;\n      \n      yOffset += skillHeight;\n    });\n    \n    yOffset += 20;\n  });\n  \n  // Add footer\n  svg += `<text x=\"${width / 2}\" y=\"${height - 20}\" font-size=\"12\" text-anchor=\"middle\" fill=\"${theme.colors.textSecondary}\" style=\"font-family: Arial, sans-serif;\">\n    42widgets\n  </text>\n</svg>`;\n  \n  return svg;\n}\n\n/**\n * Generate an error SVG\n */\nexport function generateErrorSVG(message, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  const width = 800;\n  const height = 400;\n  \n  return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect width=\"${width}\" height=\"${height}\" fill=\"${theme.colors.background}\" rx=\"10\" ry=\"10\" />\n  <text x=\"${width/2}\" y=\"${height/2 - 20}\" font-size=\"24\" font-weight=\"bold\" fill=\"${theme.colors.danger}\" text-anchor=\"middle\" style=\"font-family: Arial, sans-serif;\">\n    Error\n  </text>\n  <text x=\"${width/2}\" y=\"${height/2 + 20}\" font-size=\"18\" fill=\"${theme.colors.text}\" text-anchor=\"middle\" style=\"font-family: Arial, sans-serif;\">\n    ${escapeXml(message)}\n  </text>\n  <text x=\"${width/2}\" y=\"${height - 40}\" font-size=\"14\" fill=\"${theme.colors.textSecondary}\" text-anchor=\"middle\" style=\"font-family: Arial, sans-serif;\">\n    Please check the username and try again.\n  </text>\n</svg>`;\n}\n\nexport default {\n  generateGithubCompatibleSvg,\n  generateErrorSVG\n};"
    },
    {
      "path": "lib/generators/skillsGenerator.js",
      "content": "import themes, { getSkillColor } from '../themes';\n\n/**\n * Escape special characters for XML/SVG\n */\nfunction escapeXml(unsafe) {\n  return unsafe.replace(/[<>&'\"]/g, function(c) {\n    switch (c) {\n      case '<': return '&lt;';\n      case '>': return '&gt;';\n      case '&': return '&amp;';\n      case '\\'': return '&apos;';\n      case '\"': return '&quot;';\n    }\n  });\n}\nexport function generateSkillsBars(studentData, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  \n  // Calculate SVG dimensions\n  const cursusCount = Object.keys(studentData.skills || {}).length;\n  if (cursusCount === 0) {\n    return generateErrorSVG('No skills data available', themeName);\n  }\n  \n  const maxSkillsPerCursus = Math.max(\n    ...Object.values(studentData.skills).map(skills => skills.length || 0),\n    1\n  );\n  \n  const width = 800;\n  const skillHeight = 30;\n  const cursusHeight = 50 + (skillHeight * maxSkillsPerCursus) + 20;\n  let height = 100 + (cursusHeight * cursusCount);\n  \n  // Min height\n  height = Math.max(height, 300);\n  \n  let svg = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\n    <style>\n      text {\n        font-family: ${theme.fontFamily};\n      }\n    </style>\n    <rect width=\"${width}\" height=\"${height}\" fill=\"${theme.colors.background}\" rx=\"10\" ry=\"10\" />\n    <text x=\"40\" y=\"50\" font-size=\"24\" font-weight=\"bold\" fill=\"${theme.colors.text}\">\n      ${escapeXml(studentData.displayName || studentData.login)}'s 42 Skills\n    </text>\n    <text x=\"40\" y=\"75\" font-size=\"14\" fill=\"${theme.colors.textSecondary}\" opacity=\"0.8\">\n      42 School Programming Skills Visualization\n    </text>\n  `;\n  \n  let yOffset = 100;\n  \n  // Generate cursus sections\n  Object.entries(studentData.skills || {}).forEach(([cursusName, skills]) => {\n    // Cursus container\n    svg += `\n      <rect x=\"40\" y=\"${yOffset}\" width=\"${width - 80}\" height=\"${50 + (skillHeight * skills.length)}\" \n        fill=\"${theme.colors.cardBackground}\" rx=\"5\" ry=\"5\" />\n      <text x=\"60\" y=\"${yOffset + 30}\" font-size=\"18\" font-weight=\"bold\" fill=\"${theme.colors.text}\">\n        ${escapeXml(cursusName)}\n      </text>\n    `;\n    \n    // Skills bars\n    yOffset += 50;\n    skills.forEach((skill) => {\n      const barWidth = (width - 160) * (skill.level / 10);\n      \n      svg += `\n        <text x=\"60\" y=\"${yOffset + 15}\" font-size=\"14\" fill=\"${theme.colors.text}\">\n          ${escapeXml(skill.name)}\n        </text>\n        <text x=\"${width - 80}\" y=\"${yOffset + 15}\" font-size=\"14\" text-anchor=\"end\" fill=\"${theme.colors.text}\">\n          ${skill.level.toFixed(2)}/10.00\n        </text>\n        <rect x=\"60\" y=\"${yOffset + 20}\" width=\"${width - 160}\" height=\"8\" fill=\"${theme.colors.progressBg}\" rx=\"4\" ry=\"4\" />\n        <rect x=\"60\" y=\"${yOffset + 20}\" width=\"${barWidth}\" height=\"8\" fill=\"${getSkillColor(skill.level, themeName)}\" rx=\"4\" ry=\"4\" />\n      `;\n      \n      yOffset += skillHeight;\n    });\n    \n    yOffset += 20;\n  });\n  \n  // Add footer\n  svg += `\n    <text x=\"${width / 2}\" y=\"${height - 20}\" font-size=\"12\" text-anchor=\"middle\" fill=\"${theme.colors.textSecondary}\">\n      42widgets\n    </text>\n  `;\n  \n  svg += `</svg>`;\n  \n  return svg;\n}\n\n/**\n * Generate an error SVG\n */\nexport function generateErrorSVG(message, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  const width = 800;\n  const height = 400;\n  \n  return `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\n    <style>\n      text {\n        font-family: ${theme.fontFamily};\n      }\n    </style>\n    <rect width=\"${width}\" height=\"${height}\" fill=\"${theme.colors.background}\" rx=\"10\" ry=\"10\" />\n    <text x=\"${width/2}\" y=\"${height/2 - 20}\" font-size=\"24\" font-weight=\"bold\" fill=\"${theme.colors.danger}\" text-anchor=\"middle\">\n      Error\n    </text>\n    <text x=\"${width/2}\" y=\"${height/2 + 20}\" font-size=\"18\" fill=\"${theme.colors.text}\" text-anchor=\"middle\">\n      ${escapeXml(message)}\n    </text>\n    <text x=\"${width/2}\" y=\"${height - 40}\" font-size=\"14\" fill=\"${theme.colors.textSecondary}\" text-anchor=\"middle\">\n      Please check the username and try again.\n    </text>\n  </svg>\n  `;\n}\n\nexport default {\n  generateSkillsBars,\n  generateErrorSVG\n};"
    },
    {
      "path": "lib/mock-data.js",
      "content": "/**\n * Mock student data for development and fallback purposes\n */\nexport const mockStudentData = {\n    login: \"zelhajou\",\n    displayName: \"Zakaria El Hajjouji\",\n    image: \"https://cdn.intra.42.fr/users/zelhajou.jpg\",\n    skills: {\n      \"42cursus\": [\n        { name: \"C\", level: 9.45 },\n        { name: \"Shell\", level: 8.75 },\n        { name: \"Git\", level: 7.9 },\n        { name: \"Unix\", level: 8.2 },\n        { name: \"Algorithms\", level: 7.5 },\n        { name: \"Network and System Administration\", level: 6.8 },\n        { name: \"Web\", level: 5.6 }\n      ],\n      \"42cursus - Web\": [\n        { name: \"JavaScript\", level: 8.1 },\n        { name: \"React\", level: 7.8 },\n        { name: \"Node.js\", level: 7.3 },\n        { name: \"CSS\", level: 6.9 },\n        { name: \"TypeScript\", level: 6.2 }\n      ]\n    }\n  };\n  \n  export default mockStudentData;"
    },
    {
      "path": "lib/themes.js",
      "content": "/**\n * Widget theme configurations\n */\nexport const themes = {\n  // Dark theme (default)\n  dark: {\n    name: 'Dark',\n    colors: {\n      background: '#1e293b',       // slate-800\n      text: '#f8fafc',             // slate-50\n      textSecondary: '#cbd5e1',    // slate-300\n      cardBackground: '#334155',   // slate-700\n      border: '#475569',           // slate-600\n      accent: '#3b82f6',           // blue-500\n      success: '#22c55e',          // green-500\n      warning: '#eab308',          // yellow-500\n      danger: '#ef4444',           // red-500\n      // Progress bar backgrounds\n      progressBg: '#1e293b',       // slate-800\n      highScore: '#22c55e',        // green-500\n      mediumScore: '#3b82f6',      // blue-500\n      lowScore: '#eab308',         // yellow-500\n      failScore: '#ef4444'         // red-500\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  },\n  \n  // Light theme\n  light: {\n    name: 'Light',\n    colors: {\n      background: '#f8fafc',       // slate-50\n      text: '#1e293b',             // slate-800\n      textSecondary: '#475569',    // slate-600\n      cardBackground: '#f1f5f9',   // slate-100\n      border: '#cbd5e1',           // slate-300\n      accent: '#2563eb',           // blue-600\n      success: '#16a34a',          // green-600\n      warning: '#ca8a04',          // yellow-600\n      danger: '#dc2626',           // red-600\n      // Progress bar backgrounds\n      progressBg: '#e2e8f0',       // slate-200\n      highScore: '#16a34a',        // green-600\n      mediumScore: '#2563eb',      // blue-600\n      lowScore: '#ca8a04',         // yellow-600\n      failScore: '#dc2626'         // red-600\n    },\n    fontFamily: '\"Inter\", \"Roboto\", \"Helvetica\", sans-serif',\n  }\n};\n\n/**\n * Get color for skill level\n */\nexport function getSkillColor(value, themeName = 'dark') {\n  const theme = themes[themeName] || themes.dark;\n  \n  if (value >= 8) return theme.colors.highScore;\n  if (value >= 6) return theme.colors.mediumScore;\n  if (value >= 4) return theme.colors.lowScore;\n  return theme.colors.failScore;\n}\n\nexport default themes;"
    },
    {
      "path": "next.config.mjs",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    // Enable React's strict mode for development\n    reactStrictMode: true,\n    \n    // Configure for serverless/edge deployment if needed\n    // output: 'standalone',\n  };\n  \n  export default nextConfig;"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"42-widgets\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"chart.js\": \"^4.4.8\",\n    \"jotai\": \"^2.12.2\",\n    \"lodash\": \"^4.17.21\",\n    \"next\": \"15.2.4\",\n    \"react\": \"^19.0.0\",\n    \"react-chartjs-2\": \"^5.3.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"react-svg-to-image\": \"^3.0.0\",\n    \"swr\": \"^2.3.3\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/postcss\": \"^4\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss\": \"^8.4.31\",\n    \"tailwindcss\": \"^3.3.5\"\n  }\n}\n"
    },
    {
      "path": "postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}"
    },
    {
      "path": "postcss.config.mjs",
      "content": "const config = {\n  plugins: [\"@tailwindcss/postcss\"],\n};\n\nexport default config;\n"
    },
    {
      "path": "project_files_strcuture.md",
      "content": ".\n├── app\n│   ├── api\n│   │   ├── student\n│   │   │   └── [username]\n│   │   │       └── route.js\n│   │   └── widget\n│   │       └── [type]\n│   │           └── [username]\n│   │               └── route.js\n│   ├── favicon.ico\n│   ├── globals.css\n│   ├── layout.js\n│   ├── page.js\n│   └── widgets\n│       ├── coalition\n│       │   └── page.js\n│       ├── projects\n│       │   └── page.js\n│       ├── skills\n│       │   └── page.js\n│       └── stats\n│           └── page.js\n├── components\n│   ├── common\n│   │   ├── Footer.jsx\n│   │   ├── Navbar.jsx\n│   │   └── ThemeSelector.jsx\n│   ├── dashboard\n│   │   └── WidgetCard.jsx\n│   ├── forms\n│   │   └── WidgetGenerator.jsx\n│   └── widgets\n│       ├── coalition\n│       │   └── CoalitionCard.jsx\n│       ├── projects\n│       │   └── ProjectsTimeline.jsx\n│       ├── skills\n│       │   ├── SkillsBars.jsx\n│       │   └── SkillsRadar.jsx\n│       └── stats\n│           ├── AchievementsList.jsx\n│           └── CoreProgress.jsx\n├── jsconfig.json\n├── lib\n│   ├── api42.js\n│   ├── generators\n│   │   ├── projectsGenerator.js\n│   │   ├── skillsGenerator.js\n│   │   └── statsGenerator.js\n│   └── themes.js\n├── next.config.mjs\n├── package.json\n├── package-lock.json\n├── postcss.config.mjs\n├── project_files_strcuture.md\n├── public\n│   ├── coalition_logos\n│   ├── file.svg\n│   ├── globe.svg\n│   ├── next.svg\n│   ├── vercel.svg\n│   └── window.svg\n├── README.md\n└── styles\n\n27 directories, 38 files\n"
    },
    {
      "path": "tailwind.config.js",
      "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./lib/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}"
    }
  ]
}